
Water_Heat_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007cc  0800e768  0800e768  0000f768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef34  0800ef34  000101dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef34  0800ef34  0000ff34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef3c  0800ef3c  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef3c  0800ef3c  0000ff3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef40  0800ef40  0000ff40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800ef44  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00004dac  200001dc  200001dc  000101dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f88  20004f88  000101dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb24  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000425a  00000000  00000000  0002ed30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019f8  00000000  00000000  00032f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001432  00000000  00000000  00034988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ac9  00000000  00000000  00035dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd6c  00000000  00000000  0005a883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db6f2  00000000  00000000  000785ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153ce1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000082e8  00000000  00000000  00153d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0015c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e74c 	.word	0x0800e74c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800e74c 	.word	0x0800e74c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <clampf>:

/* TIM3 is created by CubeMX */
extern TIM_HandleTypeDef htim3;

/* Clamp helper */
static inline float clampf(float x, float a, float b) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	ed87 0a03 	vstr	s0, [r7, #12]
 800102a:	edc7 0a02 	vstr	s1, [r7, #8]
 800102e:	ed87 1a01 	vstr	s2, [r7, #4]
    if (x < a) return a;
 8001032:	ed97 7a03 	vldr	s14, [r7, #12]
 8001036:	edd7 7a02 	vldr	s15, [r7, #8]
 800103a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001042:	d501      	bpl.n	8001048 <clampf+0x28>
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	e00b      	b.n	8001060 <clampf+0x40>
    if (x > b) return b;
 8001048:	ed97 7a03 	vldr	s14, [r7, #12]
 800104c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001050:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001058:	dd01      	ble.n	800105e <clampf+0x3e>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	e000      	b.n	8001060 <clampf+0x40>
    return x;
 800105e:	68fb      	ldr	r3, [r7, #12]
}
 8001060:	ee07 3a90 	vmov	s15, r3
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <BTS7960_PWM_Init>:

void BTS7960_PWM_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
    /* Start the PWM outputs that CubeMX configured */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);  // PB0 = TIM3_CH3
 8001078:	2108      	movs	r1, #8
 800107a:	4808      	ldr	r0, [pc, #32]	@ (800109c <BTS7960_PWM_Init+0x28>)
 800107c:	f003 fd94 	bl	8004ba8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);  // PB1 = TIM3_CH4
 8001080:	210c      	movs	r1, #12
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <BTS7960_PWM_Init+0x28>)
 8001084:	f003 fd90 	bl	8004ba8 <HAL_TIM_PWM_Start>

    /* Ensure known state */
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <BTS7960_PWM_Init+0x28>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001090:	4b02      	ldr	r3, [pc, #8]	@ (800109c <BTS7960_PWM_Init+0x28>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200002b0 	.word	0x200002b0

080010a0 <BTS7960_SetDuty_CH3>:

void BTS7960_SetDuty_CH3(float duty_percent)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	ed87 0a01 	vstr	s0, [r7, #4]
    duty_percent = clampf(duty_percent, 0.0f, 100.0f);
 80010aa:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 80010fc <BTS7960_SetDuty_CH3+0x5c>
 80010ae:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001100 <BTS7960_SetDuty_CH3+0x60>
 80010b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b6:	f7ff ffb3 	bl	8001020 <clampf>
 80010ba:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);   // e.g., 8399
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <BTS7960_SetDuty_CH3+0x64>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c4:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (uint32_t)((duty_percent * (arr + 1U)) / 100.0f);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010fc <BTS7960_SetDuty_CH3+0x5c>
 80010de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010e6:	ee17 3a90 	vmov	r3, s15
 80010ea:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, ccr);
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <BTS7960_SetDuty_CH3+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	68ba      	ldr	r2, [r7, #8]
 80010f2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	42c80000 	.word	0x42c80000
 8001100:	00000000 	.word	0x00000000
 8001104:	200002b0 	.word	0x200002b0

08001108 <BTS7960_SetDuty_CH4>:

void BTS7960_SetDuty_CH4(float duty_percent)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
    duty_percent = clampf(duty_percent, 0.0f, 100.0f);
 8001112:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8001164 <BTS7960_SetDuty_CH4+0x5c>
 8001116:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8001168 <BTS7960_SetDuty_CH4+0x60>
 800111a:	ed97 0a01 	vldr	s0, [r7, #4]
 800111e:	f7ff ff7f 	bl	8001020 <clampf>
 8001122:	ed87 0a01 	vstr	s0, [r7, #4]

    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001126:	4b11      	ldr	r3, [pc, #68]	@ (800116c <BTS7960_SetDuty_CH4+0x64>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112c:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = (uint32_t)((duty_percent * (arr + 1U)) / 100.0f);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3301      	adds	r3, #1
 8001132:	ee07 3a90 	vmov	s15, r3
 8001136:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800113a:	edd7 7a01 	vldr	s15, [r7, #4]
 800113e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001142:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001164 <BTS7960_SetDuty_CH4+0x5c>
 8001146:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114e:	ee17 3a90 	vmov	r3, s15
 8001152:	60bb      	str	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, ccr);
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <BTS7960_SetDuty_CH4+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	42c80000 	.word	0x42c80000
 8001168:	00000000 	.word	0x00000000
 800116c:	200002b0 	.word	0x200002b0

08001170 <BTS7960_GetDuty_CH3>:


float BTS7960_GetDuty_CH3(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <BTS7960_GetDuty_CH3+0x54>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117c:	607b      	str	r3, [r7, #4]
    uint32_t ccr = __HAL_TIM_GET_COMPARE(&htim3, TIM_CHANNEL_3);
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <BTS7960_GetDuty_CH3+0x54>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001184:	603b      	str	r3, [r7, #0]

    if (arr == 0) return 0.0f;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <BTS7960_GetDuty_CH3+0x22>
 800118c:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80011c8 <BTS7960_GetDuty_CH3+0x58>
 8001190:	e010      	b.n	80011b4 <BTS7960_GetDuty_CH3+0x44>
    return ((float)ccr / (float)(arr + 1U)) * 100.0f; // percent
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	ee07 3a90 	vmov	s15, r3
 8001198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3301      	adds	r3, #1
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ac:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011cc <BTS7960_GetDuty_CH3+0x5c>
 80011b0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	200002b0 	.word	0x200002b0
 80011c8:	00000000 	.word	0x00000000
 80011cc:	42c80000 	.word	0x42c80000

080011d0 <ds_crc8>:
static float    g_last_good_c     = 25.0f;  // last stable temperature
static uint32_t g_last_ok_ms      = 0;      // last time we saw a valid read
static bool     g_fault_latched   = false;  // latched fault flag

// ---------- Private CRC-8 (Dallas/Maxim) ----------
static uint8_t ds_crc8(const uint8_t *data, int len) {
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint8_t crc = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	75fb      	strb	r3, [r7, #23]
  for (int i = 0; i < len; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	e025      	b.n	8001230 <ds_crc8+0x60>
    uint8_t inbyte = data[i];
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	73fb      	strb	r3, [r7, #15]
    for (uint8_t j = 0; j < 8; j++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	73bb      	strb	r3, [r7, #14]
 80011f2:	e017      	b.n	8001224 <ds_crc8+0x54>
      uint8_t mix = (crc ^ inbyte) & 0x01;
 80011f4:	7dfa      	ldrb	r2, [r7, #23]
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4053      	eors	r3, r2
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	737b      	strb	r3, [r7, #13]
      crc >>= 1;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	085b      	lsrs	r3, r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
      if (mix) crc ^= 0x8C; // 0x8C is reversed 0x31 (poly 0x31)
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <ds_crc8+0x48>
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001214:	43db      	mvns	r3, r3
 8001216:	75fb      	strb	r3, [r7, #23]
      inbyte >>= 1;
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	085b      	lsrs	r3, r3, #1
 800121c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t j = 0; j < 8; j++) {
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b07      	cmp	r3, #7
 8001228:	d9e4      	bls.n	80011f4 <ds_crc8+0x24>
  for (int i = 0; i < len; i++) {
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	3301      	adds	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbd5      	blt.n	80011e4 <ds_crc8+0x14>
    }
  }
  return crc;
 8001238:	7dfb      	ldrb	r3, [r7, #23]
}
 800123a:	4618      	mov	r0, r3
 800123c:	371c      	adds	r7, #28
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <DS18B20_ReadPowerSupply>:

// ---------- Power mode check (parasitic vs VDD) ----------
static bool DS18B20_ReadPowerSupply(bool *is_parasitic) {
 8001246:	b580      	push	{r7, lr}
 8001248:	b084      	sub	sp, #16
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  if (!ONEWIRE_Reset()) return false;
 800124e:	f001 f8bb 	bl	80023c8 <ONEWIRE_Reset>
 8001252:	4603      	mov	r3, r0
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <DS18B20_ReadPowerSupply+0x1c>
 800125e:	2300      	movs	r3, #0
 8001260:	e012      	b.n	8001288 <DS18B20_ReadPowerSupply+0x42>
  ONEWIRE_WriteByte(CMD_SKIP_ROM);
 8001262:	20cc      	movs	r0, #204	@ 0xcc
 8001264:	f001 f90e 	bl	8002484 <ONEWIRE_WriteByte>
  ONEWIRE_WriteByte(CMD_READ_PWRSUP);
 8001268:	20b4      	movs	r0, #180	@ 0xb4
 800126a:	f001 f90b 	bl	8002484 <ONEWIRE_WriteByte>
  // Device writes 0 if parasitic, 1 if externally powered
  uint8_t b = ONEWIRE_ReadBit();
 800126e:	f001 f8eb 	bl	8002448 <ONEWIRE_ReadBit>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]
  *is_parasitic = (b == 0);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2da      	uxtb	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	701a      	strb	r2, [r3, #0]
  return true;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <DS18B20_ReadScratchpad>:
  ONEWIRE_WriteByte(CMD_CONVERT_T);
  return true;
}

// ---------- Read 9-byte scratchpad ----------
bool DS18B20_ReadScratchpad(uint8_t *buf9) {
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if (!ONEWIRE_Reset()) return false;
 8001298:	f001 f896 	bl	80023c8 <ONEWIRE_Reset>
 800129c:	4603      	mov	r3, r0
 800129e:	f083 0301 	eor.w	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <DS18B20_ReadScratchpad+0x1c>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e016      	b.n	80012da <DS18B20_ReadScratchpad+0x4a>
  ONEWIRE_WriteByte(CMD_SKIP_ROM);
 80012ac:	20cc      	movs	r0, #204	@ 0xcc
 80012ae:	f001 f8e9 	bl	8002484 <ONEWIRE_WriteByte>
  ONEWIRE_WriteByte(CMD_READ_SCRATCH);
 80012b2:	20be      	movs	r0, #190	@ 0xbe
 80012b4:	f001 f8e6 	bl	8002484 <ONEWIRE_WriteByte>
  for (int i = 0; i < 9; i++) buf9[i] = ONEWIRE_ReadByte();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	e009      	b.n	80012d2 <DS18B20_ReadScratchpad+0x42>
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	18d4      	adds	r4, r2, r3
 80012c4:	f001 f8fb 	bl	80024be <ONEWIRE_ReadByte>
 80012c8:	4603      	mov	r3, r0
 80012ca:	7023      	strb	r3, [r4, #0]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	ddf2      	ble.n	80012be <DS18B20_ReadScratchpad+0x2e>
  return true;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd90      	pop	{r4, r7, pc}
	...

080012e4 <DS18B20_ReadRawC>:
// Returns true + *out_celsius on success. Handles:
// - conversion wait (parasitic or external power),
// - 9-byte scratchpad read,
// - CRC-8 check,
// - range check (+ rejects the infamous 85.0 °C "not converted yet" value).
static bool DS18B20_ReadRawC(float *out_celsius) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  bool parasitic = false;
 80012ec:	2300      	movs	r3, #0
 80012ee:	74fb      	strb	r3, [r7, #19]
  if (!DS18B20_ReadPowerSupply(&parasitic)) return false;
 80012f0:	f107 0313 	add.w	r3, r7, #19
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ffa6 	bl	8001246 <DS18B20_ReadPowerSupply>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <DS18B20_ReadRawC+0x26>
 8001306:	2300      	movs	r3, #0
 8001308:	e084      	b.n	8001414 <DS18B20_ReadRawC+0x130>

  // 1) Kick conversion
  if (!ONEWIRE_Reset()) return false;
 800130a:	f001 f85d 	bl	80023c8 <ONEWIRE_Reset>
 800130e:	4603      	mov	r3, r0
 8001310:	f083 0301 	eor.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <DS18B20_ReadRawC+0x3a>
 800131a:	2300      	movs	r3, #0
 800131c:	e07a      	b.n	8001414 <DS18B20_ReadRawC+0x130>
  ONEWIRE_WriteByte(CMD_SKIP_ROM);
 800131e:	20cc      	movs	r0, #204	@ 0xcc
 8001320:	f001 f8b0 	bl	8002484 <ONEWIRE_WriteByte>
  ONEWIRE_WriteByte(CMD_CONVERT_T);
 8001324:	2044      	movs	r0, #68	@ 0x44
 8001326:	f001 f8ad 	bl	8002484 <ONEWIRE_WriteByte>

  // 2) Wait for conversion to finish
  if (parasitic) {
 800132a:	7cfb      	ldrb	r3, [r7, #19]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d004      	beq.n	800133a <DS18B20_ReadRawC+0x56>
    // In parasitic mode the MCU must supply strong pull-up during conversion.
    // If you don't do that, use a conservative fixed delay:
    HAL_Delay(750);
 8001330:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001334:	f001 fe3e 	bl	8002fb4 <HAL_Delay>
 8001338:	e017      	b.n	800136a <DS18B20_ReadRawC+0x86>
  } else {
    // With VDD power, the device releases the bus when done (reads '1')
    uint32_t timeout_ms = 800;
 800133a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800133e:	61fb      	str	r3, [r7, #28]
    while (timeout_ms--) {
 8001340:	e007      	b.n	8001352 <DS18B20_ReadRawC+0x6e>
      if (ONEWIRE_ReadBit()) break; // done when line reads '1'
 8001342:	f001 f881 	bl	8002448 <ONEWIRE_ReadBit>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d108      	bne.n	800135e <DS18B20_ReadRawC+0x7a>
      HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f001 fe31 	bl	8002fb4 <HAL_Delay>
    while (timeout_ms--) {
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	1e5a      	subs	r2, r3, #1
 8001356:	61fa      	str	r2, [r7, #28]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f2      	bne.n	8001342 <DS18B20_ReadRawC+0x5e>
 800135c:	e000      	b.n	8001360 <DS18B20_ReadRawC+0x7c>
      if (ONEWIRE_ReadBit()) break; // done when line reads '1'
 800135e:	bf00      	nop
    }
    if ((int32_t)timeout_ms < 0) return false; // timed out
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da01      	bge.n	800136a <DS18B20_ReadRawC+0x86>
 8001366:	2300      	movs	r3, #0
 8001368:	e054      	b.n	8001414 <DS18B20_ReadRawC+0x130>
  }

  // 3) Read scratchpad (9 bytes)
  uint8_t s[9];
  if (!DS18B20_ReadScratchpad(s)) return false;
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff8e 	bl	8001290 <DS18B20_ReadScratchpad>
 8001374:	4603      	mov	r3, r0
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <DS18B20_ReadRawC+0xa0>
 8001380:	2300      	movs	r3, #0
 8001382:	e047      	b.n	8001414 <DS18B20_ReadRawC+0x130>

  // 4) CRC must match (Dallas CRC returns 0 for correct 9-byte buffer)
  if (ds_crc8(s, 9) != 0) return false;
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2109      	movs	r1, #9
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff ff20 	bl	80011d0 <ds_crc8>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <DS18B20_ReadRawC+0xb6>
 8001396:	2300      	movs	r3, #0
 8001398:	e03c      	b.n	8001414 <DS18B20_ReadRawC+0x130>

  // 5) Convert raw temperature (LSB/MSB little-endian). Default 12-bit.
  int16_t raw = (int16_t)((s[1] << 8) | s[0]);
 800139a:	7a7b      	ldrb	r3, [r7, #9]
 800139c:	b21b      	sxth	r3, r3
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	7a3b      	ldrb	r3, [r7, #8]
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	4313      	orrs	r3, r2
 80013a8:	837b      	strh	r3, [r7, #26]
  float c = (float)raw / 16.0f;
 80013aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80013ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013be:	edc7 7a05 	vstr	s15, [r7, #20]

  // 6) Reject the famous 85.0°C "power-up" value (means conversion likely failed)
  if (fabsf(c - 85.0f) < 0.01f) return false;
 80013c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013c6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800141c <DS18B20_ReadRawC+0x138>
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	eef0 7ae7 	vabs.f32	s15, s15
 80013d2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001420 <DS18B20_ReadRawC+0x13c>
 80013d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d501      	bpl.n	80013e4 <DS18B20_ReadRawC+0x100>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e017      	b.n	8001414 <DS18B20_ReadRawC+0x130>

  // 7) Physical range for DS18B20
  if (c < -55.0f || c > 125.0f) return false;
 80013e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001424 <DS18B20_ReadRawC+0x140>
 80013ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d408      	bmi.n	8001408 <DS18B20_ReadRawC+0x124>
 80013f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013fa:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001428 <DS18B20_ReadRawC+0x144>
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	dd01      	ble.n	800140c <DS18B20_ReadRawC+0x128>
 8001408:	2300      	movs	r3, #0
 800140a:	e003      	b.n	8001414 <DS18B20_ReadRawC+0x130>

  *out_celsius = c;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	601a      	str	r2, [r3, #0]
  return true;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	42aa0000 	.word	0x42aa0000
 8001420:	3c23d70a 	.word	0x3c23d70a
 8001424:	c25c0000 	.word	0xc25c0000
 8001428:	42fa0000 	.word	0x42fa0000

0800142c <DS18B20_Init>:
bool DS18B20_ReadTempC(float *out_celsius) {
  return DS18B20_ReadRawC(out_celsius);
}

// ---------- PUBLIC: initialize watchdog state ----------
void DS18B20_Init(float seed_celsius) {
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	ed87 0a01 	vstr	s0, [r7, #4]
  g_last_good_c   = seed_celsius;       // start from sensible ambient
 8001436:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <DS18B20_Init+0x28>)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6013      	str	r3, [r2, #0]
  g_last_ok_ms    = HAL_GetTick();      // "we just started; don't trip yet"
 800143c:	f001 fdae 	bl	8002f9c <HAL_GetTick>
 8001440:	4603      	mov	r3, r0
 8001442:	4a05      	ldr	r2, [pc, #20]	@ (8001458 <DS18B20_Init+0x2c>)
 8001444:	6013      	str	r3, [r2, #0]
  g_fault_latched = false;              // no fault at boot
 8001446:	4b05      	ldr	r3, [pc, #20]	@ (800145c <DS18B20_Init+0x30>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000000 	.word	0x20000000
 8001458:	200001f8 	.word	0x200001f8
 800145c:	200001fc 	.word	0x200001fc

08001460 <DS18B20_ReadTempC_Watchdog>:
// ---------- PUBLIC: simple watchdog read ----------
// - Always writes *out_celsius the latest stable value (g_last_good_c).
// - Returns true when a *new* good sample was obtained this call.
// - If no good sample arrives for DS18B20_FAULT_TIMEOUT_MS, latch a fault
//   and set *fault_tripped_now=true on that transition.
bool DS18B20_ReadTempC_Watchdog(float *out_celsius, bool *fault_tripped_now) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  if (fault_tripped_now) *fault_tripped_now = false;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <DS18B20_ReadTempC_Watchdog+0x16>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]

  float raw = 0.0f;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  bool ok   = DS18B20_ReadRawC(&raw);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff2f 	bl	80012e4 <DS18B20_ReadRawC>
 8001486:	4603      	mov	r3, r0
 8001488:	75fb      	strb	r3, [r7, #23]

  if (ok) {
 800148a:	7dfb      	ldrb	r3, [r7, #23]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <DS18B20_ReadTempC_Watchdog+0x40>
    // Update the stable value and "last success" time
    g_last_good_c = raw;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4a19      	ldr	r2, [pc, #100]	@ (80014f8 <DS18B20_ReadTempC_Watchdog+0x98>)
 8001494:	6013      	str	r3, [r2, #0]
    g_last_ok_ms  = HAL_GetTick();
 8001496:	f001 fd81 	bl	8002f9c <HAL_GetTick>
 800149a:	4603      	mov	r3, r0
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <DS18B20_ReadTempC_Watchdog+0x9c>)
 800149e:	6013      	str	r3, [r2, #0]
  }

  // Trip only if we've had NO good reads for a long time
  uint32_t now = HAL_GetTick();
 80014a0:	f001 fd7c 	bl	8002f9c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]
  if (!g_fault_latched && g_last_ok_ms != 0 &&
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <DS18B20_ReadTempC_Watchdog+0xa0>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	f083 0301 	eor.w	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d014      	beq.n	80014de <DS18B20_ReadTempC_Watchdog+0x7e>
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <DS18B20_ReadTempC_Watchdog+0x9c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d010      	beq.n	80014de <DS18B20_ReadTempC_Watchdog+0x7e>
      (now - g_last_ok_ms) > DS18B20_FAULT_TIMEOUT_MS) {
 80014bc:	4b0f      	ldr	r3, [pc, #60]	@ (80014fc <DS18B20_ReadTempC_Watchdog+0x9c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
  if (!g_fault_latched && g_last_ok_ms != 0 &&
 80014c4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d908      	bls.n	80014de <DS18B20_ReadTempC_Watchdog+0x7e>
    g_fault_latched = true;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <DS18B20_ReadTempC_Watchdog+0xa0>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
    if (fault_tripped_now) *fault_tripped_now = true;  // tell caller to trip Safety
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <DS18B20_ReadTempC_Watchdog+0x7e>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	701a      	strb	r2, [r3, #0]
  }

  if (out_celsius) *out_celsius = g_last_good_c;  // always hand out a good/stable number
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <DS18B20_ReadTempC_Watchdog+0x8c>
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <DS18B20_ReadTempC_Watchdog+0x98>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	601a      	str	r2, [r3, #0]
  return ok;                                      // "ok" means we updated g_last_good_c
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	200001f8 	.word	0x200001f8
 8001500:	200001fc 	.word	0x200001fc

08001504 <i2c_write>:
/*
  i2c_write(byte):
  Sends ONE BYTE to the PCF8574 over I2C.
  The bits in 'byte' directly control the PCF8574 outputs (P0..P7).
*/
static inline void i2c_write(uint8_t data) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af02      	add	r7, sp, #8
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDR, &data, 1, HAL_MAX_DELAY);
 800150e:	1dfa      	adds	r2, r7, #7
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2301      	movs	r3, #1
 8001518:	214e      	movs	r1, #78	@ 0x4e
 800151a:	4803      	ldr	r0, [pc, #12]	@ (8001528 <i2c_write+0x24>)
 800151c:	f002 f99e 	bl	800385c <HAL_I2C_Master_Transmit>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	2000022c 	.word	0x2000022c

0800152c <short_delay>:
/*
  short_delay():
  Very short wait (~1–2 microseconds depending on optimization).
  Used around the EN pulse so the LCD can reliably latch data.
*/
static inline void short_delay(void) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  // ~1–2 us at typical optimization levels
  for (volatile int i = 0; i < 200; i++) __NOP();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	e003      	b.n	8001540 <short_delay+0x14>
 8001538:	bf00      	nop
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3301      	adds	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2bc7      	cmp	r3, #199	@ 0xc7
 8001544:	ddf8      	ble.n	8001538 <short_delay+0xc>
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <lcd_pulse_enable>:
/*
  lcd_pulse_enable(data):
  Toggles the EN (enable) line HIGH then LOW, with a tiny delay.
  The LCD "reads" whatever D4..D7, RS/RW are at the rising edge of EN.
*/
static void lcd_pulse_enable(uint8_t data) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  i2c_write(data | PIN_EN);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f043 0304 	orr.w	r3, r3, #4
 8001564:	b2db      	uxtb	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ffcc 	bl	8001504 <i2c_write>
  short_delay();
 800156c:	f7ff ffde 	bl	800152c <short_delay>
  i2c_write(data & (uint8_t)~PIN_EN);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffc3 	bl	8001504 <i2c_write>
  short_delay();
 800157e:	f7ff ffd5 	bl	800152c <short_delay>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <lcd_write4bits>:
  Sends 4 bits (a nibble) to D4..D7 and generates the EN pulse.
  - nibble: lower 4 bits contain the data to put on D4..D7
  - rs: 0 = command; 1 = data/character
  RW is forced LOW (we only ever write to the LCD).
*/
static void lcd_write4bits(uint8_t nibble, uint8_t rs) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
	 // Start from current control state; keep backlight setting as-is.
  uint8_t data = lcd_ctrl & (PIN_BL);        // keep backlight state
 800159c:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <lcd_write4bits+0x94>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	73fb      	strb	r3, [r7, #15]

  // Set RS depending on whether we're sending a command (0) or data (1).
  if (rs)
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <lcd_write4bits+0x28>
	  data |= PIN_RS;
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]

  // Always force RW low for write mode (safe even if the board ties RW to GND).
  data &= (uint8_t)~PIN_RW;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f023 0302 	bic.w	r3, r3, #2
 80015ba:	73fb      	strb	r3, [r7, #15]

  // Convert the low 4 bits of 'nibble' to the actual D4..D7 pins.
  uint8_t d = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	73bb      	strb	r3, [r7, #14]
  if (nibble & 0x01) d |= PIN_D4;
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <lcd_write4bits+0x46>
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	73bb      	strb	r3, [r7, #14]
  if (nibble & 0x02) d |= PIN_D5;
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <lcd_write4bits+0x58>
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	73bb      	strb	r3, [r7, #14]
  if (nibble & 0x04) d |= PIN_D6;
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <lcd_write4bits+0x6a>
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015f4:	73bb      	strb	r3, [r7, #14]
  if (nibble & 0x08) d |= PIN_D7;
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <lcd_write4bits+0x7c>
 8001600:	7bbb      	ldrb	r3, [r7, #14]
 8001602:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001606:	73bb      	strb	r3, [r7, #14]
  // Put D4..D7 + control bits on the bus and pulse EN so the LCD latches it.
  lcd_pulse_enable((uint8_t)(data | d));
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	7bbb      	ldrb	r3, [r7, #14]
 800160c:	4313      	orrs	r3, r2
 800160e:	b2db      	uxtb	r3, r3
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff9f 	bl	8001554 <lcd_pulse_enable>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001fd 	.word	0x200001fd

08001624 <lcd_send>:
  Sends a FULL 8-bit value to the LCD by splitting it into two 4-bit chunks:
   - First the HIGH nibble (bits 7..4)
   - Then the LOW nibble  (bits 3..0)
  'rs' says if it's a command (0) or data (1).
*/
static void lcd_send(uint8_t val, uint8_t rs) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
  lcd_write4bits((uint8_t)((val >> 4) & 0x0F), rs);
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	091b      	lsrs	r3, r3, #4
 8001638:	b2db      	uxtb	r3, r3
 800163a:	79ba      	ldrb	r2, [r7, #6]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ffa4 	bl	800158c <lcd_write4bits>
  lcd_write4bits((uint8_t)(val & 0x0F), rs);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	f003 030f 	and.w	r3, r3, #15
 800164a:	b2db      	uxtb	r3, r3
 800164c:	79ba      	ldrb	r2, [r7, #6]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff9b 	bl	800158c <lcd_write4bits>
}
 8001656:	bf00      	nop
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <lcd_command>:
  lcd_command(cmd):
  Convenience: send an 8-bit COMMAND (rs = 0).
  If the command is Clear (0x01) or Home (0x02), the LCD needs extra time,
  so we wait ~2 ms per the datasheet.
*/
static void lcd_command(uint8_t cmd) {
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
  lcd_send(cmd, 0);   // rs = 0 => command
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ffd9 	bl	8001624 <lcd_send>
  // Clear (0x01) and Home (0x02) need >1.5 ms
  if (cmd == 0x01 || cmd == 0x02)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d002      	beq.n	800167e <lcd_command+0x20>
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d102      	bne.n	8001684 <lcd_command+0x26>
	  HAL_Delay(2);  // wait >1.5 ms
 800167e:	2002      	movs	r0, #2
 8001680:	f001 fc98 	bl	8002fb4 <HAL_Delay>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <LCD_SetBacklight>:
  LCD_SetBacklight(on):
  Turn the LCD backlight ON (1) or OFF (0).
  We update our control byte and immediately write it to the PCF8574 so the
  BL pin changes state.
*/
void LCD_SetBacklight(uint8_t on) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  if (on)
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <LCD_SetBacklight+0x20>
	  lcd_ctrl |= PIN_BL;
 800169c:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <LCD_SetBacklight+0x40>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <LCD_SetBacklight+0x40>)
 80016a8:	701a      	strb	r2, [r3, #0]
 80016aa:	e006      	b.n	80016ba <LCD_SetBacklight+0x2e>
  else
	  lcd_ctrl &= (uint8_t)~PIN_BL;
 80016ac:	4b07      	ldr	r3, [pc, #28]	@ (80016cc <LCD_SetBacklight+0x40>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	f023 0308 	bic.w	r3, r3, #8
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <LCD_SetBacklight+0x40>)
 80016b8:	701a      	strb	r2, [r3, #0]

  i2c_write(lcd_ctrl); // update expander immediately
 80016ba:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <LCD_SetBacklight+0x40>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff20 	bl	8001504 <i2c_write>
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001fd 	.word	0x200001fd

080016d0 <LCD_Init>:
    3) Special "4-bit mode" entry sequence (send 0x03 a few times, then 0x02).
    4) Function set: 4-bit, 2 line, 5x8 font (0x28).
    5) Display off (0x08), Clear (0x01), Entry mode increment (0x06),
       Display on, cursor off, blink off (0x0C).
*/
void LCD_Init(void) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  HAL_Delay(50);               // power-up time
 80016d4:	2032      	movs	r0, #50	@ 0x32
 80016d6:	f001 fc6d 	bl	8002fb4 <HAL_Delay>

  LCD_SetBacklight(1);         // turn BL on early
 80016da:	2001      	movs	r0, #1
 80016dc:	f7ff ffd6 	bl	800168c <LCD_SetBacklight>

  // 4-bit init sequence (as per HD44780 spec)
  lcd_write4bits(0x03, 0); HAL_Delay(5);
 80016e0:	2100      	movs	r1, #0
 80016e2:	2003      	movs	r0, #3
 80016e4:	f7ff ff52 	bl	800158c <lcd_write4bits>
 80016e8:	2005      	movs	r0, #5
 80016ea:	f001 fc63 	bl	8002fb4 <HAL_Delay>
  lcd_write4bits(0x03, 0); HAL_Delay(5);
 80016ee:	2100      	movs	r1, #0
 80016f0:	2003      	movs	r0, #3
 80016f2:	f7ff ff4b 	bl	800158c <lcd_write4bits>
 80016f6:	2005      	movs	r0, #5
 80016f8:	f001 fc5c 	bl	8002fb4 <HAL_Delay>
  lcd_write4bits(0x03, 0); HAL_Delay(1);
 80016fc:	2100      	movs	r1, #0
 80016fe:	2003      	movs	r0, #3
 8001700:	f7ff ff44 	bl	800158c <lcd_write4bits>
 8001704:	2001      	movs	r0, #1
 8001706:	f001 fc55 	bl	8002fb4 <HAL_Delay>
  lcd_write4bits(0x02, 0); // set 4-bit mode
 800170a:	2100      	movs	r1, #0
 800170c:	2002      	movs	r0, #2
 800170e:	f7ff ff3d 	bl	800158c <lcd_write4bits>

  // Function set: 4-bit, 2-line (OK for 20x4), 5x8 font
  lcd_command(0x28);
 8001712:	2028      	movs	r0, #40	@ 0x28
 8001714:	f7ff ffa3 	bl	800165e <lcd_command>
  // Display off
  lcd_command(0x08);
 8001718:	2008      	movs	r0, #8
 800171a:	f7ff ffa0 	bl	800165e <lcd_command>
  // Clear
  lcd_command(0x01); HAL_Delay(2);
 800171e:	2001      	movs	r0, #1
 8001720:	f7ff ff9d 	bl	800165e <lcd_command>
 8001724:	2002      	movs	r0, #2
 8001726:	f001 fc45 	bl	8002fb4 <HAL_Delay>
  // Entry mode: increment cursor, no display shift
  lcd_command(0x06);
 800172a:	2006      	movs	r0, #6
 800172c:	f7ff ff97 	bl	800165e <lcd_command>
  // Display on, cursor off, blink off
  lcd_command(0x0C);
 8001730:	200c      	movs	r0, #12
 8001732:	f7ff ff94 	bl	800165e <lcd_command>
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}

0800173a <LCD_Clear>:
/*
  LCD_Clear():
  Clear the whole screen and move cursor to (0,0).
  (Internally calls lcd_command(0x01) which already waits long enough.)
*/
void LCD_Clear(void) {
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
	lcd_command(0x01);
 800173e:	2001      	movs	r0, #1
 8001740:	f7ff ff8d 	bl	800165e <lcd_command>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}

08001748 <LCD_SetCursor>:
  LCD_SetCursor(col, row):
  Move the cursor to a specific column and row (both 0-based).
  We compute the DDRAM address = row_base + col, then send command 0x80 | addr.
*/

void LCD_SetCursor(uint8_t col, uint8_t row) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
  if (row > 3)
 8001758:	79bb      	ldrb	r3, [r7, #6]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d901      	bls.n	8001762 <LCD_SetCursor+0x1a>
	  row = 3;
 800175e:	2303      	movs	r3, #3
 8001760:	71bb      	strb	r3, [r7, #6]
  lcd_command((uint8_t)(0x80 | (row_addr[row] + col)));
 8001762:	79bb      	ldrb	r3, [r7, #6]
 8001764:	4a08      	ldr	r2, [pc, #32]	@ (8001788 <LCD_SetCursor+0x40>)
 8001766:	5cd2      	ldrb	r2, [r2, r3]
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4413      	add	r3, r2
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b25b      	sxtb	r3, r3
 8001770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001774:	b25b      	sxtb	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff70 	bl	800165e <lcd_command>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800e938 	.word	0x0800e938

0800178c <LCD_Print>:
/*
  LCD_Print(s):
  Print a C string starting at the current cursor position.
  For each character, send it as DATA (rs = 1) so it appears on the screen.
*/
void LCD_Print(const char *s) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  while (*s) {
 8001794:	e007      	b.n	80017a6 <LCD_Print+0x1a>
    lcd_send((uint8_t)*s++, 1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1c5a      	adds	r2, r3, #1
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2101      	movs	r1, #1
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff3f 	bl	8001624 <lcd_send>
  while (*s) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f3      	bne.n	8001796 <LCD_Print+0xa>
  }
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <LCD_PrintAt>:

/*
  LCD_PrintAt(col, row, s):
  Shortcut: set the cursor position first, then print the string.
*/
void LCD_PrintAt(uint8_t col, uint8_t row, const char *s) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	603a      	str	r2, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	460b      	mov	r3, r1
 80017c6:	71bb      	strb	r3, [r7, #6]
  LCD_SetCursor(col, row);
 80017c8:	79ba      	ldrb	r2, [r7, #6]
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ffba 	bl	8001748 <LCD_SetCursor>
  LCD_Print(s);
 80017d4:	6838      	ldr	r0, [r7, #0]
 80017d6:	f7ff ffd9 	bl	800178c <LCD_Print>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <PID_SetTunings>:

// Clear I/D memory (useful after faults or big setpoint changes)
void PID_Reset(PID_t *pid);

// Change gains at runtime (e.g., from UI)
static inline void PID_SetTunings(PID_t *pid, float kp, float ki, float kd) {
 80017e2:	b480      	push	{r7}
 80017e4:	b085      	sub	sp, #20
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	ed87 0a02 	vstr	s0, [r7, #8]
 80017ee:	edc7 0a01 	vstr	s1, [r7, #4]
 80017f2:	ed87 1a00 	vstr	s2, [r7]
  pid->kp = kp; pid->ki = ki; pid->kd = kd;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	609a      	str	r2, [r3, #8]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	uint8_t c = (uint8_t)ch;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 8001822:	f107 010f 	add.w	r1, r7, #15
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	2201      	movs	r2, #1
 800182c:	4803      	ldr	r0, [pc, #12]	@ (800183c <__io_putchar+0x28>)
 800182e:	f003 ffc7 	bl	80057c0 <HAL_UART_Transmit>
	return ch;
 8001832:	687b      	ldr	r3, [r7, #4]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200002f8 	.word	0x200002f8

08001840 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001846:	f001 fb73 	bl	8002f30 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800184a:	f000 f91b 	bl	8001a84 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800184e:	f000 fa3f 	bl	8001cd0 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001852:	f000 f981 	bl	8001b58 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001856:	f000 fa11 	bl	8001c7c <MX_USART2_UART_Init>
	MX_TIM3_Init();
 800185a:	f000 f9ab 	bl	8001bb4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	ONEWIRE_Init();   // sets PD7 to open-drain + pull-up and starts DWT microsecond timer
 800185e:	f000 fd91 	bl	8002384 <ONEWIRE_Init>
	// after MX_I2C1_Init(); (make sure I2C1 is initialized in CubeMX)
	// ...
	LCD_Init();        // init controller & clear    <-- one-time init
 8001862:	f7ff ff35 	bl	80016d0 <LCD_Init>
	LCD_SetBacklight(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f7ff ff10 	bl	800168c <LCD_SetBacklight>
	LCD_Clear();
 800186c:	f7ff ff65 	bl	800173a <LCD_Clear>
	LCD_PrintAt(0,0, "System Starting...");
 8001870:	4a58      	ldr	r2, [pc, #352]	@ (80019d4 <main+0x194>)
 8001872:	2100      	movs	r1, #0
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff ff9f 	bl	80017b8 <LCD_PrintAt>

	BTS7960_PWM_Init(); // start TIM3 CH3/CH4 at 0% (PB0/PB1)
 800187a:	f7ff fbfb 	bl	8001074 <BTS7960_PWM_Init>


	//  Sample time: Release PID_TickSem every 200 ms (example). If you use a different period,
	//  set dt_s accordingly (e.g., 0.5f for 500 ms).
	// --- PID controller init (do this ONCE here) ---
	const float KP = 2.0f;
 800187e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001882:	61fb      	str	r3, [r7, #28]
	const float KI = 0.25f;   // 1/s
 8001884:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 8001888:	61bb      	str	r3, [r7, #24]
	const float KD = 0.10f;    // s
 800188a:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <main+0x198>)
 800188c:	617b      	str	r3, [r7, #20]
	const float DT_S    = 0.2f;   // must match your PID tick period (see semaphore)
 800188e:	4b53      	ldr	r3, [pc, #332]	@ (80019dc <main+0x19c>)
 8001890:	613b      	str	r3, [r7, #16]
	const float OUT_MIN = 0.0f;   // 0% duty
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
	const float OUT_MAX = 100.0f; // 100% duty
 8001898:	4b51      	ldr	r3, [pc, #324]	@ (80019e0 <main+0x1a0>)
 800189a:	60bb      	str	r3, [r7, #8]
	const float D_ALPHA = 0.2f;   // derivative smoothing
 800189c:	4b4f      	ldr	r3, [pc, #316]	@ (80019dc <main+0x19c>)
 800189e:	607b      	str	r3, [r7, #4]

	PID_Init(&g_pid, KP, KI, KD, OUT_MIN, OUT_MAX, DT_S, D_ALPHA);
 80018a0:	ed97 3a01 	vldr	s6, [r7, #4]
 80018a4:	edd7 2a04 	vldr	s5, [r7, #16]
 80018a8:	ed97 2a02 	vldr	s4, [r7, #8]
 80018ac:	edd7 1a03 	vldr	s3, [r7, #12]
 80018b0:	ed97 1a05 	vldr	s2, [r7, #20]
 80018b4:	edd7 0a06 	vldr	s1, [r7, #24]
 80018b8:	ed97 0a07 	vldr	s0, [r7, #28]
 80018bc:	4849      	ldr	r0, [pc, #292]	@ (80019e4 <main+0x1a4>)
 80018be:	f000 fe47 	bl	8002550 <PID_Init>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80018c2:	f004 fc11 	bl	80060e8 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of LCD_Mutex */
	LCD_MutexHandle = osMutexNew(&LCD_Mutex_attributes);
 80018c6:	4848      	ldr	r0, [pc, #288]	@ (80019e8 <main+0x1a8>)
 80018c8:	f004 fd47 	bl	800635a <osMutexNew>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a47      	ldr	r2, [pc, #284]	@ (80019ec <main+0x1ac>)
 80018d0:	6013      	str	r3, [r2, #0]

	/* creation of UART_Mutex */
	UART_MutexHandle = osMutexNew(&UART_Mutex_attributes);
 80018d2:	4847      	ldr	r0, [pc, #284]	@ (80019f0 <main+0x1b0>)
 80018d4:	f004 fd41 	bl	800635a <osMutexNew>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a46      	ldr	r2, [pc, #280]	@ (80019f4 <main+0x1b4>)
 80018dc:	6013      	str	r3, [r2, #0]

	/* creation of OneWire_Mutex */
	OneWire_MutexHandle = osMutexNew(&OneWire_Mutex_attributes);
 80018de:	4846      	ldr	r0, [pc, #280]	@ (80019f8 <main+0x1b8>)
 80018e0:	f004 fd3b 	bl	800635a <osMutexNew>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4a45      	ldr	r2, [pc, #276]	@ (80019fc <main+0x1bc>)
 80018e8:	6013      	str	r3, [r2, #0]

	/* creation of PIDParam_Mutex */
	PIDParam_MutexHandle = osMutexNew(&PIDParam_Mutex_attributes);
 80018ea:	4845      	ldr	r0, [pc, #276]	@ (8001a00 <main+0x1c0>)
 80018ec:	f004 fd35 	bl	800635a <osMutexNew>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a44      	ldr	r2, [pc, #272]	@ (8001a04 <main+0x1c4>)
 80018f4:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of PID_TickSem */
	PID_TickSemHandle = osSemaphoreNew(1, 1, &PID_TickSem_attributes);
 80018f6:	4a44      	ldr	r2, [pc, #272]	@ (8001a08 <main+0x1c8>)
 80018f8:	2101      	movs	r1, #1
 80018fa:	2001      	movs	r0, #1
 80018fc:	f004 fe3b 	bl	8006576 <osSemaphoreNew>
 8001900:	4603      	mov	r3, r0
 8001902:	4a42      	ldr	r2, [pc, #264]	@ (8001a0c <main+0x1cc>)
 8001904:	6013      	str	r3, [r2, #0]

	/* creation of Power_DoneSem */
	Power_DoneSemHandle = osSemaphoreNew(1, 1, &Power_DoneSem_attributes);
 8001906:	4a42      	ldr	r2, [pc, #264]	@ (8001a10 <main+0x1d0>)
 8001908:	2101      	movs	r1, #1
 800190a:	2001      	movs	r0, #1
 800190c:	f004 fe33 	bl	8006576 <osSemaphoreNew>
 8001910:	4603      	mov	r3, r0
 8001912:	4a40      	ldr	r2, [pc, #256]	@ (8001a14 <main+0x1d4>)
 8001914:	6013      	str	r3, [r2, #0]

	/* creation of BtnEventSem */
	BtnEventSemHandle = osSemaphoreNew(1, 1, &BtnEventSem_attributes);
 8001916:	4a40      	ldr	r2, [pc, #256]	@ (8001a18 <main+0x1d8>)
 8001918:	2101      	movs	r1, #1
 800191a:	2001      	movs	r0, #1
 800191c:	f004 fe2b 	bl	8006576 <osSemaphoreNew>
 8001920:	4603      	mov	r3, r0
 8001922:	4a3e      	ldr	r2, [pc, #248]	@ (8001a1c <main+0x1dc>)
 8001924:	6013      	str	r3, [r2, #0]

	/* creation of FaultTripSem */
	FaultTripSemHandle = osSemaphoreNew(1, 1, &FaultTripSem_attributes);
 8001926:	4a3e      	ldr	r2, [pc, #248]	@ (8001a20 <main+0x1e0>)
 8001928:	2101      	movs	r1, #1
 800192a:	2001      	movs	r0, #1
 800192c:	f004 fe23 	bl	8006576 <osSemaphoreNew>
 8001930:	4603      	mov	r3, r0
 8001932:	4a3c      	ldr	r2, [pc, #240]	@ (8001a24 <main+0x1e4>)
 8001934:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	Telemetry_Init();   // creates Telemetry_Mutex + starts TelemetryTask (UART @ huart2)
 8001936:	f001 fa8f 	bl	8002e58 <Telemetry_Init>
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* creation of TempQ */
	TempQHandle = osMessageQueueNew (16, sizeof(float), &TempQ_attributes);
 800193a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a28 <main+0x1e8>)
 800193c:	2104      	movs	r1, #4
 800193e:	2010      	movs	r0, #16
 8001940:	f004 ff38 	bl	80067b4 <osMessageQueueNew>
 8001944:	4603      	mov	r3, r0
 8001946:	4a39      	ldr	r2, [pc, #228]	@ (8001a2c <main+0x1ec>)
 8001948:	6013      	str	r3, [r2, #0]

	/* creation of SetPointQ */
	SetPointQHandle = osMessageQueueNew (16, sizeof(float), &SetPointQ_attributes);
 800194a:	4a39      	ldr	r2, [pc, #228]	@ (8001a30 <main+0x1f0>)
 800194c:	2104      	movs	r1, #4
 800194e:	2010      	movs	r0, #16
 8001950:	f004 ff30 	bl	80067b4 <osMessageQueueNew>
 8001954:	4603      	mov	r3, r0
 8001956:	4a37      	ldr	r2, [pc, #220]	@ (8001a34 <main+0x1f4>)
 8001958:	6013      	str	r3, [r2, #0]

	/* creation of PowerQ */
	PowerQHandle = osMessageQueueNew (16, sizeof(PowerSample_t), &PowerQ_attributes);
 800195a:	4a37      	ldr	r2, [pc, #220]	@ (8001a38 <main+0x1f8>)
 800195c:	210c      	movs	r1, #12
 800195e:	2010      	movs	r0, #16
 8001960:	f004 ff28 	bl	80067b4 <osMessageQueueNew>
 8001964:	4603      	mov	r3, r0
 8001966:	4a35      	ldr	r2, [pc, #212]	@ (8001a3c <main+0x1fc>)
 8001968:	6013      	str	r3, [r2, #0]

	/* creation of FaultQ */
	FaultQHandle = osMessageQueueNew (16, sizeof(FaultCode_t), &FaultQ_attributes);
 800196a:	4a35      	ldr	r2, [pc, #212]	@ (8001a40 <main+0x200>)
 800196c:	2101      	movs	r1, #1
 800196e:	2010      	movs	r0, #16
 8001970:	f004 ff20 	bl	80067b4 <osMessageQueueNew>
 8001974:	4603      	mov	r3, r0
 8001976:	4a33      	ldr	r2, [pc, #204]	@ (8001a44 <main+0x204>)
 8001978:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of SafetyTask */
	SafetyTaskHandle = osThreadNew(StartSafetyTask, NULL, &SafetyTask_attributes);
 800197a:	4a33      	ldr	r2, [pc, #204]	@ (8001a48 <main+0x208>)
 800197c:	2100      	movs	r1, #0
 800197e:	4833      	ldr	r0, [pc, #204]	@ (8001a4c <main+0x20c>)
 8001980:	f004 fc11 	bl	80061a6 <osThreadNew>
 8001984:	4603      	mov	r3, r0
 8001986:	4a32      	ldr	r2, [pc, #200]	@ (8001a50 <main+0x210>)
 8001988:	6013      	str	r3, [r2, #0]

	/* creation of PIDTask */
	PIDTaskHandle = osThreadNew(StartPIDTask, NULL, &PIDTask_attributes);
 800198a:	4a32      	ldr	r2, [pc, #200]	@ (8001a54 <main+0x214>)
 800198c:	2100      	movs	r1, #0
 800198e:	4832      	ldr	r0, [pc, #200]	@ (8001a58 <main+0x218>)
 8001990:	f004 fc09 	bl	80061a6 <osThreadNew>
 8001994:	4603      	mov	r3, r0
 8001996:	4a31      	ldr	r2, [pc, #196]	@ (8001a5c <main+0x21c>)
 8001998:	6013      	str	r3, [r2, #0]

	/* creation of TempTask */
	TempTaskHandle = osThreadNew(StartTempTask, NULL, &TempTask_attributes);
 800199a:	4a31      	ldr	r2, [pc, #196]	@ (8001a60 <main+0x220>)
 800199c:	2100      	movs	r1, #0
 800199e:	4831      	ldr	r0, [pc, #196]	@ (8001a64 <main+0x224>)
 80019a0:	f004 fc01 	bl	80061a6 <osThreadNew>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a30      	ldr	r2, [pc, #192]	@ (8001a68 <main+0x228>)
 80019a8:	6013      	str	r3, [r2, #0]

	/* creation of PowerTask */
	PowerTaskHandle = osThreadNew(StartPowerTask, NULL, &PowerTask_attributes);
 80019aa:	4a30      	ldr	r2, [pc, #192]	@ (8001a6c <main+0x22c>)
 80019ac:	2100      	movs	r1, #0
 80019ae:	4830      	ldr	r0, [pc, #192]	@ (8001a70 <main+0x230>)
 80019b0:	f004 fbf9 	bl	80061a6 <osThreadNew>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a74 <main+0x234>)
 80019b8:	6013      	str	r3, [r2, #0]

	/* creation of UITask */
	UITaskHandle = osThreadNew(StartUITask, NULL, &UITask_attributes);
 80019ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001a78 <main+0x238>)
 80019bc:	2100      	movs	r1, #0
 80019be:	482f      	ldr	r0, [pc, #188]	@ (8001a7c <main+0x23c>)
 80019c0:	f004 fbf1 	bl	80061a6 <osThreadNew>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001a80 <main+0x240>)
 80019c8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80019ca:	f004 fbb1 	bl	8006130 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80019ce:	bf00      	nop
 80019d0:	e7fd      	b.n	80019ce <main+0x18e>
 80019d2:	bf00      	nop
 80019d4:	0800e830 	.word	0x0800e830
 80019d8:	3dcccccd 	.word	0x3dcccccd
 80019dc:	3e4ccccd 	.word	0x3e4ccccd
 80019e0:	42c80000 	.word	0x42c80000
 80019e4:	20000200 	.word	0x20000200
 80019e8:	0800ea50 	.word	0x0800ea50
 80019ec:	20000394 	.word	0x20000394
 80019f0:	0800ea60 	.word	0x0800ea60
 80019f4:	20000398 	.word	0x20000398
 80019f8:	0800ea70 	.word	0x0800ea70
 80019fc:	2000039c 	.word	0x2000039c
 8001a00:	0800ea80 	.word	0x0800ea80
 8001a04:	200003a0 	.word	0x200003a0
 8001a08:	0800ea90 	.word	0x0800ea90
 8001a0c:	200003a4 	.word	0x200003a4
 8001a10:	0800eaa0 	.word	0x0800eaa0
 8001a14:	200003a8 	.word	0x200003a8
 8001a18:	0800eab0 	.word	0x0800eab0
 8001a1c:	200003ac 	.word	0x200003ac
 8001a20:	0800eac0 	.word	0x0800eac0
 8001a24:	200003b0 	.word	0x200003b0
 8001a28:	0800e9f0 	.word	0x0800e9f0
 8001a2c:	20000384 	.word	0x20000384
 8001a30:	0800ea08 	.word	0x0800ea08
 8001a34:	20000388 	.word	0x20000388
 8001a38:	0800ea20 	.word	0x0800ea20
 8001a3c:	2000038c 	.word	0x2000038c
 8001a40:	0800ea38 	.word	0x0800ea38
 8001a44:	20000390 	.word	0x20000390
 8001a48:	0800e93c 	.word	0x0800e93c
 8001a4c:	08001e5d 	.word	0x08001e5d
 8001a50:	20000370 	.word	0x20000370
 8001a54:	0800e960 	.word	0x0800e960
 8001a58:	08001ebd 	.word	0x08001ebd
 8001a5c:	20000374 	.word	0x20000374
 8001a60:	0800e984 	.word	0x0800e984
 8001a64:	08002015 	.word	0x08002015
 8001a68:	20000378 	.word	0x20000378
 8001a6c:	0800e9a8 	.word	0x0800e9a8
 8001a70:	080020d9 	.word	0x080020d9
 8001a74:	2000037c 	.word	0x2000037c
 8001a78:	0800e9cc 	.word	0x0800e9cc
 8001a7c:	08002115 	.word	0x08002115
 8001a80:	20000380 	.word	0x20000380

08001a84 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b094      	sub	sp, #80	@ 0x50
 8001a88:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8a:	f107 0320 	add.w	r3, r7, #32
 8001a8e:	2230      	movs	r2, #48	@ 0x30
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f009 fa21 	bl	800aeda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <SystemClock_Config+0xcc>)
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	4a27      	ldr	r2, [pc, #156]	@ (8001b50 <SystemClock_Config+0xcc>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab8:	4b25      	ldr	r3, [pc, #148]	@ (8001b50 <SystemClock_Config+0xcc>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	4b22      	ldr	r3, [pc, #136]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a21      	ldr	r2, [pc, #132]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001ace:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <SystemClock_Config+0xd0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aec:	2302      	movs	r3, #2
 8001aee:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001af0:	2300      	movs	r3, #0
 8001af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001af4:	2308      	movs	r3, #8
 8001af6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 8001af8:	2332      	movs	r3, #50	@ 0x32
 8001afa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001afc:	2304      	movs	r3, #4
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b00:	2307      	movs	r3, #7
 8001b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b04:	f107 0320 	add.w	r3, r7, #32
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f002 fa69 	bl	8003fe0 <HAL_RCC_OscConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001b14:	f000 fbcc 	bl	80022b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b18:	230f      	movs	r3, #15
 8001b1a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b24:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b28:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fcca 	bl	80044d0 <HAL_RCC_ClockConfig>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001b42:	f000 fbb5 	bl	80022b0 <Error_Handler>
	}
}
 8001b46:	bf00      	nop
 8001b48:	3750      	adds	r7, #80	@ 0x50
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40007000 	.word	0x40007000

08001b58 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b5e:	4a13      	ldr	r2, [pc, #76]	@ (8001bac <MX_I2C1_Init+0x54>)
 8001b60:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b64:	4a12      	ldr	r2, [pc, #72]	@ (8001bb0 <MX_I2C1_Init+0x58>)
 8001b66:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b7a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b88:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <MX_I2C1_Init+0x50>)
 8001b96:	f001 fce1 	bl	800355c <HAL_I2C_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001ba0:	f000 fb86 	bl	80022b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000022c 	.word	0x2000022c
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	000186a0 	.word	0x000186a0

08001bb4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]
 8001bd2:	615a      	str	r2, [r3, #20]
 8001bd4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001bd6:	4b27      	ldr	r3, [pc, #156]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bd8:	4a27      	ldr	r2, [pc, #156]	@ (8001c78 <MX_TIM3_Init+0xc4>)
 8001bda:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be2:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 8399;
 8001be8:	4b22      	ldr	r3, [pc, #136]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bea:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001bee:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bfc:	481d      	ldr	r0, [pc, #116]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001bfe:	f002 ff83 	bl	8004b08 <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM3_Init+0x58>
	{
		Error_Handler();
 8001c08:	f000 fb52 	bl	80022b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4816      	ldr	r0, [pc, #88]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001c1c:	f003 fce2 	bl	80055e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM3_Init+0x76>
	{
		Error_Handler();
 8001c26:	f000 fb43 	bl	80022b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2a:	2360      	movs	r3, #96	@ 0x60
 8001c2c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2208      	movs	r2, #8
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480c      	ldr	r0, [pc, #48]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001c42:	f003 f969 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x9c>
	{
		Error_Handler();
 8001c4c:	f000 fb30 	bl	80022b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	220c      	movs	r2, #12
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001c58:	f003 f95e 	bl	8004f18 <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8001c62:	f000 fb25 	bl	80022b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001c66:	4803      	ldr	r0, [pc, #12]	@ (8001c74 <MX_TIM3_Init+0xc0>)
 8001c68:	f000 fe38 	bl	80028dc <HAL_TIM_MspPostInit>

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	@ 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200002b0 	.word	0x200002b0
 8001c78:	40000400 	.word	0x40000400

08001c7c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <MX_USART2_UART_Init+0x50>)
 8001c84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca2:	220c      	movs	r2, #12
 8001ca4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_USART2_UART_Init+0x4c>)
 8001cb4:	f003 fd26 	bl	8005704 <HAL_UART_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001cbe:	f000 faf7 	bl	80022b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200002f8 	.word	0x200002f8
 8001ccc:	40004400 	.word	0x40004400

08001cd0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
 8001ce4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b2a      	ldr	r3, [pc, #168]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001cf0:	f043 0301 	orr.w	r3, r3, #1
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b27      	ldr	r3, [pc, #156]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	607b      	str	r3, [r7, #4]
 8001d06:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	4b1c      	ldr	r3, [pc, #112]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	4a1b      	ldr	r2, [pc, #108]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d28:	f043 0308 	orr.w	r3, r3, #8
 8001d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <MX_GPIO_Init+0xc4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	603b      	str	r3, [r7, #0]
 8001d38:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4816      	ldr	r0, [pc, #88]	@ (8001d98 <MX_GPIO_Init+0xc8>)
 8001d40:	f001 fbf2 	bl	8003528 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001d4a:	4814      	ldr	r0, [pc, #80]	@ (8001d9c <MX_GPIO_Init+0xcc>)
 8001d4c:	f001 fbec 	bl	8003528 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA0 PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d50:	2303      	movs	r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <MX_GPIO_Init+0xc8>)
 8001d68:	f001 fa2a 	bl	80031c0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001d6c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001d70:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4619      	mov	r1, r3
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_GPIO_Init+0xcc>)
 8001d86:	f001 fa1b 	bl	80031c0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3720      	adds	r7, #32
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020c00 	.word	0x40020c00

08001da0 <LCD_ShowFaultBanner>:

/* USER CODE BEGIN 4 */
// Immediate, short FAULT banner for emergencies (SafetyTask may call this)
static inline void LCD_ShowFaultBanner(const char *line1, const char *line2)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	if (osMutexAcquire(LCD_MutexHandle, 10) == osOK) {
 8001daa:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <LCD_ShowFaultBanner+0x48>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	210a      	movs	r1, #10
 8001db0:	4618      	mov	r0, r3
 8001db2:	f004 fb58 	bl	8006466 <osMutexAcquire>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d110      	bne.n	8001dde <LCD_ShowFaultBanner+0x3e>
		LCD_Clear();                    // (driver already waits the required time)
 8001dbc:	f7ff fcbd 	bl	800173a <LCD_Clear>
		LCD_PrintAt(0,0, line1);        // top line
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fcf7 	bl	80017b8 <LCD_PrintAt>
		LCD_PrintAt(0,1, line2);        // second line (adjust if 20x4)
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	2101      	movs	r1, #1
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fcf2 	bl	80017b8 <LCD_PrintAt>
		osMutexRelease(LCD_MutexHandle);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <LCD_ShowFaultBanner+0x48>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fb8f 	bl	80064fc <osMutexRelease>
	}
}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000394 	.word	0x20000394

08001dec <LCD_ShowLinesNoClear>:

// For regular UI refreshes (no clear → minimal flicker)
// Pads lines to 16 chars so old characters don’t linger.
static inline void LCD_ShowLinesNoClear(const char *l1, const char *l2)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08e      	sub	sp, #56	@ 0x38
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	char line1[24], line2[24];
	snprintf(line1, sizeof(line1), "%-16.16s", l1);
 8001df6:	f107 0020 	add.w	r0, r7, #32
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a15      	ldr	r2, [pc, #84]	@ (8001e54 <LCD_ShowLinesNoClear+0x68>)
 8001dfe:	2118      	movs	r1, #24
 8001e00:	f008 ffd0 	bl	800ada4 <sniprintf>
	snprintf(line2, sizeof(line2), "%-16.16s", l2);
 8001e04:	f107 0008 	add.w	r0, r7, #8
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <LCD_ShowLinesNoClear+0x68>)
 8001e0c:	2118      	movs	r1, #24
 8001e0e:	f008 ffc9 	bl	800ada4 <sniprintf>

	if (osMutexAcquire(LCD_MutexHandle, 10) == osOK) {
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <LCD_ShowLinesNoClear+0x6c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	210a      	movs	r1, #10
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fb24 	bl	8006466 <osMutexAcquire>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d112      	bne.n	8001e4a <LCD_ShowLinesNoClear+0x5e>
		LCD_PrintAt(0,0, line1);
 8001e24:	f107 0320 	add.w	r3, r7, #32
 8001e28:	461a      	mov	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fcc3 	bl	80017b8 <LCD_PrintAt>
		LCD_PrintAt(0,1, line2);
 8001e32:	f107 0308 	add.w	r3, r7, #8
 8001e36:	461a      	mov	r2, r3
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff fcbc 	bl	80017b8 <LCD_PrintAt>
		osMutexRelease(LCD_MutexHandle);
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <LCD_ShowLinesNoClear+0x6c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f004 fb59 	bl	80064fc <osMutexRelease>
	}
}
 8001e4a:	bf00      	nop
 8001e4c:	3738      	adds	r7, #56	@ 0x38
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	0800e844 	.word	0x0800e844
 8001e58:	20000394 	.word	0x20000394

08001e5c <StartSafetyTask>:


/* ===================== Task stubs ===================== */
/* USER CODE END Header_StartSafetyTask */
void StartSafetyTask(void *argument)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
//		osDelay(10);// runs every 10 ms
//	}

	for (;;) {
	    // Wait until FaultTripSem is given by another task / Keep me asleep until something happens (fault in queue or trip semaphore)
	    osSemaphoreAcquire(FaultTripSemHandle, osWaitForever);
 8001e64:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <StartSafetyTask+0x4c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f04f 31ff 	mov.w	r1, #4294967295
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f004 fc0b 	bl	8006688 <osSemaphoreAcquire>

	    // Try to read a code from the queue
	    if (osMessageQueueGet(FaultQHandle, &fault, NULL, 0) != osOK) {
 8001e72:	4b0e      	ldr	r3, [pc, #56]	@ (8001eac <StartSafetyTask+0x50>)
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f107 010f 	add.w	r1, r7, #15
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f004 fd6d 	bl	800695c <osMessageQueueGet>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <StartSafetyTask+0x30>
	      fault = FAULT_NONE;   // default reason if queue was empty
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
	    }

	    // 1) Turn heater OFF
	    BTS7960_SetDuty_CH3(0);
 8001e8c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8001eb0 <StartSafetyTask+0x54>
 8001e90:	f7ff f906 	bl	80010a0 <BTS7960_SetDuty_CH3>

	    // 2) Remember the fault for UI
	    g_fault = fault;
 8001e94:	7bfa      	ldrb	r2, [r7, #15]
 8001e96:	4b07      	ldr	r3, [pc, #28]	@ (8001eb4 <StartSafetyTask+0x58>)
 8001e98:	701a      	strb	r2, [r3, #0]

	    // 3) Wake UI so it redraws with the FAULT screen
	    osSemaphoreRelease(BtnEventSemHandle);
 8001e9a:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <StartSafetyTask+0x5c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f004 fc44 	bl	800672c <osSemaphoreRelease>
	    osSemaphoreAcquire(FaultTripSemHandle, osWaitForever);
 8001ea4:	e7de      	b.n	8001e64 <StartSafetyTask+0x8>
 8001ea6:	bf00      	nop
 8001ea8:	200003b0 	.word	0x200003b0
 8001eac:	20000390 	.word	0x20000390
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	200001fe 	.word	0x200001fe
 8001eb8:	200003ac 	.word	0x200003ac

08001ebc <StartPIDTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPIDTask */
void StartPIDTask(void *argument)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

	//float temp;
	//float setpt  ;

	// Keep the last known values so we never use uninitialized data
	  float last_temp = 25.0f;   // start assumption
 8001ec4:	4b48      	ldr	r3, [pc, #288]	@ (8001fe8 <StartPIDTask+0x12c>)
 8001ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  float last_sp   = 50.0f;   // seed this in UI or main() too
 8001ec8:	4b48      	ldr	r3, [pc, #288]	@ (8001fec <StartPIDTask+0x130>)
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	  const float EPS = 2.2f;    // small deadband (°C) to avoid chatter near setpoint
 8001ecc:	4b48      	ldr	r3, [pc, #288]	@ (8001ff0 <StartPIDTask+0x134>)
 8001ece:	623b      	str	r3, [r7, #32]


		// run PID every 200 ms
		// 1) Try to get newest TEMP and SETPOINT (non-blocking). If there’s nothing, keep last_*.
		    float t_in, sp_in;
		    if (osMessageQueueGet(TempQHandle, &t_in, NULL, 0) == osOK) {
 8001ed0:	4b48      	ldr	r3, [pc, #288]	@ (8001ff4 <StartPIDTask+0x138>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	f107 0110 	add.w	r1, r7, #16
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	f004 fd3e 	bl	800695c <osMessageQueueGet>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <StartPIDTask+0x2e>
		      last_temp = t_in;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		    }
		    if (osMessageQueueGet(SetPointQHandle, &sp_in, NULL, 0) == osOK) {
 8001eea:	4b43      	ldr	r3, [pc, #268]	@ (8001ff8 <StartPIDTask+0x13c>)
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	f107 010c 	add.w	r1, r7, #12
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f004 fd31 	bl	800695c <osMessageQueueGet>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <StartPIDTask+0x48>
		      last_sp = sp_in;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	62bb      	str	r3, [r7, #40]	@ 0x28
		    }

		    // 2) Sensor-failure sentinel: if TEMP < -999, force heater OFF and skip PID
		    if (last_temp < -999.0f) {
 8001f04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001f08:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8001ffc <StartPIDTask+0x140>
 8001f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d50b      	bpl.n	8001f2e <StartPIDTask+0x72>
		      BTS7960_SetDuty_CH3(0.0f);
 8001f16:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8002000 <StartPIDTask+0x144>
 8001f1a:	f7ff f8c1 	bl	80010a0 <BTS7960_SetDuty_CH3>
		      BTS7960_SetDuty_CH4(0.0f);
 8001f1e:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002000 <StartPIDTask+0x144>
 8001f22:	f7ff f8f1 	bl	8001108 <BTS7960_SetDuty_CH4>
		      osDelay(200);                 // MUST match PID_Init dt_s (0.2 s)
 8001f26:	20c8      	movs	r0, #200	@ 0xc8
 8001f28:	f004 f9cf 	bl	80062ca <osDelay>
 8001f2c:	e7d0      	b.n	8001ed0 <StartPIDTask+0x14>
		      continue;
		    }

		    // 3) Optional guard: if we are already at/above setpoint (within EPS), don’t heat.
		    //    This makes behavior intuitive for beginners. PID would also trend to ~0% anyway.
		    float duty = 0.0f;
 8001f2e:	f04f 0300 	mov.w	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
		    if (last_temp < (last_sp - EPS)) {
 8001f34:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f40:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4c:	d53c      	bpl.n	8001fc8 <StartPIDTask+0x10c>
		      // (Optional) still allow live-tuning; otherwise you can just remove the mutex reads.
		      osMutexAcquire(PIDParam_MutexHandle, osWaitForever);
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <StartPIDTask+0x148>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f04f 31ff 	mov.w	r1, #4294967295
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fa85 	bl	8006466 <osMutexAcquire>
		      float kp = g_pid.kp, ki = g_pid.ki, kd = g_pid.kd;
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <StartPIDTask+0x14c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <StartPIDTask+0x14c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	4b27      	ldr	r3, [pc, #156]	@ (8002008 <StartPIDTask+0x14c>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	617b      	str	r3, [r7, #20]
		      osMutexRelease(PIDParam_MutexHandle);
 8001f6e:	4b25      	ldr	r3, [pc, #148]	@ (8002004 <StartPIDTask+0x148>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fac2 	bl	80064fc <osMutexRelease>
		      PID_SetTunings(&g_pid, kp, ki, kd);
 8001f78:	ed97 1a05 	vldr	s2, [r7, #20]
 8001f7c:	edd7 0a06 	vldr	s1, [r7, #24]
 8001f80:	ed97 0a07 	vldr	s0, [r7, #28]
 8001f84:	4820      	ldr	r0, [pc, #128]	@ (8002008 <StartPIDTask+0x14c>)
 8001f86:	f7ff fc2c 	bl	80017e2 <PID_SetTunings>

		      duty = PID_Compute(&g_pid, last_sp, last_temp);
 8001f8a:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8001f8e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001f92:	481d      	ldr	r0, [pc, #116]	@ (8002008 <StartPIDTask+0x14c>)
 8001f94:	f000 fb3c 	bl	8002610 <PID_Compute>
 8001f98:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
		      if (duty < 0.0f)
 8001f9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa8:	d502      	bpl.n	8001fb0 <StartPIDTask+0xf4>
		    	  duty = 0.0f;
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
		      if (duty > 100.0f)
 8001fb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fb4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800200c <StartPIDTask+0x150>
 8001fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc0:	dd05      	ble.n	8001fce <StartPIDTask+0x112>
		    	  duty = 100.0f;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <StartPIDTask+0x154>)
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc6:	e002      	b.n	8001fce <StartPIDTask+0x112>
		    } else {
		      duty = 0.0f;  // above (or very near) setpoint → no heating
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
		    }

		    // 4) Drive the H-bridge for heating: CH3 = duty, CH4 = 0 (avoid braking)
		    BTS7960_SetDuty_CH3(duty);
 8001fce:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001fd2:	f7ff f865 	bl	80010a0 <BTS7960_SetDuty_CH3>
		    BTS7960_SetDuty_CH4(0.0f);
 8001fd6:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8002000 <StartPIDTask+0x144>
 8001fda:	f7ff f895 	bl	8001108 <BTS7960_SetDuty_CH4>

		    // 5) Fixed-rate loop: keep this equal to dt_s you used in PID_Init
		    osDelay(200);   // 200 ms → dt_s = 0.2f
 8001fde:	20c8      	movs	r0, #200	@ 0xc8
 8001fe0:	f004 f973 	bl	80062ca <osDelay>
	for (;;) {
 8001fe4:	e774      	b.n	8001ed0 <StartPIDTask+0x14>
 8001fe6:	bf00      	nop
 8001fe8:	41c80000 	.word	0x41c80000
 8001fec:	42480000 	.word	0x42480000
 8001ff0:	400ccccd 	.word	0x400ccccd
 8001ff4:	20000384 	.word	0x20000384
 8001ff8:	20000388 	.word	0x20000388
 8001ffc:	c479c000 	.word	0xc479c000
 8002000:	00000000 	.word	0x00000000
 8002004:	200003a0 	.word	0x200003a0
 8002008:	20000200 	.word	0x20000200
 800200c:	42c80000 	.word	0x42c80000
 8002010:	42c80000 	.word	0x42c80000

08002014 <StartTempTask>:
 * - Debounces brief sensor glitches; raises a fault only after consecutive fails.
 * - UI and PID just consume from TempQ; no filtering needed downstream.
 */
/* USER CODE END Header_StartTempTask */
void StartTempTask(void *argument)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartTempTask */
	/* Infinite loop */
	(void)argument;

	  DS18B20_Init(25.0f);  // seed at boot with a reasonable ambient
 800201c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002020:	f7ff fa04 	bl	800142c <DS18B20_Init>

	  for (;;) {
	    float temp_c = 0.0f;
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
	    bool  trip_now = false;
 800202a:	2300      	movs	r3, #0
 800202c:	74fb      	strb	r3, [r7, #19]

	    // Own the 1-Wire bus while reading
	    if (osMutexAcquire(OneWire_MutexHandle, osWaitForever) == osOK) {
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <StartTempTask+0xb4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f04f 31ff 	mov.w	r1, #4294967295
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fa15 	bl	8006466 <osMutexAcquire>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <StartTempTask+0x48>
	      (void)DS18B20_ReadTempC_Watchdog(&temp_c, &trip_now);
 8002042:	f107 0213 	add.w	r2, r7, #19
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fa07 	bl	8001460 <DS18B20_ReadTempC_Watchdog>
	      osMutexRelease(OneWire_MutexHandle);
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <StartTempTask+0xb4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fa50 	bl	80064fc <osMutexRelease>
	    }

	    if (trip_now) {
 800205c:	7cfb      	ldrb	r3, [r7, #19]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <StartTempTask+0x6c>
	      // The driver decided we've gone >15s without a good read
	      FaultCode_t f = FAULT_SENSOR_FAIL;
 8002062:	2303      	movs	r3, #3
 8002064:	74bb      	strb	r3, [r7, #18]
	      (void)osMessageQueuePut(FaultQHandle, &f, 0, 0);
 8002066:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <StartTempTask+0xb8>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	f107 0112 	add.w	r1, r7, #18
 800206e:	2300      	movs	r3, #0
 8002070:	2200      	movs	r2, #0
 8002072:	f004 fc13 	bl	800689c <osMessageQueuePut>
	      osSemaphoreRelease(FaultTripSemHandle);
 8002076:	4b16      	ldr	r3, [pc, #88]	@ (80020d0 <StartTempTask+0xbc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f004 fb56 	bl	800672c <osSemaphoreRelease>
	    }

	    Telemetry_UpdateTemp(temp_c);
 8002080:	edd7 7a05 	vldr	s15, [r7, #20]
 8002084:	eeb0 0a67 	vmov.f32	s0, s15
 8002088:	f000 fe4c 	bl	8002d24 <Telemetry_UpdateTemp>
	    // Publish ONLY the newest value (float queue!)
	    while (osMessageQueueGetCount(TempQHandle) > 0) {
 800208c:	e007      	b.n	800209e <StartTempTask+0x8a>
	      float junk;
	      (void)osMessageQueueGet(TempQHandle, &junk, NULL, 0);
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <StartTempTask+0xc0>)
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	f107 010c 	add.w	r1, r7, #12
 8002096:	2300      	movs	r3, #0
 8002098:	2200      	movs	r2, #0
 800209a:	f004 fc5f 	bl	800695c <osMessageQueueGet>
	    while (osMessageQueueGetCount(TempQHandle) > 0) {
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <StartTempTask+0xc0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f004 fcb8 	bl	8006a18 <osMessageQueueGetCount>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ef      	bne.n	800208e <StartTempTask+0x7a>
	    }
	    (void)osMessageQueuePut(TempQHandle, &temp_c, 0, 0);
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <StartTempTask+0xc0>)
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	f107 0114 	add.w	r1, r7, #20
 80020b6:	2300      	movs	r3, #0
 80020b8:	2200      	movs	r2, #0
 80020ba:	f004 fbef 	bl	800689c <osMessageQueuePut>

	    // If you want PID to step each time:
	    // osSemaphoreRelease(PID_TickSemHandle);

	    osDelay(50); // conversion time (~750–800 ms) dominates
 80020be:	2032      	movs	r0, #50	@ 0x32
 80020c0:	f004 f903 	bl	80062ca <osDelay>
	  for (;;) {
 80020c4:	e7ae      	b.n	8002024 <StartTempTask+0x10>
 80020c6:	bf00      	nop
 80020c8:	2000039c 	.word	0x2000039c
 80020cc:	20000390 	.word	0x20000390
 80020d0:	200003b0 	.word	0x200003b0
 80020d4:	20000384 	.word	0x20000384

080020d8 <StartPowerTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartPowerTask */
void StartPowerTask(void *argument)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartPowerTask */
	/* Infinite loop */
	(void)argument;
	for (;;) {
		osSemaphoreAcquire(Power_DoneSemHandle, osWaitForever);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <StartPowerTask+0x34>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	4618      	mov	r0, r3
 80020ea:	f004 facd 	bl	8006688 <osSemaphoreAcquire>

		PowerSample_t p = {0};
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
		// p = power_sensor_read_frame();  // compute volts/amps/watts/ return an arrys

		(void)osMessageQueuePut(PowerQHandle, &p, 0, 0);
 80020fa:	4b05      	ldr	r3, [pc, #20]	@ (8002110 <StartPowerTask+0x38>)
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	f107 010c 	add.w	r1, r7, #12
 8002102:	2300      	movs	r3, #0
 8002104:	2200      	movs	r2, #0
 8002106:	f004 fbc9 	bl	800689c <osMessageQueuePut>
	for (;;) {
 800210a:	e7e9      	b.n	80020e0 <StartPowerTask+0x8>
 800210c:	200003a8 	.word	0x200003a8
 8002110:	2000038c 	.word	0x2000038c

08002114 <StartUITask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUITask */
void StartUITask(void *argument)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	b09c      	sub	sp, #112	@ 0x70
 8002118:	af04      	add	r7, sp, #16
 800211a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartUITask */
	/* Infinite loop */
	(void)argument;

	float last_temp  = 0.0f;
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float set_point  = 30.0f;   // default setpoint
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <StartUITask+0x13c>)
 8002124:	64bb      	str	r3, [r7, #72]	@ 0x48
	float last_watts = 0.0f;
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	const char *mode;
	const float threshold = 2.0f;  // 2% threshold to avoid flicker
 800212c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002130:	657b      	str	r3, [r7, #84]	@ 0x54

	// One-time publish so the rest of the system knows our starting SP
	(void)osMessageQueuePut(SetPointQHandle, &set_point, 0, 0);
 8002132:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <StartUITask+0x140>)
 8002134:	6818      	ldr	r0, [r3, #0]
 8002136:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800213a:	2300      	movs	r3, #0
 800213c:	2200      	movs	r2, #0
 800213e:	f004 fbad 	bl	800689c <osMessageQueuePut>
	Telemetry_UpdateSetpoint(set_point);
 8002142:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002146:	eeb0 0a67 	vmov.f32	s0, s15
 800214a:	f000 fdc3 	bl	8002cd4 <Telemetry_UpdateSetpoint>
		//			Telemetry_UpdateSetpoint(set_point);
		//
		//		}

		// Fetch latest values
		(void)osMessageQueueGet(TempQHandle,  &last_temp, NULL, 0);
 800214e:	4b42      	ldr	r3, [pc, #264]	@ (8002258 <StartUITask+0x144>)
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8002156:	2300      	movs	r3, #0
 8002158:	2200      	movs	r2, #0
 800215a:	f004 fbff 	bl	800695c <osMessageQueueGet>

		PowerSample_t power;
		if (osMessageQueueGet(PowerQHandle, &power, NULL, 0) == osOK)
 800215e:	4b3f      	ldr	r3, [pc, #252]	@ (800225c <StartUITask+0x148>)
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8002166:	2300      	movs	r3, #0
 8002168:	2200      	movs	r2, #0
 800216a:	f004 fbf7 	bl	800695c <osMessageQueueGet>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <StartUITask+0x64>
			last_watts = power.watts;
 8002174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002176:	65fb      	str	r3, [r7, #92]	@ 0x5c

		// If fault latched => show FAULT banner (UI is the only printer)
		if (g_fault != FAULT_NONE) {
 8002178:	4b39      	ldr	r3, [pc, #228]	@ (8002260 <StartUITask+0x14c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d023      	beq.n	80021ca <StartUITask+0xb6>
			switch (g_fault) {
 8002182:	4b37      	ldr	r3, [pc, #220]	@ (8002260 <StartUITask+0x14c>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d010      	beq.n	80021ae <StartUITask+0x9a>
 800218c:	2b03      	cmp	r3, #3
 800218e:	dc13      	bgt.n	80021b8 <StartUITask+0xa4>
 8002190:	2b01      	cmp	r3, #1
 8002192:	d002      	beq.n	800219a <StartUITask+0x86>
 8002194:	2b02      	cmp	r3, #2
 8002196:	d005      	beq.n	80021a4 <StartUITask+0x90>
 8002198:	e00e      	b.n	80021b8 <StartUITask+0xa4>
			case FAULT_OVERTEMP:
				LCD_ShowFaultBanner("FAULT: OVERTEMP", "Heater  OFF     ");
 800219a:	4932      	ldr	r1, [pc, #200]	@ (8002264 <StartUITask+0x150>)
 800219c:	4832      	ldr	r0, [pc, #200]	@ (8002268 <StartUITask+0x154>)
 800219e:	f7ff fdff 	bl	8001da0 <LCD_ShowFaultBanner>
				break;
 80021a2:	e00e      	b.n	80021c2 <StartUITask+0xae>
			case FAULT_OVERCURRENT:
				LCD_ShowFaultBanner("FAULT: OVERCURR", "Heater  OFF     ");
 80021a4:	492f      	ldr	r1, [pc, #188]	@ (8002264 <StartUITask+0x150>)
 80021a6:	4831      	ldr	r0, [pc, #196]	@ (800226c <StartUITask+0x158>)
 80021a8:	f7ff fdfa 	bl	8001da0 <LCD_ShowFaultBanner>
				break;
 80021ac:	e009      	b.n	80021c2 <StartUITask+0xae>
			case FAULT_SENSOR_FAIL:
				LCD_ShowFaultBanner("FAULT: SENSOR  ", "Check wiring    ");
 80021ae:	4930      	ldr	r1, [pc, #192]	@ (8002270 <StartUITask+0x15c>)
 80021b0:	4830      	ldr	r0, [pc, #192]	@ (8002274 <StartUITask+0x160>)
 80021b2:	f7ff fdf5 	bl	8001da0 <LCD_ShowFaultBanner>
				break;
 80021b6:	e004      	b.n	80021c2 <StartUITask+0xae>
			default:
				LCD_ShowFaultBanner("!!!   FAULT   !!!", "Heater  OFF     ");
 80021b8:	492a      	ldr	r1, [pc, #168]	@ (8002264 <StartUITask+0x150>)
 80021ba:	482f      	ldr	r0, [pc, #188]	@ (8002278 <StartUITask+0x164>)
 80021bc:	f7ff fdf0 	bl	8001da0 <LCD_ShowFaultBanner>
				break;
 80021c0:	bf00      	nop
			}
			osDelay(200);
 80021c2:	20c8      	movs	r0, #200	@ 0xc8
 80021c4:	f004 f881 	bl	80062ca <osDelay>
 80021c8:	e7c1      	b.n	800214e <StartUITask+0x3a>
			continue; // keep showing the banner until g_fault is cleared
		}

		// Get current PWM duty (percentage)
		float duty = BTS7960_GetDuty_CH3();   // or CH3 channel drives the heater
 80021ca:	f7fe ffd1 	bl	8001170 <BTS7960_GetDuty_CH3>
 80021ce:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
		if (duty > threshold) {
 80021d2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80021d6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80021da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e2:	dd02      	ble.n	80021ea <StartUITask+0xd6>
		    mode = "HEAT";
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <StartUITask+0x168>)
 80021e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021e8:	e001      	b.n	80021ee <StartUITask+0xda>
		} else {
		    mode = "IDLE";
 80021ea:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <StartUITask+0x16c>)
 80021ec:	65bb      	str	r3, [r7, #88]	@ 0x58
		}

		char l1[24], l2[24];
		// fills them with formatted tex
		snprintf(l1, sizeof(l1), "P:%5.1fW T:%4.1f", last_watts, last_temp);
 80021ee:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80021f0:	f7fe f9aa 	bl	8000548 <__aeabi_f2d>
 80021f4:	4604      	mov	r4, r0
 80021f6:	460d      	mov	r5, r1
 80021f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fe f9a4 	bl	8000548 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800220c:	e9cd 4500 	strd	r4, r5, [sp]
 8002210:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <StartUITask+0x170>)
 8002212:	2118      	movs	r1, #24
 8002214:	f008 fdc6 	bl	800ada4 <sniprintf>
		snprintf(l2, sizeof(l2), "SP:%4.1f  %s",     set_point,   mode);
 8002218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	f107 000c 	add.w	r0, r7, #12
 8002228:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800222a:	9102      	str	r1, [sp, #8]
 800222c:	e9cd 2300 	strd	r2, r3, [sp]
 8002230:	4a15      	ldr	r2, [pc, #84]	@ (8002288 <StartUITask+0x174>)
 8002232:	2118      	movs	r1, #24
 8002234:	f008 fdb6 	bl	800ada4 <sniprintf>

		// Smooth update (no LCD_Clear => minimal flicker)
		LCD_ShowLinesNoClear(l1, l2);
 8002238:	f107 020c 	add.w	r2, r7, #12
 800223c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdd2 	bl	8001dec <LCD_ShowLinesNoClear>

		osDelay(200); // ~5 Hz refresh
 8002248:	20c8      	movs	r0, #200	@ 0xc8
 800224a:	f004 f83e 	bl	80062ca <osDelay>
	for (;;) {
 800224e:	e77e      	b.n	800214e <StartUITask+0x3a>
 8002250:	41f00000 	.word	0x41f00000
 8002254:	20000388 	.word	0x20000388
 8002258:	20000384 	.word	0x20000384
 800225c:	2000038c 	.word	0x2000038c
 8002260:	200001fe 	.word	0x200001fe
 8002264:	0800e850 	.word	0x0800e850
 8002268:	0800e864 	.word	0x0800e864
 800226c:	0800e874 	.word	0x0800e874
 8002270:	0800e884 	.word	0x0800e884
 8002274:	0800e898 	.word	0x0800e898
 8002278:	0800e8a8 	.word	0x0800e8a8
 800227c:	0800e8bc 	.word	0x0800e8bc
 8002280:	0800e8c4 	.word	0x0800e8c4
 8002284:	0800e8cc 	.word	0x0800e8cc
 8002288:	0800e8e0 	.word	0x0800e8e0

0800228c <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a04      	ldr	r2, [pc, #16]	@ (80022ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800229e:	f000 fe69 	bl	8002f74 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40001000 	.word	0x40001000

080022b0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b4:	b672      	cpsid	i
}
 80022b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <Error_Handler+0x8>

080022bc <ow_low>:
#include "onewire.h"

// Pull the bus line LOW (drive 0)
static inline void ow_low(void) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ONEWIRE_PORT, ONEWIRE_PIN, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <ow_low+0x14>)
 80022c6:	f001 f92f 	bl	8003528 <HAL_GPIO_WritePin>
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020c00 	.word	0x40020c00

080022d4 <ow_release>:

// Release the bus line (OD high = Hi-Z, pulled up by resistor)
static inline void ow_release(void) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(ONEWIRE_PORT, ONEWIRE_PIN, GPIO_PIN_SET); // OD high = released
 80022d8:	2201      	movs	r2, #1
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <ow_release+0x14>)
 80022de:	f001 f923 	bl	8003528 <HAL_GPIO_WritePin>
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020c00 	.word	0x40020c00

080022ec <ow_read>:

// Read the current level of the bus line (HIGH or LOW)
static inline GPIO_PinState ow_read(void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(ONEWIRE_PORT, ONEWIRE_PIN);
 80022f0:	2180      	movs	r1, #128	@ 0x80
 80022f2:	4803      	ldr	r0, [pc, #12]	@ (8002300 <ow_read+0x14>)
 80022f4:	f001 f900 	bl	80034f8 <HAL_GPIO_ReadPin>
 80022f8:	4603      	mov	r3, r0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40020c00 	.word	0x40020c00

08002304 <DWT_Delay_Init>:

// Initialize the DWT cycle counter for microsecond delays
// DWT delay (as you already had)
void DWT_Delay_Init(void) {
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002308:	4b08      	ldr	r3, [pc, #32]	@ (800232c <DWT_Delay_Init+0x28>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <DWT_Delay_Init+0x28>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <DWT_Delay_Init+0x2c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <DWT_Delay_Init+0x2c>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000edf0 	.word	0xe000edf0
 8002330:	e0001000 	.word	0xe0001000

08002334 <DWT_Delay_us>:

// Delay for a given number of microseconds using DWT
void DWT_Delay_us(uint32_t us) {
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000U) * us;
 800233c:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <DWT_Delay_us+0x44>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0e      	ldr	r2, [pc, #56]	@ (800237c <DWT_Delay_us+0x48>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9a      	lsrs	r2, r3, #18
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
  uint32_t start = DWT->CYCCNT;
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <DWT_Delay_us+0x4c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	60bb      	str	r3, [r7, #8]
  while ((DWT->CYCCNT - start) < cycles) { __NOP(); }
 8002356:	e000      	b.n	800235a <DWT_Delay_us+0x26>
 8002358:	bf00      	nop
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <DWT_Delay_us+0x4c>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	429a      	cmp	r2, r3
 8002366:	d8f7      	bhi.n	8002358 <DWT_Delay_us+0x24>
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000004 	.word	0x20000004
 800237c:	431bde83 	.word	0x431bde83
 8002380:	e0001000 	.word	0xe0001000

08002384 <ONEWIRE_Init>:

// Initialize the OneWire pin: Open-Drain with Pull-Up
void ONEWIRE_Init(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
  // Enable port clock for PD (or your chosen port)
  //__HAL_RCC_GPIOD_CLK_ENABLE();  // <-- adjust if you moved pins
  DWT_Delay_Init();
 800238a:	f7ff ffbb 	bl	8002304 <DWT_Delay_Init>

  GPIO_InitTypeDef i = {0};
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	605a      	str	r2, [r3, #4]
 8002396:	609a      	str	r2, [r3, #8]
 8002398:	60da      	str	r2, [r3, #12]
 800239a:	611a      	str	r2, [r3, #16]
  i.Pin = ONEWIRE_PIN;
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	607b      	str	r3, [r7, #4]
  i.Mode = GPIO_MODE_OUTPUT_OD;          // always OD output
 80023a0:	2311      	movs	r3, #17
 80023a2:	60bb      	str	r3, [r7, #8]
  i.Pull = GPIO_PULLUP;                  // keep internal PU; still need 4.7k external
 80023a4:	2301      	movs	r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
  i.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a8:	2303      	movs	r3, #3
 80023aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ONEWIRE_PORT, &i);
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <ONEWIRE_Init+0x40>)
 80023b2:	f000 ff05 	bl	80031c0 <HAL_GPIO_Init>

  ow_release(); // idle high
 80023b6:	f7ff ff8d 	bl	80022d4 <ow_release>
}
 80023ba:	bf00      	nop
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40020c00 	.word	0x40020c00

080023c8 <ONEWIRE_Reset>:



// Send reset pulse and check for presence pulse
// Returns true if device responds
bool ONEWIRE_Reset(void) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  ow_low();
 80023ce:	f7ff ff75 	bl	80022bc <ow_low>
  DWT_Delay_us(500);         // 480–960 us low
 80023d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80023d6:	f7ff ffad 	bl	8002334 <DWT_Delay_us>
  ow_release();
 80023da:	f7ff ff7b 	bl	80022d4 <ow_release>
  DWT_Delay_us(70);          // wait before sampling presence
 80023de:	2046      	movs	r0, #70	@ 0x46
 80023e0:	f7ff ffa8 	bl	8002334 <DWT_Delay_us>
  bool present = (ow_read() == GPIO_PIN_RESET);
 80023e4:	f7ff ff82 	bl	80022ec <ow_read>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	71fb      	strb	r3, [r7, #7]
  DWT_Delay_us(430);         // finish the slot
 80023f4:	f44f 70d7 	mov.w	r0, #430	@ 0x1ae
 80023f8:	f7ff ff9c 	bl	8002334 <DWT_Delay_us>
  return present;
 80023fc:	79fb      	ldrb	r3, [r7, #7]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <ONEWIRE_WriteBit>:


// Write a single bit to the bus
// '1' = short low, then release
// '0' = long low
void ONEWIRE_WriteBit(uint8_t b) {
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	4603      	mov	r3, r0
 800240e:	71fb      	strb	r3, [r7, #7]
  if (b) {
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <ONEWIRE_WriteBit+0x26>
    // Write '1': low ≥1us, sample window 15us, release until end (~60us total)
    ow_low();
 8002416:	f7ff ff51 	bl	80022bc <ow_low>
    DWT_Delay_us(3);        // short low for '1'
 800241a:	2003      	movs	r0, #3
 800241c:	f7ff ff8a 	bl	8002334 <DWT_Delay_us>
    ow_release();
 8002420:	f7ff ff58 	bl	80022d4 <ow_release>
    DWT_Delay_us(60);
 8002424:	203c      	movs	r0, #60	@ 0x3c
 8002426:	f7ff ff85 	bl	8002334 <DWT_Delay_us>
    ow_low();
    DWT_Delay_us(60);		 // long low for '0'
    ow_release();
    DWT_Delay_us(5);
  }
}
 800242a:	e009      	b.n	8002440 <ONEWIRE_WriteBit+0x3a>
    ow_low();
 800242c:	f7ff ff46 	bl	80022bc <ow_low>
    DWT_Delay_us(60);		 // long low for '0'
 8002430:	203c      	movs	r0, #60	@ 0x3c
 8002432:	f7ff ff7f 	bl	8002334 <DWT_Delay_us>
    ow_release();
 8002436:	f7ff ff4d 	bl	80022d4 <ow_release>
    DWT_Delay_us(5);
 800243a:	2005      	movs	r0, #5
 800243c:	f7ff ff7a 	bl	8002334 <DWT_Delay_us>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <ONEWIRE_ReadBit>:

// Read a single bit from the bus
uint8_t ONEWIRE_ReadBit(void) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  uint8_t bit;
  ow_low();
 800244e:	f7ff ff35 	bl	80022bc <ow_low>
  DWT_Delay_us(3);           // start read slot
 8002452:	2003      	movs	r0, #3
 8002454:	f7ff ff6e 	bl	8002334 <DWT_Delay_us>
  ow_release();
 8002458:	f7ff ff3c 	bl	80022d4 <ow_release>
  DWT_Delay_us(12);          // sample around 12–15us from slot start
 800245c:	200c      	movs	r0, #12
 800245e:	f7ff ff69 	bl	8002334 <DWT_Delay_us>
  bit = (ow_read() == GPIO_PIN_SET);
 8002462:	f7ff ff43 	bl	80022ec <ow_read>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	bf0c      	ite	eq
 800246c:	2301      	moveq	r3, #1
 800246e:	2300      	movne	r3, #0
 8002470:	b2db      	uxtb	r3, r3
 8002472:	71fb      	strb	r3, [r7, #7]
  DWT_Delay_us(50);          // finish ~60–65us total
 8002474:	2032      	movs	r0, #50	@ 0x32
 8002476:	f7ff ff5d 	bl	8002334 <DWT_Delay_us>
  return bit;
 800247a:	79fb      	ldrb	r3, [r7, #7]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <ONEWIRE_WriteByte>:

// Write a full byte (8 bits), LSB first
void ONEWIRE_WriteByte(uint8_t byte) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	e00c      	b.n	80024ae <ONEWIRE_WriteByte+0x2a>
    ONEWIRE_WriteBit(byte & 0x01);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ffb2 	bl	8002406 <ONEWIRE_WriteBit>
    byte >>= 1;
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2b07      	cmp	r3, #7
 80024b2:	ddef      	ble.n	8002494 <ONEWIRE_WriteByte+0x10>
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <ONEWIRE_ReadByte>:


// Read a full byte (8 bits), LSB first
uint8_t ONEWIRE_ReadByte(void) {
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
  uint8_t val = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	e00f      	b.n	80024ee <ONEWIRE_ReadByte+0x30>
    if (ONEWIRE_ReadBit())
 80024ce:	f7ff ffbb 	bl	8002448 <ONEWIRE_ReadBit>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d007      	beq.n	80024e8 <ONEWIRE_ReadByte+0x2a>
    	val |= (1U << i);   // LSB first
 80024d8:	2201      	movs	r2, #1
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	ddec      	ble.n	80024ce <ONEWIRE_ReadByte+0x10>
  }
  return val;
 80024f4:	79fb      	ldrb	r3, [r7, #7]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <clampf>:
#include "pid.h"

// Helper: keep a value inside [a, b]
static inline float clampf(float x, float a, float b) {
 80024fe:	b480      	push	{r7}
 8002500:	b085      	sub	sp, #20
 8002502:	af00      	add	r7, sp, #0
 8002504:	ed87 0a03 	vstr	s0, [r7, #12]
 8002508:	edc7 0a02 	vstr	s1, [r7, #8]
 800250c:	ed87 1a01 	vstr	s2, [r7, #4]
  if (x < a) return a;
 8002510:	ed97 7a03 	vldr	s14, [r7, #12]
 8002514:	edd7 7a02 	vldr	s15, [r7, #8]
 8002518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d501      	bpl.n	8002526 <clampf+0x28>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	e00b      	b.n	800253e <clampf+0x40>
  if (x > b) return b;
 8002526:	ed97 7a03 	vldr	s14, [r7, #12]
 800252a:	edd7 7a01 	vldr	s15, [r7, #4]
 800252e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	dd01      	ble.n	800253c <clampf+0x3e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	e000      	b.n	800253e <clampf+0x40>
  return x;
 800253c:	68fb      	ldr	r3, [r7, #12]
}
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb0 0a67 	vmov.f32	s0, s15
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <PID_Init>:

void PID_Init(PID_t *pid,float kp, float ki, float kd,float out_min, float out_max,float dt_s, float d_alpha)
{
 8002550:	b480      	push	{r7}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	61f8      	str	r0, [r7, #28]
 8002558:	ed87 0a06 	vstr	s0, [r7, #24]
 800255c:	edc7 0a05 	vstr	s1, [r7, #20]
 8002560:	ed87 1a04 	vstr	s2, [r7, #16]
 8002564:	edc7 1a03 	vstr	s3, [r7, #12]
 8002568:	ed87 2a02 	vstr	s4, [r7, #8]
 800256c:	edc7 2a01 	vstr	s5, [r7, #4]
 8002570:	ed87 3a00 	vstr	s6, [r7]
  // Store gains and basic limits
  pid->kp = kp;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	601a      	str	r2, [r3, #0]
  pid->ki = ki;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	605a      	str	r2, [r3, #4]
  pid->kd = kd;
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	609a      	str	r2, [r3, #8]
  pid->out_min = out_min;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	60da      	str	r2, [r3, #12]
  pid->out_max = out_max;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	611a      	str	r2, [r3, #16]

  // Sample time (how often PID_Compute will be called)
  if (dt_s > 0.0f) {
 8002592:	edd7 7a01 	vldr	s15, [r7, #4]
 8002596:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800259a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800259e:	dd03      	ble.n	80025a8 <PID_Init+0x58>
    pid->dt_s = dt_s;       // use the given sample time
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	615a      	str	r2, [r3, #20]
 80025a6:	e002      	b.n	80025ae <PID_Init+0x5e>
  } else {
    pid->dt_s = 0.1f;       // fallback default: 0.1 s
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	4a18      	ldr	r2, [pc, #96]	@ (800260c <PID_Init+0xbc>)
 80025ac:	615a      	str	r2, [r3, #20]
  }


  // Reset memories
  pid->integrator = 0.0f;  // I-term memory starts at 0
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  pid->prev_meas  = 0.0f;  // no last measurement yet
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	61da      	str	r2, [r3, #28]
  pid->first_run  = 1;     // first call gets special handling
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2020 	strb.w	r2, [r3, #32]

  // Derivative smoothing factor [0..1]
  if (d_alpha < 0.0f)
 80025c6:	edd7 7a00 	vldr	s15, [r7]
 80025ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d2:	d502      	bpl.n	80025da <PID_Init+0x8a>
	  d_alpha = 0.0f;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
  if (d_alpha > 1.0f)
 80025da:	edd7 7a00 	vldr	s15, [r7]
 80025de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	dd02      	ble.n	80025f2 <PID_Init+0xa2>
	  d_alpha = 1.0f;
 80025ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80025f0:	603b      	str	r3, [r7, #0]

  pid->d_alpha = d_alpha;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24
  pid->d_filt  = 0.0f;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002600:	bf00      	nop
 8002602:	3724      	adds	r7, #36	@ 0x24
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	3dcccccd 	.word	0x3dcccccd

08002610 <PID_Compute>:


//  error = setpoint - measurement
//  -> positive error means "we are too cold, add heat"
float PID_Compute(PID_t *pid, float setpoint, float measurement)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08e      	sub	sp, #56	@ 0x38
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	ed87 0a02 	vstr	s0, [r7, #8]
 800261c:	edc7 0a01 	vstr	s1, [r7, #4]
  const float dt = pid->dt_s;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30

  // 1) ERROR: how far from target (use set - meas so positive = need more heat)
  float error = setpoint - measurement;
 8002626:	ed97 7a02 	vldr	s14, [r7, #8]
 800262a:	edd7 7a01 	vldr	s15, [r7, #4]
 800262e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002632:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // 2) P-TERM: immediate push proportional to the error "right now"
  float P = pid->kp * error;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	edd3 7a00 	vldr	s15, [r3]
 800263c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002644:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

  // 3) D-TERM on MEASUREMENT (to avoid setpoint "kick"):
  //    Approximate rate of change of the temperature.
  float d_raw;
  if (pid->first_run) {
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <PID_Compute+0x52>
    d_raw = 0.0f;             // no previous measurement on very first call
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	@ 0x34
    pid->first_run = 0;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]
 8002660:	e00c      	b.n	800267c <PID_Compute+0x6c>
  } else {
    d_raw = (measurement - pid->prev_meas) / dt;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	edd3 7a07 	vldr	s15, [r3, #28]
 8002668:	ed97 7a01 	vldr	s14, [r7, #4]
 800266c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002670:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002678:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  }

  pid->prev_meas = measurement;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	61da      	str	r2, [r3, #28]

  // Smooth D (helps with sensor noise)
  pid->d_filt = (1.0f - pid->d_alpha) * pid->d_filt + pid->d_alpha * d_raw;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800268c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80026a0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

  // NOTE the minus sign:
  //  We took derivative of MEASUREMENT; derivative of ERROR would be (-d_meas).
  //  So D = -kd * d(meas)/dt.
  float D = -pid->kd * pid->d_filt;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026b8:	eeb1 7a67 	vneg.f32	s14, s15
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80026c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

  // 4) I-TERM (provisional): accumulate error over time (area)
  float I_ = pid->integrator + pid->ki * error * dt;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	ed93 7a06 	vldr	s14, [r3, #24]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80026d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80026da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80026de:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ea:	edc7 7a08 	vstr	s15, [r7, #32]

  // 5) Sum P + I + D (unclamped)
  float u_unclamped = P + I_ + D;
 80026ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80026f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80026f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]

  // 6) Clamp to safe range (e.g., 0..100 %)
  float u = clampf(u_unclamped, pid->out_min, pid->out_max);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	edd3 7a03 	vldr	s15, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002712:	eeb0 1a47 	vmov.f32	s2, s14
 8002716:	eef0 0a67 	vmov.f32	s1, s15
 800271a:	ed97 0a07 	vldr	s0, [r7, #28]
 800271e:	f7ff feee 	bl	80024fe <clampf>
 8002722:	ed87 0a06 	vstr	s0, [r7, #24]

  // 7) ANTI-WINDUP: Only accept the new I if we are NOT pushing deeper into a limit.
  //    Example: already at 100%, error still positive → don't integrate more upward.
  int at_upper = (u >= pid->out_max - 1e-6f);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	edd3 7a04 	vldr	s15, [r3, #16]
 800272c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80027ac <PID_Compute+0x19c>
 8002730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002734:	ed97 7a06 	vldr	s14, [r7, #24]
 8002738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	bfac      	ite	ge
 8002742:	2301      	movge	r3, #1
 8002744:	2300      	movlt	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	617b      	str	r3, [r7, #20]
  int at_lower = (u <= pid->out_min + 1e-6f);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002750:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80027ac <PID_Compute+0x19c>
 8002754:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002758:	ed97 7a06 	vldr	s14, [r7, #24]
 800275c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002764:	bf94      	ite	ls
 8002766:	2301      	movls	r3, #1
 8002768:	2300      	movhi	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	613b      	str	r3, [r7, #16]

  if ((at_upper && error > 0.0f) || (at_lower && error < 0.0f)) {
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d006      	beq.n	8002782 <PID_Compute+0x172>
 8002774:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800277c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002780:	dc0c      	bgt.n	800279c <PID_Compute+0x18c>
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <PID_Compute+0x186>
 8002788:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800278c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002794:	d402      	bmi.n	800279c <PID_Compute+0x18c>
    // hold integrator (do not update)
  } else {
    pid->integrator = I_;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	619a      	str	r2, [r3, #24]
  }

  // Final control output
  return u;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	ee07 3a90 	vmov	s15, r3
}
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	3738      	adds	r7, #56	@ 0x38
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	358637bd 	.word	0x358637bd

080027b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_MspInit+0x54>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027be:	4a11      	ldr	r2, [pc, #68]	@ (8002804 <HAL_MspInit+0x54>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <HAL_MspInit+0x54>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	603b      	str	r3, [r7, #0]
 80027d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002804 <HAL_MspInit+0x54>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_MspInit+0x54>)
 80027dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027e2:	4b08      	ldr	r3, [pc, #32]	@ (8002804 <HAL_MspInit+0x54>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	210f      	movs	r1, #15
 80027f2:	f06f 0001 	mvn.w	r0, #1
 80027f6:	f000 fcb9 	bl	800316c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800

08002808 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a19      	ldr	r2, [pc, #100]	@ (800288c <HAL_I2C_MspInit+0x84>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12b      	bne.n	8002882 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 8002834:	f043 0302 	orr.w	r3, r3, #2
 8002838:	6313      	str	r3, [r2, #48]	@ 0x30
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002846:	23c0      	movs	r3, #192	@ 0xc0
 8002848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800284a:	2312      	movs	r3, #18
 800284c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002852:	2303      	movs	r3, #3
 8002854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002856:	2304      	movs	r3, #4
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 0314 	add.w	r3, r7, #20
 800285e:	4619      	mov	r1, r3
 8002860:	480c      	ldr	r0, [pc, #48]	@ (8002894 <HAL_I2C_MspInit+0x8c>)
 8002862:	f000 fcad 	bl	80031c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 8002870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002874:	6413      	str	r3, [r2, #64]	@ 0x40
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_I2C_MspInit+0x88>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002882:	bf00      	nop
 8002884:	3728      	adds	r7, #40	@ 0x28
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40005400 	.word	0x40005400
 8002890:	40023800 	.word	0x40023800
 8002894:	40020400 	.word	0x40020400

08002898 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10d      	bne.n	80028c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x40>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x40>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b07      	ldr	r3, [pc, #28]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x40>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40023800 	.word	0x40023800

080028dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a12      	ldr	r2, [pc, #72]	@ (8002944 <HAL_TIM_MspPostInit+0x68>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d11d      	bne.n	800293a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a10      	ldr	r2, [pc, #64]	@ (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b0e      	ldr	r3, [pc, #56]	@ (8002948 <HAL_TIM_MspPostInit+0x6c>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800291a:	2303      	movs	r3, #3
 800291c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	2300      	movs	r3, #0
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800292a:	2302      	movs	r3, #2
 800292c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	4619      	mov	r1, r3
 8002934:	4805      	ldr	r0, [pc, #20]	@ (800294c <HAL_TIM_MspPostInit+0x70>)
 8002936:	f000 fc43 	bl	80031c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800293a:	bf00      	nop
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40000400 	.word	0x40000400
 8002948:	40023800 	.word	0x40023800
 800294c:	40020400 	.word	0x40020400

08002950 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08a      	sub	sp, #40	@ 0x28
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	609a      	str	r2, [r3, #8]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_UART_MspInit+0x84>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d12b      	bne.n	80029ca <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b18      	ldr	r3, [pc, #96]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a17      	ldr	r2, [pc, #92]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 800297c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b11      	ldr	r3, [pc, #68]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	4a10      	ldr	r2, [pc, #64]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	@ 0x30
 800299e:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_UART_MspInit+0x88>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80029aa:	2360      	movs	r3, #96	@ 0x60
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ba:	2307      	movs	r3, #7
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029be:	f107 0314 	add.w	r3, r7, #20
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	@ (80029dc <HAL_UART_MspInit+0x8c>)
 80029c6:	f000 fbfb 	bl	80031c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80029ca:	bf00      	nop
 80029cc:	3728      	adds	r7, #40	@ 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40023800 	.word	0x40023800
 80029dc:	40020c00 	.word	0x40020c00

080029e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08e      	sub	sp, #56	@ 0x38
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	4b33      	ldr	r3, [pc, #204]	@ (8002ac4 <HAL_InitTick+0xe4>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	4a32      	ldr	r2, [pc, #200]	@ (8002ac4 <HAL_InitTick+0xe4>)
 80029fa:	f043 0310 	orr.w	r3, r3, #16
 80029fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <HAL_InitTick+0xe4>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a0c:	f107 0210 	add.w	r2, r7, #16
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 ff7a 	bl	8004910 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a26:	f001 ff4b 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8002a2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8002a2c:	e004      	b.n	8002a38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a2e:	f001 ff47 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8002a32:	4603      	mov	r3, r0
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <HAL_InitTick+0xe8>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	3b01      	subs	r3, #1
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002a46:	4b21      	ldr	r3, [pc, #132]	@ (8002acc <HAL_InitTick+0xec>)
 8002a48:	4a21      	ldr	r2, [pc, #132]	@ (8002ad0 <HAL_InitTick+0xf0>)
 8002a4a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002a4c:	4b1f      	ldr	r3, [pc, #124]	@ (8002acc <HAL_InitTick+0xec>)
 8002a4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002a54:	4a1d      	ldr	r2, [pc, #116]	@ (8002acc <HAL_InitTick+0xec>)
 8002a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002acc <HAL_InitTick+0xec>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a60:	4b1a      	ldr	r3, [pc, #104]	@ (8002acc <HAL_InitTick+0xec>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a66:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_InitTick+0xec>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a6c:	4817      	ldr	r0, [pc, #92]	@ (8002acc <HAL_InitTick+0xec>)
 8002a6e:	f001 ff81 	bl	8004974 <HAL_TIM_Base_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a80:	4812      	ldr	r0, [pc, #72]	@ (8002acc <HAL_InitTick+0xec>)
 8002a82:	f001 ffd1 	bl	8004a28 <HAL_TIM_Base_Start_IT>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a94:	2036      	movs	r0, #54	@ 0x36
 8002a96:	f000 fb85 	bl	80031a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b0f      	cmp	r3, #15
 8002a9e:	d808      	bhi.n	8002ab2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	2036      	movs	r0, #54	@ 0x36
 8002aa6:	f000 fb61 	bl	800316c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_InitTick+0xf4>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e002      	b.n	8002ab8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3738      	adds	r7, #56	@ 0x38
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	431bde83 	.word	0x431bde83
 8002acc:	200003b4 	.word	0x200003b4
 8002ad0:	40001000 	.word	0x40001000
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <NMI_Handler+0x4>

08002ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <HardFault_Handler+0x4>

08002ae8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <MemManage_Handler+0x4>

08002af0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <BusFault_Handler+0x4>

08002af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <UsageFault_Handler+0x4>

08002b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b04:	bf00      	nop
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b14:	4802      	ldr	r0, [pc, #8]	@ (8002b20 <TIM6_DAC_IRQHandler+0x10>)
 8002b16:	f002 f90f 	bl	8004d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200003b4 	.word	0x200003b4

08002b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return 1;
 8002b28:	2301      	movs	r3, #1
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <_kill>:

int _kill(int pid, int sig)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b3e:	f008 fa7d 	bl	800b03c <__errno>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2216      	movs	r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
  return -1;
 8002b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <_exit>:

void _exit (int status)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ffe7 	bl	8002b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b66:	bf00      	nop
 8002b68:	e7fd      	b.n	8002b66 <_exit+0x12>

08002b6a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	e00a      	b.n	8002b92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b7c:	f3af 8000 	nop.w
 8002b80:	4601      	mov	r1, r0
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	60ba      	str	r2, [r7, #8]
 8002b88:	b2ca      	uxtb	r2, r1
 8002b8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	dbf0      	blt.n	8002b7c <_read+0x12>
  }

  return len;
 8002b9a:	687b      	ldr	r3, [r7, #4]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	e009      	b.n	8002bca <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	60ba      	str	r2, [r7, #8]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe fe28 	bl	8001814 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbf1      	blt.n	8002bb6 <_write+0x12>
  }
  return len;
 8002bd2:	687b      	ldr	r3, [r7, #4]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_close>:

int _close(int file)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c04:	605a      	str	r2, [r3, #4]
  return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <_isatty>:

int _isatty(int file)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c1c:	2301      	movs	r3, #1
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b085      	sub	sp, #20
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	@ (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f008 f9e2 	bl	800b03c <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	@ (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20020000 	.word	0x20020000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	200003fc 	.word	0x200003fc
 8002cac:	20004f88 	.word	0x20004f88

08002cb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb4:	4b06      	ldr	r3, [pc, #24]	@ (8002cd0 <SystemInit+0x20>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cba:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <SystemInit+0x20>)
 8002cbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <Telemetry_UpdateSetpoint>:

// -----------------------------------------------------------------------------
// Public API
// -----------------------------------------------------------------------------
void Telemetry_UpdateSetpoint(float setpt_c)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	ed87 0a01 	vstr	s0, [r7, #4]
    // Non-blocking try to avoid ever stalling producer tasks
    if (Telemetry_MutexHandle && osMutexAcquire(Telemetry_MutexHandle, 0) == osOK)
 8002cde:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <Telemetry_UpdateSetpoint+0x48>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d015      	beq.n	8002d12 <Telemetry_UpdateSetpoint+0x3e>
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8002d1c <Telemetry_UpdateSetpoint+0x48>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 fbba 	bl	8006466 <osMutexAcquire>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <Telemetry_UpdateSetpoint+0x3e>
    {
        g_tel.setpoint_c = setpt_c;
 8002cf8:	4a09      	ldr	r2, [pc, #36]	@ (8002d20 <Telemetry_UpdateSetpoint+0x4c>)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6053      	str	r3, [r2, #4]
        g_tel.t_ms       = osKernelGetTickCount();
 8002cfe:	f003 fa3d 	bl	800617c <osKernelGetTickCount>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a06      	ldr	r2, [pc, #24]	@ (8002d20 <Telemetry_UpdateSetpoint+0x4c>)
 8002d06:	6013      	str	r3, [r2, #0]
        osMutexRelease(Telemetry_MutexHandle);
 8002d08:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <Telemetry_UpdateSetpoint+0x48>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f003 fbf5 	bl	80064fc <osMutexRelease>
    }
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	2000040c 	.word	0x2000040c
 8002d20:	20000400 	.word	0x20000400

08002d24 <Telemetry_UpdateTemp>:

void Telemetry_UpdateTemp(float temp_c)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	ed87 0a01 	vstr	s0, [r7, #4]
    if (Telemetry_MutexHandle && osMutexAcquire(Telemetry_MutexHandle, 0) == osOK)
 8002d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d6c <Telemetry_UpdateTemp+0x48>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <Telemetry_UpdateTemp+0x3e>
 8002d36:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <Telemetry_UpdateTemp+0x48>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fb92 	bl	8006466 <osMutexAcquire>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <Telemetry_UpdateTemp+0x3e>
    {
        g_tel.temp_c = temp_c;
 8002d48:	4a09      	ldr	r2, [pc, #36]	@ (8002d70 <Telemetry_UpdateTemp+0x4c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6093      	str	r3, [r2, #8]
        g_tel.t_ms   = osKernelGetTickCount();
 8002d4e:	f003 fa15 	bl	800617c <osKernelGetTickCount>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <Telemetry_UpdateTemp+0x4c>)
 8002d56:	6013      	str	r3, [r2, #0]
        osMutexRelease(Telemetry_MutexHandle);
 8002d58:	4b04      	ldr	r3, [pc, #16]	@ (8002d6c <Telemetry_UpdateTemp+0x48>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f003 fbcd 	bl	80064fc <osMutexRelease>
    }
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000040c 	.word	0x2000040c
 8002d70:	20000400 	.word	0x20000400

08002d74 <Telemetry_Task>:

void Telemetry_Task(void *argument)
{
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b08d      	sub	sp, #52	@ 0x34
 8002d78:	af04      	add	r7, sp, #16
 8002d7a:	6078      	str	r0, [r7, #4]
    (void)argument;
    const uint32_t period_ms = 100;                 // 10 Hz
 8002d7c:	2364      	movs	r3, #100	@ 0x64
 8002d7e:	61bb      	str	r3, [r7, #24]
    uint32_t next = osKernelGetTickCount();
 8002d80:	f003 f9fc 	bl	800617c <osKernelGetTickCount>
 8002d84:	61f8      	str	r0, [r7, #28]

    for (;;) {
        // Take a snapshot (short, bounded critical section)
        TelemetrySnapshot_t s = {0};
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
        if (Telemetry_MutexHandle && osMutexAcquire(Telemetry_MutexHandle, 5) == osOK)
 8002d92:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <Telemetry_Task+0xcc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d013      	beq.n	8002dc2 <Telemetry_Task+0x4e>
 8002d9a:	4b29      	ldr	r3, [pc, #164]	@ (8002e40 <Telemetry_Task+0xcc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2105      	movs	r1, #5
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fb60 	bl	8006466 <osMutexAcquire>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10a      	bne.n	8002dc2 <Telemetry_Task+0x4e>
        {
            s = g_tel;
 8002dac:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <Telemetry_Task+0xd0>)
 8002dae:	f107 0308 	add.w	r3, r7, #8
 8002db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            osMutexRelease(Telemetry_MutexHandle);
 8002db8:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <Telemetry_Task+0xcc>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fb9d 	bl	80064fc <osMutexRelease>

        // Format CSV: t_ms,setpoint,temp\n
        // Example: 123456,50.00,48.62\n
        const int n = snprintf((char*)txBuf, sizeof(txBuf),
                               "%lu,%.2f,%.2f\n",
                               (unsigned long)s.t_ms,
 8002dc2:	68be      	ldr	r6, [r7, #8]
                               s.setpoint_c, s.temp_c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
        const int n = snprintf((char*)txBuf, sizeof(txBuf),
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbbe 	bl	8000548 <__aeabi_f2d>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	460d      	mov	r5, r1
                               s.setpoint_c, s.temp_c);
 8002dd0:	693b      	ldr	r3, [r7, #16]
        const int n = snprintf((char*)txBuf, sizeof(txBuf),
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fbb8 	bl	8000548 <__aeabi_f2d>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002de0:	e9cd 4500 	strd	r4, r5, [sp]
 8002de4:	4633      	mov	r3, r6
 8002de6:	4a18      	ldr	r2, [pc, #96]	@ (8002e48 <Telemetry_Task+0xd4>)
 8002de8:	2140      	movs	r1, #64	@ 0x40
 8002dea:	4818      	ldr	r0, [pc, #96]	@ (8002e4c <Telemetry_Task+0xd8>)
 8002dec:	f007 ffda 	bl	800ada4 <sniprintf>
 8002df0:	6178      	str	r0, [r7, #20]

        if (n > 0) {
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dd18      	ble.n	8002e2a <Telemetry_Task+0xb6>
            // --- Guard UART with your global mutex to avoid interleaved prints ---
            if (UART_MutexHandle && osMutexAcquire(UART_MutexHandle, 5) == osOK)
 8002df8:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <Telemetry_Task+0xdc>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d014      	beq.n	8002e2a <Telemetry_Task+0xb6>
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <Telemetry_Task+0xdc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2105      	movs	r1, #5
 8002e06:	4618      	mov	r0, r3
 8002e08:	f003 fb2d 	bl	8006466 <osMutexAcquire>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10b      	bne.n	8002e2a <Telemetry_Task+0xb6>
            {
                // Short, blocking TX (bytes << buffer size)
                HAL_UART_Transmit(&huart2, txBuf, (uint16_t)n, 10);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	230a      	movs	r3, #10
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <Telemetry_Task+0xd8>)
 8002e1a:	480e      	ldr	r0, [pc, #56]	@ (8002e54 <Telemetry_Task+0xe0>)
 8002e1c:	f002 fcd0 	bl	80057c0 <HAL_UART_Transmit>
                osMutexRelease(UART_MutexHandle);
 8002e20:	4b0b      	ldr	r3, [pc, #44]	@ (8002e50 <Telemetry_Task+0xdc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 fb69 	bl	80064fc <osMutexRelease>
            }
            // If UART_MutexHandle is NULL (not created yet), we silently skip TX
            // to avoid racing with other UART users during early boot.
        }

        osDelayUntil(next + period_ms);
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 fa65 	bl	8006300 <osDelayUntil>
        next += period_ms;
 8002e36:	69fa      	ldr	r2, [r7, #28]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	61fb      	str	r3, [r7, #28]
    for (;;) {
 8002e3e:	e7a2      	b.n	8002d86 <Telemetry_Task+0x12>
 8002e40:	2000040c 	.word	0x2000040c
 8002e44:	20000400 	.word	0x20000400
 8002e48:	0800e8f0 	.word	0x0800e8f0
 8002e4c:	20000410 	.word	0x20000410
 8002e50:	20000398 	.word	0x20000398
 8002e54:	200002f8 	.word	0x200002f8

08002e58 <Telemetry_Init>:
    }
}

void Telemetry_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
    // Create the snapshot mutex
    const osMutexAttr_t mtxAttr = { .name = "Telemetry_Mutex" };
 8002e5e:	463b      	mov	r3, r7
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <Telemetry_Init+0x70>)
 8002e6c:	603b      	str	r3, [r7, #0]
    Telemetry_MutexHandle = osMutexNew(&mtxAttr);
 8002e6e:	463b      	mov	r3, r7
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fa72 	bl	800635a <osMutexNew>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <Telemetry_Init+0x74>)
 8002e7a:	6013      	str	r3, [r2, #0]

    // Seed defaults
    if (Telemetry_MutexHandle) {
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <Telemetry_Init+0x74>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d018      	beq.n	8002eb6 <Telemetry_Init+0x5e>
        osMutexAcquire(Telemetry_MutexHandle, osWaitForever);
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <Telemetry_Init+0x74>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f003 faea 	bl	8006466 <osMutexAcquire>
        g_tel.t_ms       = osKernelGetTickCount();
 8002e92:	f003 f973 	bl	800617c <osKernelGetTickCount>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <Telemetry_Init+0x78>)
 8002e9a:	6013      	str	r3, [r2, #0]
        g_tel.setpoint_c = 0.0f;
 8002e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed0 <Telemetry_Init+0x78>)
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	605a      	str	r2, [r3, #4]
        g_tel.temp_c     = 0.0f;
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <Telemetry_Init+0x78>)
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
        osMutexRelease(Telemetry_MutexHandle);
 8002eac:	4b07      	ldr	r3, [pc, #28]	@ (8002ecc <Telemetry_Init+0x74>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f003 fb23 	bl	80064fc <osMutexRelease>
    static const osThreadAttr_t TelemetryTask_attributes = {
        .name       = "TelemetryTask",
        .stack_size = 256 * 4,
        .priority   = (osPriority_t)osPriorityLow
    };
    (void)osThreadNew(Telemetry_Task, NULL, &TelemetryTask_attributes);
 8002eb6:	4a07      	ldr	r2, [pc, #28]	@ (8002ed4 <Telemetry_Init+0x7c>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4807      	ldr	r0, [pc, #28]	@ (8002ed8 <Telemetry_Init+0x80>)
 8002ebc:	f003 f973 	bl	80061a6 <osThreadNew>
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	0800e900 	.word	0x0800e900
 8002ecc:	2000040c 	.word	0x2000040c
 8002ed0:	20000400 	.word	0x20000400
 8002ed4:	0800eae8 	.word	0x0800eae8
 8002ed8:	08002d75 	.word	0x08002d75

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ee0:	f7ff fee6 	bl	8002cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f008 f89d 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fe fc97 	bl	8001840 <main>
  bx  lr    
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f20:	0800ef44 	.word	0x0800ef44
  ldr r2, =_sbss
 8002f24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f28:	20004f88 	.word	0x20004f88

08002f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <HAL_Init+0x40>)
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <HAL_Init+0x40>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <HAL_Init+0x40>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f000 f8fc 	bl	8003156 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7ff fd3e 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f64:	f7ff fc24 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a04      	ldr	r2, [pc, #16]	@ (8002f98 <HAL_IncTick+0x24>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c
 8002f98:	20000450 	.word	0x20000450

08002f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_GetTick+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000450 	.word	0x20000450

08002fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fbc:	f7ff ffee 	bl	8002f9c <HAL_GetTick>
 8002fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d005      	beq.n	8002fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_Delay+0x44>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fda:	bf00      	nop
 8002fdc:	f7ff ffde 	bl	8002f9c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d8f7      	bhi.n	8002fdc <HAL_Delay+0x28>
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003018:	4013      	ands	r3, r2
 800301a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800302c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800302e:	4a04      	ldr	r2, [pc, #16]	@ (8003040 <__NVIC_SetPriorityGrouping+0x44>)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	60d3      	str	r3, [r2, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003048:	4b04      	ldr	r3, [pc, #16]	@ (800305c <__NVIC_GetPriorityGrouping+0x18>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	f003 0307 	and.w	r3, r3, #7
}
 8003052:	4618      	mov	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306e:	2b00      	cmp	r3, #0
 8003070:	db0b      	blt.n	800308a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4907      	ldr	r1, [pc, #28]	@ (8003098 <__NVIC_EnableIRQ+0x38>)
 800307a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	2001      	movs	r0, #1
 8003082:	fa00 f202 	lsl.w	r2, r0, r2
 8003086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100

0800309c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	db0a      	blt.n	80030c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	490c      	ldr	r1, [pc, #48]	@ (80030e8 <__NVIC_SetPriority+0x4c>)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	440b      	add	r3, r1
 80030c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c4:	e00a      	b.n	80030dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4908      	ldr	r1, [pc, #32]	@ (80030ec <__NVIC_SetPriority+0x50>)
 80030cc:	79fb      	ldrb	r3, [r7, #7]
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	3b04      	subs	r3, #4
 80030d4:	0112      	lsls	r2, r2, #4
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	440b      	add	r3, r1
 80030da:	761a      	strb	r2, [r3, #24]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	e000e100 	.word	0xe000e100
 80030ec:	e000ed00 	.word	0xe000ed00

080030f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f1c3 0307 	rsb	r3, r3, #7
 800310a:	2b04      	cmp	r3, #4
 800310c:	bf28      	it	cs
 800310e:	2304      	movcs	r3, #4
 8003110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3304      	adds	r3, #4
 8003116:	2b06      	cmp	r3, #6
 8003118:	d902      	bls.n	8003120 <NVIC_EncodePriority+0x30>
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3b03      	subs	r3, #3
 800311e:	e000      	b.n	8003122 <NVIC_EncodePriority+0x32>
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	401a      	ands	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003138:	f04f 31ff 	mov.w	r1, #4294967295
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	43d9      	mvns	r1, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003148:	4313      	orrs	r3, r2
         );
}
 800314a:	4618      	mov	r0, r3
 800314c:	3724      	adds	r7, #36	@ 0x24
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff4c 	bl	8002ffc <__NVIC_SetPriorityGrouping>
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800317e:	f7ff ff61 	bl	8003044 <__NVIC_GetPriorityGrouping>
 8003182:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68b9      	ldr	r1, [r7, #8]
 8003188:	6978      	ldr	r0, [r7, #20]
 800318a:	f7ff ffb1 	bl	80030f0 <NVIC_EncodePriority>
 800318e:	4602      	mov	r2, r0
 8003190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff ff80 	bl	800309c <__NVIC_SetPriority>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff54 	bl	8003060 <__NVIC_EnableIRQ>
}
 80031b8:	bf00      	nop
 80031ba:	3708      	adds	r7, #8
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b089      	sub	sp, #36	@ 0x24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	e16b      	b.n	80034b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031dc:	2201      	movs	r2, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	f040 815a 	bne.w	80034ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d005      	beq.n	8003212 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800320e:	2b02      	cmp	r3, #2
 8003210:	d130      	bne.n	8003274 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003248:	2201      	movs	r2, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0201 	and.w	r2, r3, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b03      	cmp	r3, #3
 800327e:	d017      	beq.n	80032b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d123      	bne.n	8003304 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	08da      	lsrs	r2, r3, #3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3208      	adds	r2, #8
 80032c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	220f      	movs	r2, #15
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	08da      	lsrs	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	69b9      	ldr	r1, [r7, #24]
 8003300:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 0203 	and.w	r2, r3, #3
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80b4 	beq.w	80034ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	4b60      	ldr	r3, [pc, #384]	@ (80034cc <HAL_GPIO_Init+0x30c>)
 800334c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334e:	4a5f      	ldr	r2, [pc, #380]	@ (80034cc <HAL_GPIO_Init+0x30c>)
 8003350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003354:	6453      	str	r3, [r2, #68]	@ 0x44
 8003356:	4b5d      	ldr	r3, [pc, #372]	@ (80034cc <HAL_GPIO_Init+0x30c>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003362:	4a5b      	ldr	r2, [pc, #364]	@ (80034d0 <HAL_GPIO_Init+0x310>)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	089b      	lsrs	r3, r3, #2
 8003368:	3302      	adds	r3, #2
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	220f      	movs	r2, #15
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43db      	mvns	r3, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4013      	ands	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a52      	ldr	r2, [pc, #328]	@ (80034d4 <HAL_GPIO_Init+0x314>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <HAL_GPIO_Init+0x226>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a51      	ldr	r2, [pc, #324]	@ (80034d8 <HAL_GPIO_Init+0x318>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_Init+0x222>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a50      	ldr	r2, [pc, #320]	@ (80034dc <HAL_GPIO_Init+0x31c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_Init+0x21e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4f      	ldr	r2, [pc, #316]	@ (80034e0 <HAL_GPIO_Init+0x320>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_Init+0x21a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4e      	ldr	r2, [pc, #312]	@ (80034e4 <HAL_GPIO_Init+0x324>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_Init+0x216>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4d      	ldr	r2, [pc, #308]	@ (80034e8 <HAL_GPIO_Init+0x328>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_Init+0x212>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4c      	ldr	r2, [pc, #304]	@ (80034ec <HAL_GPIO_Init+0x32c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_Init+0x20e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a4b      	ldr	r2, [pc, #300]	@ (80034f0 <HAL_GPIO_Init+0x330>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_Init+0x20a>
 80033c6:	2307      	movs	r3, #7
 80033c8:	e00e      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033ca:	2308      	movs	r3, #8
 80033cc:	e00c      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033ce:	2306      	movs	r3, #6
 80033d0:	e00a      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033d2:	2305      	movs	r3, #5
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x228>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4935      	ldr	r1, [pc, #212]	@ (80034d0 <HAL_GPIO_Init+0x310>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003406:	4b3b      	ldr	r3, [pc, #236]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800342a:	4a32      	ldr	r2, [pc, #200]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003430:	4b30      	ldr	r3, [pc, #192]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003454:	4a27      	ldr	r2, [pc, #156]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800345a:	4b26      	ldr	r3, [pc, #152]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800347e:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003484:	4b1b      	ldr	r3, [pc, #108]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034a8:	4a12      	ldr	r2, [pc, #72]	@ (80034f4 <HAL_GPIO_Init+0x334>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f ae90 	bls.w	80031dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800
 80034d0:	40013800 	.word	0x40013800
 80034d4:	40020000 	.word	0x40020000
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020800 	.word	0x40020800
 80034e0:	40020c00 	.word	0x40020c00
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40021400 	.word	0x40021400
 80034ec:	40021800 	.word	0x40021800
 80034f0:	40021c00 	.word	0x40021c00
 80034f4:	40013c00 	.word	0x40013c00

080034f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	4013      	ands	r3, r2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e001      	b.n	800351a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	460b      	mov	r3, r1
 8003532:	807b      	strh	r3, [r7, #2]
 8003534:	4613      	mov	r3, r2
 8003536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003538:	787b      	ldrb	r3, [r7, #1]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003544:	e003      	b.n	800354e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	041a      	lsls	r2, r3, #16
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	619a      	str	r2, [r3, #24]
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e171      	b.n	8003852 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d12c      	bne.n	80035d4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a77      	ldr	r2, [pc, #476]	@ (8003764 <HAL_I2C_Init+0x208>)
 8003586:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a77      	ldr	r2, [pc, #476]	@ (8003768 <HAL_I2C_Init+0x20c>)
 800358c:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a76      	ldr	r2, [pc, #472]	@ (800376c <HAL_I2C_Init+0x210>)
 8003592:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a76      	ldr	r2, [pc, #472]	@ (8003770 <HAL_I2C_Init+0x214>)
 8003598:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a75      	ldr	r2, [pc, #468]	@ (8003774 <HAL_I2C_Init+0x218>)
 800359e:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a75      	ldr	r2, [pc, #468]	@ (8003778 <HAL_I2C_Init+0x21c>)
 80035a4:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a74      	ldr	r2, [pc, #464]	@ (800377c <HAL_I2C_Init+0x220>)
 80035aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a74      	ldr	r2, [pc, #464]	@ (8003780 <HAL_I2C_Init+0x224>)
 80035b0:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a73      	ldr	r2, [pc, #460]	@ (8003784 <HAL_I2C_Init+0x228>)
 80035b6:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a73      	ldr	r2, [pc, #460]	@ (8003788 <HAL_I2C_Init+0x22c>)
 80035bc:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d102      	bne.n	80035cc <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a70      	ldr	r2, [pc, #448]	@ (800378c <HAL_I2C_Init+0x230>)
 80035ca:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	@ 0x24
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800360a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800360c:	f001 f958 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8003610:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a5e      	ldr	r2, [pc, #376]	@ (8003790 <HAL_I2C_Init+0x234>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d807      	bhi.n	800362c <HAL_I2C_Init+0xd0>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_I2C_Init+0x238>)
 8003620:	4293      	cmp	r3, r2
 8003622:	bf94      	ite	ls
 8003624:	2301      	movls	r3, #1
 8003626:	2300      	movhi	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e006      	b.n	800363a <HAL_I2C_Init+0xde>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4a5a      	ldr	r2, [pc, #360]	@ (8003798 <HAL_I2C_Init+0x23c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	bf94      	ite	ls
 8003634:	2301      	movls	r3, #1
 8003636:	2300      	movhi	r3, #0
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e107      	b.n	8003852 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a55      	ldr	r2, [pc, #340]	@ (800379c <HAL_I2C_Init+0x240>)
 8003646:	fba2 2303 	umull	r2, r3, r2, r3
 800364a:	0c9b      	lsrs	r3, r3, #18
 800364c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a47      	ldr	r2, [pc, #284]	@ (8003790 <HAL_I2C_Init+0x234>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d802      	bhi.n	800367c <HAL_I2C_Init+0x120>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	3301      	adds	r3, #1
 800367a:	e009      	b.n	8003690 <HAL_I2C_Init+0x134>
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003682:	fb02 f303 	mul.w	r3, r2, r3
 8003686:	4a46      	ldr	r2, [pc, #280]	@ (80037a0 <HAL_I2C_Init+0x244>)
 8003688:	fba2 2303 	umull	r2, r3, r2, r3
 800368c:	099b      	lsrs	r3, r3, #6
 800368e:	3301      	adds	r3, #1
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	430b      	orrs	r3, r1
 8003696:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	4939      	ldr	r1, [pc, #228]	@ (8003790 <HAL_I2C_Init+0x234>)
 80036ac:	428b      	cmp	r3, r1
 80036ae:	d819      	bhi.n	80036e4 <HAL_I2C_Init+0x188>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1e59      	subs	r1, r3, #1
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80036be:	1c59      	adds	r1, r3, #1
 80036c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036c4:	400b      	ands	r3, r1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_I2C_Init+0x184>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	1e59      	subs	r1, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036d8:	3301      	adds	r3, #1
 80036da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036de:	e071      	b.n	80037c4 <HAL_I2C_Init+0x268>
 80036e0:	2304      	movs	r3, #4
 80036e2:	e06f      	b.n	80037c4 <HAL_I2C_Init+0x268>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d111      	bne.n	8003710 <HAL_I2C_Init+0x1b4>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	1e58      	subs	r0, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	440b      	add	r3, r1
 80036fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80036fe:	3301      	adds	r3, #1
 8003700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e012      	b.n	8003736 <HAL_I2C_Init+0x1da>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1e58      	subs	r0, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	0099      	lsls	r1, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	fbb0 f3f3 	udiv	r3, r0, r3
 8003726:	3301      	adds	r3, #1
 8003728:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <HAL_I2C_Init+0x1e2>
 800373a:	2301      	movs	r3, #1
 800373c:	e042      	b.n	80037c4 <HAL_I2C_Init+0x268>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d12e      	bne.n	80037a4 <HAL_I2C_Init+0x248>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1e58      	subs	r0, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	460b      	mov	r3, r1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	440b      	add	r3, r1
 8003754:	fbb0 f3f3 	udiv	r3, r0, r3
 8003758:	3301      	adds	r3, #1
 800375a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003762:	e02f      	b.n	80037c4 <HAL_I2C_Init+0x268>
 8003764:	08003a59 	.word	0x08003a59
 8003768:	08003a6d 	.word	0x08003a6d
 800376c:	08003a81 	.word	0x08003a81
 8003770:	08003a95 	.word	0x08003a95
 8003774:	08003ac5 	.word	0x08003ac5
 8003778:	08003ad9 	.word	0x08003ad9
 800377c:	08003aed 	.word	0x08003aed
 8003780:	08003b01 	.word	0x08003b01
 8003784:	08003b15 	.word	0x08003b15
 8003788:	08003aa9 	.word	0x08003aa9
 800378c:	08002809 	.word	0x08002809
 8003790:	000186a0 	.word	0x000186a0
 8003794:	001e847f 	.word	0x001e847f
 8003798:	003d08ff 	.word	0x003d08ff
 800379c:	431bde83 	.word	0x431bde83
 80037a0:	10624dd3 	.word	0x10624dd3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6809      	ldr	r1, [r1, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6911      	ldr	r1, [r2, #16]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop

0800385c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	817b      	strh	r3, [r7, #10]
 800386c:	4613      	mov	r3, r2
 800386e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff fb94 	bl	8002f9c <HAL_GetTick>
 8003874:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b20      	cmp	r3, #32
 8003880:	f040 80e0 	bne.w	8003a44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	2319      	movs	r3, #25
 800388a:	2201      	movs	r2, #1
 800388c:	4970      	ldr	r1, [pc, #448]	@ (8003a50 <HAL_I2C_Master_Transmit+0x1f4>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f9cc 	bl	8003c2c <I2C_WaitOnFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
 800389c:	e0d3      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_I2C_Master_Transmit+0x50>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e0cc      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d007      	beq.n	80038d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f042 0201 	orr.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2221      	movs	r2, #33	@ 0x21
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2210      	movs	r2, #16
 80038ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	893a      	ldrh	r2, [r7, #8]
 8003902:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4a50      	ldr	r2, [pc, #320]	@ (8003a54 <HAL_I2C_Master_Transmit+0x1f8>)
 8003912:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	6a3a      	ldr	r2, [r7, #32]
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f904 	bl	8003b28 <I2C_MasterRequestWrite>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e08d      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003940:	e066      	b.n	8003a10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	6a39      	ldr	r1, [r7, #32]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 fa8a 	bl	8003e60 <I2C_WaitOnTXEFlagUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	2b04      	cmp	r3, #4
 8003958:	d107      	bne.n	800396a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003968:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06b      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	781a      	ldrb	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	3b01      	subs	r3, #1
 800398c:	b29a      	uxth	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d11b      	bne.n	80039e4 <HAL_I2C_Master_Transmit+0x188>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	781a      	ldrb	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	6a39      	ldr	r1, [r7, #32]
 80039e8:	68f8      	ldr	r0, [r7, #12]
 80039ea:	f000 fa81 	bl	8003ef0 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00d      	beq.n	8003a10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d107      	bne.n	8003a0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e01a      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d194      	bne.n	8003942 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e000      	b.n	8003a46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a44:	2302      	movs	r3, #2
  }
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	00100002 	.word	0x00100002
 8003a54:	ffff0000 	.word	0xffff0000

08003a58 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af02      	add	r7, sp, #8
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	460b      	mov	r3, r1
 8003b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d006      	beq.n	8003b52 <I2C_MasterRequestWrite+0x2a>
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d003      	beq.n	8003b52 <I2C_MasterRequestWrite+0x2a>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b50:	d108      	bne.n	8003b64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e00b      	b.n	8003b7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b68:	2b12      	cmp	r3, #18
 8003b6a:	d107      	bne.n	8003b7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f84f 	bl	8003c2c <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba2:	d103      	bne.n	8003bac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e035      	b.n	8003c1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb8:	d108      	bne.n	8003bcc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bba:	897b      	ldrh	r3, [r7, #10]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e01b      	b.n	8003c04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003bcc:	897b      	ldrh	r3, [r7, #10]
 8003bce:	11db      	asrs	r3, r3, #7
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f063 030f 	orn	r3, r3, #15
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	490e      	ldr	r1, [pc, #56]	@ (8003c24 <I2C_MasterRequestWrite+0xfc>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f898 	bl	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e010      	b.n	8003c1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003bfa:	897b      	ldrh	r3, [r7, #10]
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	4907      	ldr	r1, [pc, #28]	@ (8003c28 <I2C_MasterRequestWrite+0x100>)
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f888 	bl	8003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	00010008 	.word	0x00010008
 8003c28:	00010002 	.word	0x00010002

08003c2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	603b      	str	r3, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c3c:	e048      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c44:	d044      	beq.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c46:	f7ff f9a9 	bl	8002f9c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d302      	bcc.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d139      	bne.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	0c1b      	lsrs	r3, r3, #16
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d10d      	bne.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf0c      	ite	eq
 8003c78:	2301      	moveq	r3, #1
 8003c7a:	2300      	movne	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	e00c      	b.n	8003c9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	43da      	mvns	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	79fb      	ldrb	r3, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d116      	bne.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e023      	b.n	8003d18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	0c1b      	lsrs	r3, r3, #16
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d10d      	bne.n	8003cf6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	43da      	mvns	r2, r3
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	bf0c      	ite	eq
 8003cec:	2301      	moveq	r3, #1
 8003cee:	2300      	movne	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	e00c      	b.n	8003d10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	43da      	mvns	r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d093      	beq.n	8003c3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d2e:	e071      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3e:	d123      	bne.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	f043 0204 	orr.w	r2, r3, #4
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e067      	b.n	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d041      	beq.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d90:	f7ff f904 	bl	8002f9c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d302      	bcc.n	8003da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d136      	bne.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10c      	bne.n	8003dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	43da      	mvns	r2, r3
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e00b      	b.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d016      	beq.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e021      	b.n	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0c1b      	lsrs	r3, r3, #16
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d10c      	bne.n	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	43da      	mvns	r2, r3
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf14      	ite	ne
 8003e30:	2301      	movne	r3, #1
 8003e32:	2300      	moveq	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e00b      	b.n	8003e50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f af6d 	bne.w	8003d30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6c:	e034      	b.n	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f886 	bl	8003f80 <I2C_IsAcknowledgeFailed>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e034      	b.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d028      	beq.n	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e86:	f7ff f889 	bl	8002f9c <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d302      	bcc.n	8003e9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d11d      	bne.n	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea6:	2b80      	cmp	r3, #128	@ 0x80
 8003ea8:	d016      	beq.n	8003ed8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	f043 0220 	orr.w	r2, r3, #32
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e007      	b.n	8003ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d1c3      	bne.n	8003e6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003efc:	e034      	b.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f83e 	bl	8003f80 <I2C_IsAcknowledgeFailed>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e034      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d028      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7ff f841 	bl	8002f9c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d11d      	bne.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d016      	beq.n	8003f68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e007      	b.n	8003f78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d1c3      	bne.n	8003efe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f96:	d11b      	bne.n	8003fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbc:	f043 0204 	orr.w	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e267      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d075      	beq.n	80040ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ffe:	4b88      	ldr	r3, [pc, #544]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b04      	cmp	r3, #4
 8004008:	d00c      	beq.n	8004024 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800400a:	4b85      	ldr	r3, [pc, #532]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004012:	2b08      	cmp	r3, #8
 8004014:	d112      	bne.n	800403c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b82      	ldr	r3, [pc, #520]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800401e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004022:	d10b      	bne.n	800403c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	4b7e      	ldr	r3, [pc, #504]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05b      	beq.n	80040e8 <HAL_RCC_OscConfig+0x108>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d157      	bne.n	80040e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e242      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004044:	d106      	bne.n	8004054 <HAL_RCC_OscConfig+0x74>
 8004046:	4b76      	ldr	r3, [pc, #472]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a75      	ldr	r2, [pc, #468]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800404c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	e01d      	b.n	8004090 <HAL_RCC_OscConfig+0xb0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x98>
 800405e:	4b70      	ldr	r3, [pc, #448]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6f      	ldr	r2, [pc, #444]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b6d      	ldr	r3, [pc, #436]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6c      	ldr	r2, [pc, #432]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0xb0>
 8004078:	4b69      	ldr	r3, [pc, #420]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a68      	ldr	r2, [pc, #416]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800407e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b66      	ldr	r3, [pc, #408]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a65      	ldr	r2, [pc, #404]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800408a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800408e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d013      	beq.n	80040c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fe ff80 	bl	8002f9c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fe ff7c 	bl	8002f9c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	@ 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e207      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b5b      	ldr	r3, [pc, #364]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0f0      	beq.n	80040a0 <HAL_RCC_OscConfig+0xc0>
 80040be:	e014      	b.n	80040ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe ff6c 	bl	8002f9c <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040c8:	f7fe ff68 	bl	8002f9c <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	@ 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e1f3      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040da:	4b51      	ldr	r3, [pc, #324]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0xe8>
 80040e6:	e000      	b.n	80040ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d063      	beq.n	80041be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00b      	beq.n	800411a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004102:	4b47      	ldr	r3, [pc, #284]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800410a:	2b08      	cmp	r3, #8
 800410c:	d11c      	bne.n	8004148 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b44      	ldr	r3, [pc, #272]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d116      	bne.n	8004148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	4b41      	ldr	r3, [pc, #260]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <HAL_RCC_OscConfig+0x152>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d001      	beq.n	8004132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e1c7      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	4937      	ldr	r1, [pc, #220]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004142:	4313      	orrs	r3, r2
 8004144:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004146:	e03a      	b.n	80041be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d020      	beq.n	8004192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004150:	4b34      	ldr	r3, [pc, #208]	@ (8004224 <HAL_RCC_OscConfig+0x244>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004156:	f7fe ff21 	bl	8002f9c <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415e:	f7fe ff1d 	bl	8002f9c <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1a8      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004170:	4b2b      	ldr	r3, [pc, #172]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800417c:	4b28      	ldr	r3, [pc, #160]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4925      	ldr	r1, [pc, #148]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]
 8004190:	e015      	b.n	80041be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004192:	4b24      	ldr	r3, [pc, #144]	@ (8004224 <HAL_RCC_OscConfig+0x244>)
 8004194:	2200      	movs	r2, #0
 8004196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004198:	f7fe ff00 	bl	8002f9c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a0:	f7fe fefc 	bl	8002f9c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e187      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d036      	beq.n	8004238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <HAL_RCC_OscConfig+0x248>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d8:	f7fe fee0 	bl	8002f9c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e0:	f7fe fedc 	bl	8002f9c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e167      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCC_OscConfig+0x240>)
 80041f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x200>
 80041fe:	e01b      	b.n	8004238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004200:	4b09      	ldr	r3, [pc, #36]	@ (8004228 <HAL_RCC_OscConfig+0x248>)
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004206:	f7fe fec9 	bl	8002f9c <HAL_GetTick>
 800420a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800420c:	e00e      	b.n	800422c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420e:	f7fe fec5 	bl	8002f9c <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d907      	bls.n	800422c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e150      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
 8004220:	40023800 	.word	0x40023800
 8004224:	42470000 	.word	0x42470000
 8004228:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800422c:	4b88      	ldr	r3, [pc, #544]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800422e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1ea      	bne.n	800420e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8097 	beq.w	8004374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004246:	2300      	movs	r3, #0
 8004248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424a:	4b81      	ldr	r3, [pc, #516]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10f      	bne.n	8004276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	60bb      	str	r3, [r7, #8]
 800425a:	4b7d      	ldr	r3, [pc, #500]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425e:	4a7c      	ldr	r2, [pc, #496]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 8004260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004264:	6413      	str	r3, [r2, #64]	@ 0x40
 8004266:	4b7a      	ldr	r3, [pc, #488]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004272:	2301      	movs	r3, #1
 8004274:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b77      	ldr	r3, [pc, #476]	@ (8004454 <HAL_RCC_OscConfig+0x474>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d118      	bne.n	80042b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004282:	4b74      	ldr	r3, [pc, #464]	@ (8004454 <HAL_RCC_OscConfig+0x474>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a73      	ldr	r2, [pc, #460]	@ (8004454 <HAL_RCC_OscConfig+0x474>)
 8004288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800428c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428e:	f7fe fe85 	bl	8002f9c <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004296:	f7fe fe81 	bl	8002f9c <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e10c      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a8:	4b6a      	ldr	r3, [pc, #424]	@ (8004454 <HAL_RCC_OscConfig+0x474>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d106      	bne.n	80042ca <HAL_RCC_OscConfig+0x2ea>
 80042bc:	4b64      	ldr	r3, [pc, #400]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c0:	4a63      	ldr	r2, [pc, #396]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c8:	e01c      	b.n	8004304 <HAL_RCC_OscConfig+0x324>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d10c      	bne.n	80042ec <HAL_RCC_OscConfig+0x30c>
 80042d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d6:	4a5e      	ldr	r2, [pc, #376]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042d8:	f043 0304 	orr.w	r3, r3, #4
 80042dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042de:	4b5c      	ldr	r3, [pc, #368]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 0301 	orr.w	r3, r3, #1
 80042e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ea:	e00b      	b.n	8004304 <HAL_RCC_OscConfig+0x324>
 80042ec:	4b58      	ldr	r3, [pc, #352]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f0:	4a57      	ldr	r2, [pc, #348]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f8:	4b55      	ldr	r3, [pc, #340]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	4a54      	ldr	r2, [pc, #336]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 0304 	bic.w	r3, r3, #4
 8004302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d015      	beq.n	8004338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430c:	f7fe fe46 	bl	8002f9c <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004312:	e00a      	b.n	800432a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004314:	f7fe fe42 	bl	8002f9c <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0cb      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432a:	4b49      	ldr	r3, [pc, #292]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800432c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ee      	beq.n	8004314 <HAL_RCC_OscConfig+0x334>
 8004336:	e014      	b.n	8004362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004338:	f7fe fe30 	bl	8002f9c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800433e:	e00a      	b.n	8004356 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004340:	f7fe fe2c 	bl	8002f9c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e0b5      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004356:	4b3e      	ldr	r3, [pc, #248]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 8004358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1ee      	bne.n	8004340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004368:	4b39      	ldr	r3, [pc, #228]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	4a38      	ldr	r2, [pc, #224]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a1 	beq.w	80044c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800437e:	4b34      	ldr	r3, [pc, #208]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b08      	cmp	r3, #8
 8004388:	d05c      	beq.n	8004444 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d141      	bne.n	8004416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004392:	4b31      	ldr	r3, [pc, #196]	@ (8004458 <HAL_RCC_OscConfig+0x478>)
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fe fe00 	bl	8002f9c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7fe fdfc 	bl	8002f9c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e087      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b2:	4b27      	ldr	r3, [pc, #156]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	69da      	ldr	r2, [r3, #28]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	019b      	lsls	r3, r3, #6
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	3b01      	subs	r3, #1
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	491b      	ldr	r1, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <HAL_RCC_OscConfig+0x478>)
 80043ea:	2201      	movs	r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ee:	f7fe fdd5 	bl	8002f9c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fe fdd1 	bl	8002f9c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e05c      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004408:	4b11      	ldr	r3, [pc, #68]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0f0      	beq.n	80043f6 <HAL_RCC_OscConfig+0x416>
 8004414:	e054      	b.n	80044c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004416:	4b10      	ldr	r3, [pc, #64]	@ (8004458 <HAL_RCC_OscConfig+0x478>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fe fdbe 	bl	8002f9c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fe fdba 	bl	8002f9c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e045      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_OscConfig+0x470>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x444>
 8004442:	e03d      	b.n	80044c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e038      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
 8004450:	40023800 	.word	0x40023800
 8004454:	40007000 	.word	0x40007000
 8004458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800445c:	4b1b      	ldr	r3, [pc, #108]	@ (80044cc <HAL_RCC_OscConfig+0x4ec>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d028      	beq.n	80044bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d121      	bne.n	80044bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d11a      	bne.n	80044bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800448c:	4013      	ands	r3, r2
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004494:	4293      	cmp	r3, r2
 8004496:	d111      	bne.n	80044bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	3b01      	subs	r3, #1
 80044a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d107      	bne.n	80044bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800

080044d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0cc      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044e4:	4b68      	ldr	r3, [pc, #416]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d90c      	bls.n	800450c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f2:	4b65      	ldr	r3, [pc, #404]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	b2d2      	uxtb	r2, r2
 80044f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b63      	ldr	r3, [pc, #396]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0b8      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004524:	4b59      	ldr	r3, [pc, #356]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a58      	ldr	r2, [pc, #352]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800452e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800453c:	4b53      	ldr	r3, [pc, #332]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4a52      	ldr	r2, [pc, #328]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004548:	4b50      	ldr	r3, [pc, #320]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	494d      	ldr	r1, [pc, #308]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d044      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d107      	bne.n	800457e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800456e:	4b47      	ldr	r3, [pc, #284]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d119      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e07f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d003      	beq.n	800458e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	2b03      	cmp	r3, #3
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458e:	4b3f      	ldr	r3, [pc, #252]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e06f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800459e:	4b3b      	ldr	r3, [pc, #236]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e067      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ae:	4b37      	ldr	r3, [pc, #220]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f023 0203 	bic.w	r2, r3, #3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	4934      	ldr	r1, [pc, #208]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fe fcec 	bl	8002f9c <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c6:	e00a      	b.n	80045de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045c8:	f7fe fce8 	bl	8002f9c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e04f      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	4b2b      	ldr	r3, [pc, #172]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 020c 	and.w	r2, r3, #12
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d1eb      	bne.n	80045c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045f0:	4b25      	ldr	r3, [pc, #148]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d20c      	bcs.n	8004618 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	4b22      	ldr	r3, [pc, #136]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004606:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	429a      	cmp	r2, r3
 8004612:	d001      	beq.n	8004618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e032      	b.n	800467e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b19      	ldr	r3, [pc, #100]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4916      	ldr	r1, [pc, #88]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d009      	beq.n	8004656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004642:	4b12      	ldr	r3, [pc, #72]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	490e      	ldr	r1, [pc, #56]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004656:	f000 f821 	bl	800469c <HAL_RCC_GetSysClockFreq>
 800465a:	4602      	mov	r2, r0
 800465c:	4b0b      	ldr	r3, [pc, #44]	@ (800468c <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	490a      	ldr	r1, [pc, #40]	@ (8004690 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	5ccb      	ldrb	r3, [r1, r3]
 800466a:	fa22 f303 	lsr.w	r3, r2, r3
 800466e:	4a09      	ldr	r2, [pc, #36]	@ (8004694 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004672:	4b09      	ldr	r3, [pc, #36]	@ (8004698 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe f9b2 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023c00 	.word	0x40023c00
 800468c:	40023800 	.word	0x40023800
 8004690:	0800ead0 	.word	0x0800ead0
 8004694:	20000004 	.word	0x20000004
 8004698:	20000008 	.word	0x20000008

0800469c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800469c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046a0:	b094      	sub	sp, #80	@ 0x50
 80046a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046b4:	4b79      	ldr	r3, [pc, #484]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 030c 	and.w	r3, r3, #12
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d00d      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x40>
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	f200 80e1 	bhi.w	8004888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d002      	beq.n	80046d0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d003      	beq.n	80046d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ce:	e0db      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046d0:	4b73      	ldr	r3, [pc, #460]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80046d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046d4:	e0db      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046d6:	4b73      	ldr	r3, [pc, #460]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80046d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046da:	e0d8      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046dc:	4b6f      	ldr	r3, [pc, #444]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046e6:	4b6d      	ldr	r3, [pc, #436]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d063      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f2:	4b6a      	ldr	r3, [pc, #424]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	2200      	movs	r2, #0
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004704:	633b      	str	r3, [r7, #48]	@ 0x30
 8004706:	2300      	movs	r3, #0
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
 800470a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	0159      	lsls	r1, r3, #5
 800471c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004720:	0150      	lsls	r0, r2, #5
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4621      	mov	r1, r4
 8004728:	1a51      	subs	r1, r2, r1
 800472a:	6139      	str	r1, [r7, #16]
 800472c:	4629      	mov	r1, r5
 800472e:	eb63 0301 	sbc.w	r3, r3, r1
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	f04f 0300 	mov.w	r3, #0
 800473c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004740:	4659      	mov	r1, fp
 8004742:	018b      	lsls	r3, r1, #6
 8004744:	4651      	mov	r1, sl
 8004746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800474a:	4651      	mov	r1, sl
 800474c:	018a      	lsls	r2, r1, #6
 800474e:	4651      	mov	r1, sl
 8004750:	ebb2 0801 	subs.w	r8, r2, r1
 8004754:	4659      	mov	r1, fp
 8004756:	eb63 0901 	sbc.w	r9, r3, r1
 800475a:	f04f 0200 	mov.w	r2, #0
 800475e:	f04f 0300 	mov.w	r3, #0
 8004762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800476a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800476e:	4690      	mov	r8, r2
 8004770:	4699      	mov	r9, r3
 8004772:	4623      	mov	r3, r4
 8004774:	eb18 0303 	adds.w	r3, r8, r3
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	462b      	mov	r3, r5
 800477c:	eb49 0303 	adc.w	r3, r9, r3
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800478e:	4629      	mov	r1, r5
 8004790:	024b      	lsls	r3, r1, #9
 8004792:	4621      	mov	r1, r4
 8004794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004798:	4621      	mov	r1, r4
 800479a:	024a      	lsls	r2, r1, #9
 800479c:	4610      	mov	r0, r2
 800479e:	4619      	mov	r1, r3
 80047a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047a2:	2200      	movs	r2, #0
 80047a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047ac:	f7fc fa6c 	bl	8000c88 <__aeabi_uldivmod>
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4613      	mov	r3, r2
 80047b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b8:	e058      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ba:	4b38      	ldr	r3, [pc, #224]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	099b      	lsrs	r3, r3, #6
 80047c0:	2200      	movs	r2, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	4611      	mov	r1, r2
 80047c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ca:	623b      	str	r3, [r7, #32]
 80047cc:	2300      	movs	r3, #0
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047d4:	4642      	mov	r2, r8
 80047d6:	464b      	mov	r3, r9
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f04f 0100 	mov.w	r1, #0
 80047e0:	0159      	lsls	r1, r3, #5
 80047e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e6:	0150      	lsls	r0, r2, #5
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4641      	mov	r1, r8
 80047ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800480c:	ebb2 040a 	subs.w	r4, r2, sl
 8004810:	eb63 050b 	sbc.w	r5, r3, fp
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	00eb      	lsls	r3, r5, #3
 800481e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004822:	00e2      	lsls	r2, r4, #3
 8004824:	4614      	mov	r4, r2
 8004826:	461d      	mov	r5, r3
 8004828:	4643      	mov	r3, r8
 800482a:	18e3      	adds	r3, r4, r3
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	464b      	mov	r3, r9
 8004830:	eb45 0303 	adc.w	r3, r5, r3
 8004834:	607b      	str	r3, [r7, #4]
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004842:	4629      	mov	r1, r5
 8004844:	028b      	lsls	r3, r1, #10
 8004846:	4621      	mov	r1, r4
 8004848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800484c:	4621      	mov	r1, r4
 800484e:	028a      	lsls	r2, r1, #10
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004856:	2200      	movs	r2, #0
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	61fa      	str	r2, [r7, #28]
 800485c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004860:	f7fc fa12 	bl	8000c88 <__aeabi_uldivmod>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4613      	mov	r3, r2
 800486a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <HAL_RCC_GetSysClockFreq+0x200>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	3301      	adds	r3, #1
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800487c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800487e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004886:	e002      	b.n	800488e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004888:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800488a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800488c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800488e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004890:	4618      	mov	r0, r3
 8004892:	3750      	adds	r7, #80	@ 0x50
 8004894:	46bd      	mov	sp, r7
 8004896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ac:	4b03      	ldr	r3, [pc, #12]	@ (80048bc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000004 	.word	0x20000004

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048c4:	f7ff fff0 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0a9b      	lsrs	r3, r3, #10
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	@ (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40023800 	.word	0x40023800
 80048e4:	0800eae0 	.word	0x0800eae0

080048e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048ec:	f7ff ffdc 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	@ (8004908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	0b5b      	lsrs	r3, r3, #13
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	@ (800490c <HAL_RCC_GetPCLK2Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40023800 	.word	0x40023800
 800490c:	0800eae0 	.word	0x0800eae0

08004910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	220f      	movs	r2, #15
 800491e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004920:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f003 0203 	and.w	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800492c:	4b0f      	ldr	r3, [pc, #60]	@ (800496c <HAL_RCC_GetClockConfig+0x5c>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <HAL_RCC_GetClockConfig+0x5c>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004944:	4b09      	ldr	r3, [pc, #36]	@ (800496c <HAL_RCC_GetClockConfig+0x5c>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	08db      	lsrs	r3, r3, #3
 800494a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <HAL_RCC_GetClockConfig+0x60>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0207 	and.w	r2, r3, #7
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800
 8004970:	40023c00 	.word	0x40023c00

08004974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e041      	b.n	8004a0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f839 	bl	8004a12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f000 fb9a 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d001      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e04e      	b.n	8004ade <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0201 	orr.w	r2, r2, #1
 8004a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a23      	ldr	r2, [pc, #140]	@ (8004aec <HAL_TIM_Base_Start_IT+0xc4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d022      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a6a:	d01d      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d018      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004af4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d013      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00e      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_TIM_Base_Start_IT+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d009      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x80>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a18      	ldr	r2, [pc, #96]	@ (8004b04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d111      	bne.n	8004acc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b06      	cmp	r3, #6
 8004ab8:	d010      	beq.n	8004adc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0201 	orr.w	r2, r2, #1
 8004ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	e007      	b.n	8004adc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40001800 	.word	0x40001800

08004b08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e041      	b.n	8004b9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fd feb2 	bl	8002898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f000 fad0 	bl	80050ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <HAL_TIM_PWM_Start+0x24>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e022      	b.n	8004c12 <HAL_TIM_PWM_Start+0x6a>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d109      	bne.n	8004be6 <HAL_TIM_PWM_Start+0x3e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	bf14      	ite	ne
 8004bde:	2301      	movne	r3, #1
 8004be0:	2300      	moveq	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	e015      	b.n	8004c12 <HAL_TIM_PWM_Start+0x6a>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d109      	bne.n	8004c00 <HAL_TIM_PWM_Start+0x58>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e008      	b.n	8004c12 <HAL_TIM_PWM_Start+0x6a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	bf14      	ite	ne
 8004c0c:	2301      	movne	r3, #1
 8004c0e:	2300      	moveq	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e07c      	b.n	8004d14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x82>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c28:	e013      	b.n	8004c52 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d104      	bne.n	8004c3a <HAL_TIM_PWM_Start+0x92>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c38:	e00b      	b.n	8004c52 <HAL_TIM_PWM_Start+0xaa>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d104      	bne.n	8004c4a <HAL_TIM_PWM_Start+0xa2>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c48:	e003      	b.n	8004c52 <HAL_TIM_PWM_Start+0xaa>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	6839      	ldr	r1, [r7, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fc9c 	bl	8005598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2d      	ldr	r2, [pc, #180]	@ (8004d1c <HAL_TIM_PWM_Start+0x174>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_PWM_Start+0xcc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d20 <HAL_TIM_PWM_Start+0x178>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <HAL_TIM_PWM_Start+0xd0>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <HAL_TIM_PWM_Start+0xd2>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c8c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a22      	ldr	r2, [pc, #136]	@ (8004d1c <HAL_TIM_PWM_Start+0x174>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca0:	d01d      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d24 <HAL_TIM_PWM_Start+0x17c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <HAL_TIM_PWM_Start+0x180>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1c      	ldr	r2, [pc, #112]	@ (8004d2c <HAL_TIM_PWM_Start+0x184>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a16      	ldr	r2, [pc, #88]	@ (8004d20 <HAL_TIM_PWM_Start+0x178>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a18      	ldr	r2, [pc, #96]	@ (8004d30 <HAL_TIM_PWM_Start+0x188>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_TIM_PWM_Start+0x136>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a16      	ldr	r2, [pc, #88]	@ (8004d34 <HAL_TIM_PWM_Start+0x18c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d111      	bne.n	8004d02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d010      	beq.n	8004d12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d00:	e007      	b.n	8004d12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0201 	orr.w	r2, r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40000400 	.word	0x40000400
 8004d28:	40000800 	.word	0x40000800
 8004d2c:	40000c00 	.word	0x40000c00
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40001800 	.word	0x40001800

08004d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d020      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01b      	beq.n	8004d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0202 	mvn.w	r2, #2
 8004d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f994 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f986 	bl	800509c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f997 	bl	80050c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d020      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0204 	mvn.w	r2, #4
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f96e 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f960 	bl	800509c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f971 	bl	80050c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d020      	beq.n	8004e34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d01b      	beq.n	8004e34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0208 	mvn.w	r2, #8
 8004e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f948 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 8004e20:	e005      	b.n	8004e2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f93a 	bl	800509c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f94b 	bl	80050c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0210 	mvn.w	r2, #16
 8004e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2208      	movs	r2, #8
 8004e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f922 	bl	80050b0 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f914 	bl	800509c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f925 	bl	80050c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00c      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0201 	mvn.w	r2, #1
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fd f9f4 	bl	800228c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 fc14 	bl	80056f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00c      	beq.n	8004eec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8f6 	bl	80050d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0220 	mvn.w	r2, #32
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fbe6 	bl	80056dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f24:	2300      	movs	r3, #0
 8004f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e0ae      	b.n	8005094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	f200 809f 	bhi.w	8005084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f46:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08005085 	.word	0x08005085
 8004f54:	08005085 	.word	0x08005085
 8004f58:	08005085 	.word	0x08005085
 8004f5c:	08004fc1 	.word	0x08004fc1
 8004f60:	08005085 	.word	0x08005085
 8004f64:	08005085 	.word	0x08005085
 8004f68:	08005085 	.word	0x08005085
 8004f6c:	08005003 	.word	0x08005003
 8004f70:	08005085 	.word	0x08005085
 8004f74:	08005085 	.word	0x08005085
 8004f78:	08005085 	.word	0x08005085
 8004f7c:	08005043 	.word	0x08005043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68b9      	ldr	r1, [r7, #8]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f956 	bl	8005238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699a      	ldr	r2, [r3, #24]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0208 	orr.w	r2, r2, #8
 8004f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0204 	bic.w	r2, r2, #4
 8004faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6999      	ldr	r1, [r3, #24]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	619a      	str	r2, [r3, #24]
      break;
 8004fbe:	e064      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 f9a6 	bl	8005318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	699a      	ldr	r2, [r3, #24]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	021a      	lsls	r2, r3, #8
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	619a      	str	r2, [r3, #24]
      break;
 8005000:	e043      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68b9      	ldr	r1, [r7, #8]
 8005008:	4618      	mov	r0, r3
 800500a:	f000 f9fb 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69da      	ldr	r2, [r3, #28]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0208 	orr.w	r2, r2, #8
 800501c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	69da      	ldr	r2, [r3, #28]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0204 	bic.w	r2, r2, #4
 800502c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	430a      	orrs	r2, r1
 800503e:	61da      	str	r2, [r3, #28]
      break;
 8005040:	e023      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fa4f 	bl	80054ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800505c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800506c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69d9      	ldr	r1, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	021a      	lsls	r2, r3, #8
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	61da      	str	r2, [r3, #28]
      break;
 8005082:	e002      	b.n	800508a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      break;
 8005088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3718      	adds	r7, #24
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a43      	ldr	r2, [pc, #268]	@ (800520c <TIM_Base_SetConfig+0x120>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d013      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510a:	d00f      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a40      	ldr	r2, [pc, #256]	@ (8005210 <TIM_Base_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d00b      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a3f      	ldr	r2, [pc, #252]	@ (8005214 <TIM_Base_SetConfig+0x128>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a3e      	ldr	r2, [pc, #248]	@ (8005218 <TIM_Base_SetConfig+0x12c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3d      	ldr	r2, [pc, #244]	@ (800521c <TIM_Base_SetConfig+0x130>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d108      	bne.n	800513e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a32      	ldr	r2, [pc, #200]	@ (800520c <TIM_Base_SetConfig+0x120>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02b      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800514c:	d027      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a2f      	ldr	r2, [pc, #188]	@ (8005210 <TIM_Base_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d023      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2e      	ldr	r2, [pc, #184]	@ (8005214 <TIM_Base_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01f      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a2d      	ldr	r2, [pc, #180]	@ (8005218 <TIM_Base_SetConfig+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d01b      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2c      	ldr	r2, [pc, #176]	@ (800521c <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d017      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	@ (8005220 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	@ (8005224 <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00f      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a29      	ldr	r2, [pc, #164]	@ (8005228 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00b      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a28      	ldr	r2, [pc, #160]	@ (800522c <TIM_Base_SetConfig+0x140>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a27      	ldr	r2, [pc, #156]	@ (8005230 <TIM_Base_SetConfig+0x144>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a26      	ldr	r2, [pc, #152]	@ (8005234 <TIM_Base_SetConfig+0x148>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d108      	bne.n	80051b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	689a      	ldr	r2, [r3, #8]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <TIM_Base_SetConfig+0x120>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d003      	beq.n	80051de <TIM_Base_SetConfig+0xf2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a10      	ldr	r2, [pc, #64]	@ (800521c <TIM_Base_SetConfig+0x130>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d103      	bne.n	80051e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f043 0204 	orr.w	r2, r3, #4
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800
 800522c:	40001800 	.word	0x40001800
 8005230:	40001c00 	.word	0x40001c00
 8005234:	40002000 	.word	0x40002000

08005238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 0201 	bic.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 0302 	bic.w	r3, r3, #2
 8005280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a20      	ldr	r2, [pc, #128]	@ (8005310 <TIM_OC1_SetConfig+0xd8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_OC1_SetConfig+0x64>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <TIM_OC1_SetConfig+0xdc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d10c      	bne.n	80052b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 0308 	bic.w	r3, r3, #8
 80052a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0304 	bic.w	r3, r3, #4
 80052b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a15      	ldr	r2, [pc, #84]	@ (8005310 <TIM_OC1_SetConfig+0xd8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <TIM_OC1_SetConfig+0x8e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a14      	ldr	r2, [pc, #80]	@ (8005314 <TIM_OC1_SetConfig+0xdc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d111      	bne.n	80052ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40010000 	.word	0x40010000
 8005314:	40010400 	.word	0x40010400

08005318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005318:	b480      	push	{r7}
 800531a:	b087      	sub	sp, #28
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 0210 	bic.w	r2, r3, #16
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	021b      	lsls	r3, r3, #8
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f023 0320 	bic.w	r3, r3, #32
 8005362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a22      	ldr	r2, [pc, #136]	@ (80053fc <TIM_OC2_SetConfig+0xe4>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d003      	beq.n	8005380 <TIM_OC2_SetConfig+0x68>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <TIM_OC2_SetConfig+0xe8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d10d      	bne.n	800539c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800539a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a17      	ldr	r2, [pc, #92]	@ (80053fc <TIM_OC2_SetConfig+0xe4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_OC2_SetConfig+0x94>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a16      	ldr	r2, [pc, #88]	@ (8005400 <TIM_OC2_SetConfig+0xe8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d113      	bne.n	80053d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a21      	ldr	r2, [pc, #132]	@ (80054e4 <TIM_OC3_SetConfig+0xe0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC3_SetConfig+0x66>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a20      	ldr	r2, [pc, #128]	@ (80054e8 <TIM_OC3_SetConfig+0xe4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10d      	bne.n	8005486 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a16      	ldr	r2, [pc, #88]	@ (80054e4 <TIM_OC3_SetConfig+0xe0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3_SetConfig+0x92>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <TIM_OC3_SetConfig+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d113      	bne.n	80054be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40010400 	.word	0x40010400

080054ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	021b      	lsls	r3, r3, #8
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a12      	ldr	r2, [pc, #72]	@ (8005590 <TIM_OC4_SetConfig+0xa4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d003      	beq.n	8005554 <TIM_OC4_SetConfig+0x68>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a11      	ldr	r2, [pc, #68]	@ (8005594 <TIM_OC4_SetConfig+0xa8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d109      	bne.n	8005568 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800555a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	019b      	lsls	r3, r3, #6
 8005562:	697a      	ldr	r2, [r7, #20]
 8005564:	4313      	orrs	r3, r2
 8005566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400

08005598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2201      	movs	r2, #1
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6a1a      	ldr	r2, [r3, #32]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	43db      	mvns	r3, r3
 80055ba:	401a      	ands	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f003 031f 	and.w	r3, r3, #31
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	431a      	orrs	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
	...

080055e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d101      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f8:	2302      	movs	r3, #2
 80055fa:	e05a      	b.n	80056b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a21      	ldr	r2, [pc, #132]	@ (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d022      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d01d      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d018      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d013      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1a      	ldr	r2, [pc, #104]	@ (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00e      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d009      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a17      	ldr	r2, [pc, #92]	@ (80056d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d004      	beq.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a15      	ldr	r2, [pc, #84]	@ (80056d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d10c      	bne.n	80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4313      	orrs	r3, r2
 8005696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40010400 	.word	0x40010400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40001800 	.word	0x40001800

080056dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e04d      	b.n	80057b2 <HAL_UART_Init+0xae>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d111      	bne.n	8005746 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f930 	bl	8005990 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a20      	ldr	r2, [pc, #128]	@ (80057bc <HAL_UART_Init+0xb8>)
 800573c:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	@ 0x24
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800575c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa0a 	bl	8005b78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005772:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005782:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005792:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	08002951 	.word	0x08002951

080057c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b08a      	sub	sp, #40	@ 0x28
 80057c4:	af02      	add	r7, sp, #8
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	4613      	mov	r3, r2
 80057ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d175      	bne.n	80058cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Transmit+0x2c>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e06e      	b.n	80058ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2221      	movs	r2, #33	@ 0x21
 80057fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057fe:	f7fd fbcd 	bl	8002f9c <HAL_GetTick>
 8005802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	88fa      	ldrh	r2, [r7, #6]
 800580e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005818:	d108      	bne.n	800582c <HAL_UART_Transmit+0x6c>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d104      	bne.n	800582c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	e003      	b.n	8005834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005834:	e02e      	b.n	8005894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	2180      	movs	r1, #128	@ 0x80
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f000 f8dd 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d005      	beq.n	8005858 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e03a      	b.n	80058ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10b      	bne.n	8005876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	881b      	ldrh	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800586c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	3302      	adds	r3, #2
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	e007      	b.n	8005886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	781a      	ldrb	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	3301      	adds	r3, #1
 8005884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005898:	b29b      	uxth	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1cb      	bne.n	8005836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2140      	movs	r1, #64	@ 0x40
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f8a9 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d005      	beq.n	80058c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e006      	b.n	80058ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	e000      	b.n	80058ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058cc:	2302      	movs	r3, #2
  }
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a10      	ldr	r2, [pc, #64]	@ (80059dc <UART_InitCallbacksToDefault+0x4c>)
 800599c:	649a      	str	r2, [r3, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a0f      	ldr	r2, [pc, #60]	@ (80059e0 <UART_InitCallbacksToDefault+0x50>)
 80059a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <UART_InitCallbacksToDefault+0x54>)
 80059a8:	651a      	str	r2, [r3, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a0e      	ldr	r2, [pc, #56]	@ (80059e8 <UART_InitCallbacksToDefault+0x58>)
 80059ae:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a0e      	ldr	r2, [pc, #56]	@ (80059ec <UART_InitCallbacksToDefault+0x5c>)
 80059b4:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a0d      	ldr	r2, [pc, #52]	@ (80059f0 <UART_InitCallbacksToDefault+0x60>)
 80059ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a0d      	ldr	r2, [pc, #52]	@ (80059f4 <UART_InitCallbacksToDefault+0x64>)
 80059c0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a0c      	ldr	r2, [pc, #48]	@ (80059f8 <UART_InitCallbacksToDefault+0x68>)
 80059c6:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a0c      	ldr	r2, [pc, #48]	@ (80059fc <UART_InitCallbacksToDefault+0x6c>)
 80059cc:	66da      	str	r2, [r3, #108]	@ 0x6c

}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	080058eb 	.word	0x080058eb
 80059e0:	080058d7 	.word	0x080058d7
 80059e4:	08005913 	.word	0x08005913
 80059e8:	080058ff 	.word	0x080058ff
 80059ec:	08005927 	.word	0x08005927
 80059f0:	0800593b 	.word	0x0800593b
 80059f4:	0800594f 	.word	0x0800594f
 80059f8:	08005963 	.word	0x08005963
 80059fc:	08005977 	.word	0x08005977

08005a00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a10:	e03b      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d037      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fd fabf 	bl	8002f9c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e03a      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d023      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d020      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d01d      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d116      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f81d 	bl	8005ab2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0b4      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b095      	sub	sp, #84	@ 0x54
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ada:	643a      	str	r2, [r7, #64]	@ 0x40
 8005adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ae0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e5      	bne.n	8005aba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3314      	adds	r3, #20
 8005af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f023 0301 	bic.w	r3, r3, #1
 8005b04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	3314      	adds	r3, #20
 8005b0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e5      	bne.n	8005aee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d119      	bne.n	8005b5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	330c      	adds	r3, #12
 8005b30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	e853 3f00 	ldrex	r3, [r3]
 8005b38:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f023 0310 	bic.w	r3, r3, #16
 8005b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b4a:	61ba      	str	r2, [r7, #24]
 8005b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	6979      	ldr	r1, [r7, #20]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	613b      	str	r3, [r7, #16]
   return(result);
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e5      	bne.n	8005b2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b6c:	bf00      	nop
 8005b6e:	3754      	adds	r7, #84	@ 0x54
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b7c:	b0c0      	sub	sp, #256	@ 0x100
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	68d9      	ldr	r1, [r3, #12]
 8005b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	ea40 0301 	orr.w	r3, r0, r1
 8005ba0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bd0:	f021 010c 	bic.w	r1, r1, #12
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005bde:	430b      	orrs	r3, r1
 8005be0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf2:	6999      	ldr	r1, [r3, #24]
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	ea40 0301 	orr.w	r3, r0, r1
 8005bfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	4b8f      	ldr	r3, [pc, #572]	@ (8005e44 <UART_SetConfig+0x2cc>)
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d005      	beq.n	8005c18 <UART_SetConfig+0xa0>
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	4b8d      	ldr	r3, [pc, #564]	@ (8005e48 <UART_SetConfig+0x2d0>)
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d104      	bne.n	8005c22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c18:	f7fe fe66 	bl	80048e8 <HAL_RCC_GetPCLK2Freq>
 8005c1c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c20:	e003      	b.n	8005c2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c22:	f7fe fe4d 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8005c26:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c34:	f040 810c 	bne.w	8005e50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c42:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c4a:	4622      	mov	r2, r4
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	1891      	adds	r1, r2, r2
 8005c50:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c52:	415b      	adcs	r3, r3
 8005c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c5a:	4621      	mov	r1, r4
 8005c5c:	eb12 0801 	adds.w	r8, r2, r1
 8005c60:	4629      	mov	r1, r5
 8005c62:	eb43 0901 	adc.w	r9, r3, r1
 8005c66:	f04f 0200 	mov.w	r2, #0
 8005c6a:	f04f 0300 	mov.w	r3, #0
 8005c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c7a:	4690      	mov	r8, r2
 8005c7c:	4699      	mov	r9, r3
 8005c7e:	4623      	mov	r3, r4
 8005c80:	eb18 0303 	adds.w	r3, r8, r3
 8005c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c88:	462b      	mov	r3, r5
 8005c8a:	eb49 0303 	adc.w	r3, r9, r3
 8005c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c9e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ca2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	18db      	adds	r3, r3, r3
 8005caa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cac:	4613      	mov	r3, r2
 8005cae:	eb42 0303 	adc.w	r3, r2, r3
 8005cb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cbc:	f7fa ffe4 	bl	8000c88 <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4b61      	ldr	r3, [pc, #388]	@ (8005e4c <UART_SetConfig+0x2d4>)
 8005cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	011c      	lsls	r4, r3, #4
 8005cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cd8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005cdc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ce0:	4642      	mov	r2, r8
 8005ce2:	464b      	mov	r3, r9
 8005ce4:	1891      	adds	r1, r2, r2
 8005ce6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ce8:	415b      	adcs	r3, r3
 8005cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cf0:	4641      	mov	r1, r8
 8005cf2:	eb12 0a01 	adds.w	sl, r2, r1
 8005cf6:	4649      	mov	r1, r9
 8005cf8:	eb43 0b01 	adc.w	fp, r3, r1
 8005cfc:	f04f 0200 	mov.w	r2, #0
 8005d00:	f04f 0300 	mov.w	r3, #0
 8005d04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d10:	4692      	mov	sl, r2
 8005d12:	469b      	mov	fp, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	eb1a 0303 	adds.w	r3, sl, r3
 8005d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d1e:	464b      	mov	r3, r9
 8005d20:	eb4b 0303 	adc.w	r3, fp, r3
 8005d24:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d34:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	18db      	adds	r3, r3, r3
 8005d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d42:	4613      	mov	r3, r2
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d52:	f7fa ff99 	bl	8000c88 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e4c <UART_SetConfig+0x2d4>)
 8005d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2264      	movs	r2, #100	@ 0x64
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	1acb      	subs	r3, r1, r3
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d72:	4b36      	ldr	r3, [pc, #216]	@ (8005e4c <UART_SetConfig+0x2d4>)
 8005d74:	fba3 2302 	umull	r2, r3, r3, r2
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d80:	441c      	add	r4, r3
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d86:	2200      	movs	r2, #0
 8005d88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d8c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d94:	4642      	mov	r2, r8
 8005d96:	464b      	mov	r3, r9
 8005d98:	1891      	adds	r1, r2, r2
 8005d9a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d9c:	415b      	adcs	r3, r3
 8005d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005da0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005da4:	4641      	mov	r1, r8
 8005da6:	1851      	adds	r1, r2, r1
 8005da8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005daa:	4649      	mov	r1, r9
 8005dac:	414b      	adcs	r3, r1
 8005dae:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dbc:	4659      	mov	r1, fp
 8005dbe:	00cb      	lsls	r3, r1, #3
 8005dc0:	4651      	mov	r1, sl
 8005dc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc6:	4651      	mov	r1, sl
 8005dc8:	00ca      	lsls	r2, r1, #3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	189b      	adds	r3, r3, r2
 8005dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dd8:	464b      	mov	r3, r9
 8005dda:	460a      	mov	r2, r1
 8005ddc:	eb42 0303 	adc.w	r3, r2, r3
 8005de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005df0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005df4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005df8:	460b      	mov	r3, r1
 8005dfa:	18db      	adds	r3, r3, r3
 8005dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dfe:	4613      	mov	r3, r2
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e0e:	f7fa ff3b 	bl	8000c88 <__aeabi_uldivmod>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <UART_SetConfig+0x2d4>)
 8005e18:	fba3 1302 	umull	r1, r3, r3, r2
 8005e1c:	095b      	lsrs	r3, r3, #5
 8005e1e:	2164      	movs	r1, #100	@ 0x64
 8005e20:	fb01 f303 	mul.w	r3, r1, r3
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	3332      	adds	r3, #50	@ 0x32
 8005e2a:	4a08      	ldr	r2, [pc, #32]	@ (8005e4c <UART_SetConfig+0x2d4>)
 8005e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	f003 0207 	and.w	r2, r3, #7
 8005e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4422      	add	r2, r4
 8005e3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e40:	e106      	b.n	8006050 <UART_SetConfig+0x4d8>
 8005e42:	bf00      	nop
 8005e44:	40011000 	.word	0x40011000
 8005e48:	40011400 	.word	0x40011400
 8005e4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e5a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e62:	4642      	mov	r2, r8
 8005e64:	464b      	mov	r3, r9
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	6239      	str	r1, [r7, #32]
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e72:	4641      	mov	r1, r8
 8005e74:	1854      	adds	r4, r2, r1
 8005e76:	4649      	mov	r1, r9
 8005e78:	eb43 0501 	adc.w	r5, r3, r1
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	00eb      	lsls	r3, r5, #3
 8005e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e8a:	00e2      	lsls	r2, r4, #3
 8005e8c:	4614      	mov	r4, r2
 8005e8e:	461d      	mov	r5, r3
 8005e90:	4643      	mov	r3, r8
 8005e92:	18e3      	adds	r3, r4, r3
 8005e94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e98:	464b      	mov	r3, r9
 8005e9a:	eb45 0303 	adc.w	r3, r5, r3
 8005e9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	f04f 0300 	mov.w	r3, #0
 8005eba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	008b      	lsls	r3, r1, #2
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ec8:	4621      	mov	r1, r4
 8005eca:	008a      	lsls	r2, r1, #2
 8005ecc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ed0:	f7fa feda 	bl	8000c88 <__aeabi_uldivmod>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	4b60      	ldr	r3, [pc, #384]	@ (800605c <UART_SetConfig+0x4e4>)
 8005eda:	fba3 2302 	umull	r2, r3, r3, r2
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	011c      	lsls	r4, r3, #4
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ef0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ef4:	4642      	mov	r2, r8
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	1891      	adds	r1, r2, r2
 8005efa:	61b9      	str	r1, [r7, #24]
 8005efc:	415b      	adcs	r3, r3
 8005efe:	61fb      	str	r3, [r7, #28]
 8005f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f04:	4641      	mov	r1, r8
 8005f06:	1851      	adds	r1, r2, r1
 8005f08:	6139      	str	r1, [r7, #16]
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	414b      	adcs	r3, r1
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f1c:	4659      	mov	r1, fp
 8005f1e:	00cb      	lsls	r3, r1, #3
 8005f20:	4651      	mov	r1, sl
 8005f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f26:	4651      	mov	r1, sl
 8005f28:	00ca      	lsls	r2, r1, #3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4603      	mov	r3, r0
 8005f30:	4642      	mov	r2, r8
 8005f32:	189b      	adds	r3, r3, r2
 8005f34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f38:	464b      	mov	r3, r9
 8005f3a:	460a      	mov	r2, r1
 8005f3c:	eb42 0303 	adc.w	r3, r2, r3
 8005f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f5c:	4649      	mov	r1, r9
 8005f5e:	008b      	lsls	r3, r1, #2
 8005f60:	4641      	mov	r1, r8
 8005f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f66:	4641      	mov	r1, r8
 8005f68:	008a      	lsls	r2, r1, #2
 8005f6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f6e:	f7fa fe8b 	bl	8000c88 <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	4b38      	ldr	r3, [pc, #224]	@ (800605c <UART_SetConfig+0x4e4>)
 8005f7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	2264      	movs	r2, #100	@ 0x64
 8005f82:	fb02 f303 	mul.w	r3, r2, r3
 8005f86:	1acb      	subs	r3, r1, r3
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	3332      	adds	r3, #50	@ 0x32
 8005f8c:	4a33      	ldr	r2, [pc, #204]	@ (800605c <UART_SetConfig+0x4e4>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f98:	441c      	add	r4, r3
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fa8:	4642      	mov	r2, r8
 8005faa:	464b      	mov	r3, r9
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb8:	4641      	mov	r1, r8
 8005fba:	1851      	adds	r1, r2, r1
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	414b      	adcs	r3, r1
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	f04f 0200 	mov.w	r2, #0
 8005fc8:	f04f 0300 	mov.w	r3, #0
 8005fcc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fd0:	4659      	mov	r1, fp
 8005fd2:	00cb      	lsls	r3, r1, #3
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fda:	4651      	mov	r1, sl
 8005fdc:	00ca      	lsls	r2, r1, #3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	189b      	adds	r3, r3, r2
 8005fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fea:	464b      	mov	r3, r9
 8005fec:	460a      	mov	r2, r1
 8005fee:	eb42 0303 	adc.w	r3, r2, r3
 8005ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ffe:	667a      	str	r2, [r7, #100]	@ 0x64
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800600c:	4649      	mov	r1, r9
 800600e:	008b      	lsls	r3, r1, #2
 8006010:	4641      	mov	r1, r8
 8006012:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006016:	4641      	mov	r1, r8
 8006018:	008a      	lsls	r2, r1, #2
 800601a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800601e:	f7fa fe33 	bl	8000c88 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <UART_SetConfig+0x4e4>)
 8006028:	fba3 1302 	umull	r1, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2164      	movs	r1, #100	@ 0x64
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	3332      	adds	r3, #50	@ 0x32
 800603a:	4a08      	ldr	r2, [pc, #32]	@ (800605c <UART_SetConfig+0x4e4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 020f 	and.w	r2, r3, #15
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4422      	add	r2, r4
 800604e:	609a      	str	r2, [r3, #8]
}
 8006050:	bf00      	nop
 8006052:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006056:	46bd      	mov	sp, r7
 8006058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605c:	51eb851f 	.word	0x51eb851f

08006060 <__NVIC_SetPriority>:
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	6039      	str	r1, [r7, #0]
 800606a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800606c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006070:	2b00      	cmp	r3, #0
 8006072:	db0a      	blt.n	800608a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	490c      	ldr	r1, [pc, #48]	@ (80060ac <__NVIC_SetPriority+0x4c>)
 800607a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800607e:	0112      	lsls	r2, r2, #4
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	440b      	add	r3, r1
 8006084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006088:	e00a      	b.n	80060a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	4908      	ldr	r1, [pc, #32]	@ (80060b0 <__NVIC_SetPriority+0x50>)
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	3b04      	subs	r3, #4
 8006098:	0112      	lsls	r2, r2, #4
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	440b      	add	r3, r1
 800609e:	761a      	strb	r2, [r3, #24]
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	e000e100 	.word	0xe000e100
 80060b0:	e000ed00 	.word	0xe000ed00

080060b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80060b8:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <SysTick_Handler+0x1c>)
 80060ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80060bc:	f002 fdd0 	bl	8008c60 <xTaskGetSchedulerState>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d001      	beq.n	80060ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80060c6:	f003 fcc7 	bl	8009a58 <xPortSysTickHandler>
  }
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	e000e010 	.word	0xe000e010

080060d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060d8:	2100      	movs	r1, #0
 80060da:	f06f 0004 	mvn.w	r0, #4
 80060de:	f7ff ffbf 	bl	8006060 <__NVIC_SetPriority>
#endif
}
 80060e2:	bf00      	nop
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ee:	f3ef 8305 	mrs	r3, IPSR
 80060f2:	603b      	str	r3, [r7, #0]
  return(result);
 80060f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060fa:	f06f 0305 	mvn.w	r3, #5
 80060fe:	607b      	str	r3, [r7, #4]
 8006100:	e00c      	b.n	800611c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006102:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <osKernelInitialize+0x44>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d105      	bne.n	8006116 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800610a:	4b08      	ldr	r3, [pc, #32]	@ (800612c <osKernelInitialize+0x44>)
 800610c:	2201      	movs	r2, #1
 800610e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006110:	2300      	movs	r3, #0
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	e002      	b.n	800611c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006116:	f04f 33ff 	mov.w	r3, #4294967295
 800611a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800611c:	687b      	ldr	r3, [r7, #4]
}
 800611e:	4618      	mov	r0, r3
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000454 	.word	0x20000454

08006130 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006136:	f3ef 8305 	mrs	r3, IPSR
 800613a:	603b      	str	r3, [r7, #0]
  return(result);
 800613c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006142:	f06f 0305 	mvn.w	r3, #5
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	e010      	b.n	800616c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800614a:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <osKernelStart+0x48>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d109      	bne.n	8006166 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006152:	f7ff ffbf 	bl	80060d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006156:	4b08      	ldr	r3, [pc, #32]	@ (8006178 <osKernelStart+0x48>)
 8006158:	2202      	movs	r2, #2
 800615a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800615c:	f002 f8fa 	bl	8008354 <vTaskStartScheduler>
      stat = osOK;
 8006160:	2300      	movs	r3, #0
 8006162:	607b      	str	r3, [r7, #4]
 8006164:	e002      	b.n	800616c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006166:	f04f 33ff 	mov.w	r3, #4294967295
 800616a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800616c:	687b      	ldr	r3, [r7, #4]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000454 	.word	0x20000454

0800617c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006182:	f3ef 8305 	mrs	r3, IPSR
 8006186:	603b      	str	r3, [r7, #0]
  return(result);
 8006188:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800618e:	f002 fa0d 	bl	80085ac <xTaskGetTickCountFromISR>
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	e002      	b.n	800619c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006196:	f002 f9f9 	bl	800858c <xTaskGetTickCount>
 800619a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800619c:	687b      	ldr	r3, [r7, #4]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b08e      	sub	sp, #56	@ 0x38
 80061aa:	af04      	add	r7, sp, #16
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061b6:	f3ef 8305 	mrs	r3, IPSR
 80061ba:	617b      	str	r3, [r7, #20]
  return(result);
 80061bc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d17e      	bne.n	80062c0 <osThreadNew+0x11a>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d07b      	beq.n	80062c0 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061cc:	2318      	movs	r3, #24
 80061ce:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061d0:	2300      	movs	r3, #0
 80061d2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80061d4:	f04f 33ff 	mov.w	r3, #4294967295
 80061d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d045      	beq.n	800626c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <osThreadNew+0x48>
        name = attr->name;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <osThreadNew+0x6e>
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	2b38      	cmp	r3, #56	@ 0x38
 8006206:	d805      	bhi.n	8006214 <osThreadNew+0x6e>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <osThreadNew+0x72>
        return (NULL);
 8006214:	2300      	movs	r3, #0
 8006216:	e054      	b.n	80062c2 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <osThreadNew+0xa8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2ba7      	cmp	r3, #167	@ 0xa7
 8006236:	d90a      	bls.n	800624e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <osThreadNew+0xa8>
        mem = 1;
 8006248:	2301      	movs	r3, #1
 800624a:	61bb      	str	r3, [r7, #24]
 800624c:	e010      	b.n	8006270 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10c      	bne.n	8006270 <osThreadNew+0xca>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <osThreadNew+0xca>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <osThreadNew+0xca>
          mem = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	e001      	b.n	8006270 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d110      	bne.n	8006298 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800627e:	9202      	str	r2, [sp, #8]
 8006280:	9301      	str	r3, [sp, #4]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	6a3a      	ldr	r2, [r7, #32]
 800628a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f001 fded 	bl	8007e6c <xTaskCreateStatic>
 8006292:	4603      	mov	r3, r0
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	e013      	b.n	80062c0 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d110      	bne.n	80062c0 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	f107 0310 	add.w	r3, r7, #16
 80062a6:	9301      	str	r3, [sp, #4]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f001 fe3b 	bl	8007f2c <xTaskCreate>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d001      	beq.n	80062c0 <osThreadNew+0x11a>
            hTask = NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062c0:	693b      	ldr	r3, [r7, #16]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3728      	adds	r7, #40	@ 0x28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d2:	f3ef 8305 	mrs	r3, IPSR
 80062d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80062d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <osDelay+0x1c>
    stat = osErrorISR;
 80062de:	f06f 0305 	mvn.w	r3, #5
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e007      	b.n	80062f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fff9 	bl	80082e8 <vTaskDelay>
    }
  }

  return (stat);
 80062f6:	68fb      	ldr	r3, [r7, #12]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006308:	f3ef 8305 	mrs	r3, IPSR
 800630c:	60fb      	str	r3, [r7, #12]
  return(result);
 800630e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006314:	f06f 0305 	mvn.w	r3, #5
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	e019      	b.n	8006350 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800631c:	2300      	movs	r3, #0
 800631e:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006320:	f002 f934 	bl	800858c <xTaskGetTickCount>
 8006324:	4603      	mov	r3, r0
 8006326:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <osDelayUntil+0x4a>
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db06      	blt.n	800634a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	6939      	ldr	r1, [r7, #16]
 8006342:	4618      	mov	r0, r3
 8006344:	f001 ff50 	bl	80081e8 <vTaskDelayUntil>
 8006348:	e002      	b.n	8006350 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800634a:	f06f 0303 	mvn.w	r3, #3
 800634e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006350:	697b      	ldr	r3, [r7, #20]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800635a:	b580      	push	{r7, lr}
 800635c:	b088      	sub	sp, #32
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006366:	f3ef 8305 	mrs	r3, IPSR
 800636a:	60bb      	str	r3, [r7, #8]
  return(result);
 800636c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800636e:	2b00      	cmp	r3, #0
 8006370:	d174      	bne.n	800645c <osMutexNew+0x102>
    if (attr != NULL) {
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d003      	beq.n	8006380 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	e001      	b.n	8006384 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	f003 0301 	and.w	r3, r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <osMutexNew+0x3a>
      rmtx = 1U;
 800638e:	2301      	movs	r3, #1
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	e001      	b.n	8006398 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0308 	and.w	r3, r3, #8
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d15c      	bne.n	800645c <osMutexNew+0x102>
      mem = -1;
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295
 80063a6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d015      	beq.n	80063da <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d006      	beq.n	80063c4 <osMutexNew+0x6a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b4f      	cmp	r3, #79	@ 0x4f
 80063bc:	d902      	bls.n	80063c4 <osMutexNew+0x6a>
          mem = 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	613b      	str	r3, [r7, #16]
 80063c2:	e00c      	b.n	80063de <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d108      	bne.n	80063de <osMutexNew+0x84>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <osMutexNew+0x84>
            mem = 0;
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e001      	b.n	80063de <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d112      	bne.n	800640a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4619      	mov	r1, r3
 80063f0:	2004      	movs	r0, #4
 80063f2:	f000 fd90 	bl	8006f16 <xQueueCreateMutexStatic>
 80063f6:	61f8      	str	r0, [r7, #28]
 80063f8:	e016      	b.n	8006428 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	4619      	mov	r1, r3
 8006400:	2001      	movs	r0, #1
 8006402:	f000 fd88 	bl	8006f16 <xQueueCreateMutexStatic>
 8006406:	61f8      	str	r0, [r7, #28]
 8006408:	e00e      	b.n	8006428 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d004      	beq.n	8006420 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006416:	2004      	movs	r0, #4
 8006418:	f000 fd65 	bl	8006ee6 <xQueueCreateMutex>
 800641c:	61f8      	str	r0, [r7, #28]
 800641e:	e003      	b.n	8006428 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006420:	2001      	movs	r0, #1
 8006422:	f000 fd60 	bl	8006ee6 <xQueueCreateMutex>
 8006426:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <osMutexNew+0xee>
        if (attr != NULL) {
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <osMutexNew+0xe2>
          name = attr->name;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	e001      	b.n	8006440 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006440:	68f9      	ldr	r1, [r7, #12]
 8006442:	69f8      	ldr	r0, [r7, #28]
 8006444:	f001 fc8a 	bl	8007d5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d006      	beq.n	800645c <osMutexNew+0x102>
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	f043 0301 	orr.w	r3, r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800645c:	69fb      	ldr	r3, [r7, #28]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006484:	f3ef 8305 	mrs	r3, IPSR
 8006488:	60bb      	str	r3, [r7, #8]
  return(result);
 800648a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006490:	f06f 0305 	mvn.w	r3, #5
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	e02c      	b.n	80064f2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800649e:	f06f 0303 	mvn.w	r3, #3
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	e025      	b.n	80064f2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d011      	beq.n	80064d0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6938      	ldr	r0, [r7, #16]
 80064b0:	f000 fd81 	bl	8006fb6 <xQueueTakeMutexRecursive>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d01b      	beq.n	80064f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80064c0:	f06f 0301 	mvn.w	r3, #1
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	e014      	b.n	80064f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80064c8:	f06f 0302 	mvn.w	r3, #2
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	e010      	b.n	80064f2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80064d0:	6839      	ldr	r1, [r7, #0]
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f001 f926 	bl	8007724 <xQueueSemaphoreTake>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d009      	beq.n	80064f2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80064e4:	f06f 0301 	mvn.w	r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e002      	b.n	80064f2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80064ec:	f06f 0302 	mvn.w	r3, #2
 80064f0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80064f2:	697b      	ldr	r3, [r7, #20]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006514:	2300      	movs	r3, #0
 8006516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006518:	f3ef 8305 	mrs	r3, IPSR
 800651c:	60bb      	str	r3, [r7, #8]
  return(result);
 800651e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006524:	f06f 0305 	mvn.w	r3, #5
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e01f      	b.n	800656c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006532:	f06f 0303 	mvn.w	r3, #3
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e018      	b.n	800656c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006540:	6938      	ldr	r0, [r7, #16]
 8006542:	f000 fd03 	bl	8006f4c <xQueueGiveMutexRecursive>
 8006546:	4603      	mov	r3, r0
 8006548:	2b01      	cmp	r3, #1
 800654a:	d00f      	beq.n	800656c <osMutexRelease+0x70>
        stat = osErrorResource;
 800654c:	f06f 0302 	mvn.w	r3, #2
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	e00b      	b.n	800656c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006554:	2300      	movs	r3, #0
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f000 fdd0 	bl	8007100 <xQueueGenericSend>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d002      	beq.n	800656c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006566:	f06f 0302 	mvn.w	r3, #2
 800656a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800656c:	697b      	ldr	r3, [r7, #20]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006576:	b580      	push	{r7, lr}
 8006578:	b08a      	sub	sp, #40	@ 0x28
 800657a:	af02      	add	r7, sp, #8
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006586:	f3ef 8305 	mrs	r3, IPSR
 800658a:	613b      	str	r3, [r7, #16]
  return(result);
 800658c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800658e:	2b00      	cmp	r3, #0
 8006590:	d175      	bne.n	800667e <osSemaphoreNew+0x108>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d072      	beq.n	800667e <osSemaphoreNew+0x108>
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	429a      	cmp	r2, r3
 800659e:	d86e      	bhi.n	800667e <osSemaphoreNew+0x108>
    mem = -1;
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d006      	beq.n	80065c2 <osSemaphoreNew+0x4c>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80065ba:	d902      	bls.n	80065c2 <osSemaphoreNew+0x4c>
        mem = 1;
 80065bc:	2301      	movs	r3, #1
 80065be:	61bb      	str	r3, [r7, #24]
 80065c0:	e00c      	b.n	80065dc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d108      	bne.n	80065dc <osSemaphoreNew+0x66>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d104      	bne.n	80065dc <osSemaphoreNew+0x66>
          mem = 0;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e001      	b.n	80065dc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d04c      	beq.n	800667e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d128      	bne.n	800663c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10a      	bne.n	8006606 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2203      	movs	r2, #3
 80065f6:	9200      	str	r2, [sp, #0]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	2001      	movs	r0, #1
 80065fe:	f000 fb7d 	bl	8006cfc <xQueueGenericCreateStatic>
 8006602:	61f8      	str	r0, [r7, #28]
 8006604:	e005      	b.n	8006612 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006606:	2203      	movs	r2, #3
 8006608:	2100      	movs	r1, #0
 800660a:	2001      	movs	r0, #1
 800660c:	f000 fbf3 	bl	8006df6 <xQueueGenericCreate>
 8006610:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d022      	beq.n	800665e <osSemaphoreNew+0xe8>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d01f      	beq.n	800665e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800661e:	2300      	movs	r3, #0
 8006620:	2200      	movs	r2, #0
 8006622:	2100      	movs	r1, #0
 8006624:	69f8      	ldr	r0, [r7, #28]
 8006626:	f000 fd6b 	bl	8007100 <xQueueGenericSend>
 800662a:	4603      	mov	r3, r0
 800662c:	2b01      	cmp	r3, #1
 800662e:	d016      	beq.n	800665e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006630:	69f8      	ldr	r0, [r7, #28]
 8006632:	f001 fa47 	bl	8007ac4 <vQueueDelete>
            hSemaphore = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61fb      	str	r3, [r7, #28]
 800663a:	e010      	b.n	800665e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d108      	bne.n	8006654 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	461a      	mov	r2, r3
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fcea 	bl	8007024 <xQueueCreateCountingSemaphoreStatic>
 8006650:	61f8      	str	r0, [r7, #28]
 8006652:	e004      	b.n	800665e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 fd1d 	bl	8007096 <xQueueCreateCountingSemaphore>
 800665c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00c      	beq.n	800667e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <osSemaphoreNew+0xfc>
          name = attr->name;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	617b      	str	r3, [r7, #20]
 8006670:	e001      	b.n	8006676 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006676:	6979      	ldr	r1, [r7, #20]
 8006678:	69f8      	ldr	r0, [r7, #28]
 800667a:	f001 fb6f 	bl	8007d5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800667e:	69fb      	ldr	r3, [r7, #28]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3720      	adds	r7, #32
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80066a0:	f06f 0303 	mvn.w	r3, #3
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	e039      	b.n	800671c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a8:	f3ef 8305 	mrs	r3, IPSR
 80066ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80066ae:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d022      	beq.n	80066fa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80066ba:	f06f 0303 	mvn.w	r3, #3
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e02c      	b.n	800671c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80066c6:	f107 0308 	add.w	r3, r7, #8
 80066ca:	461a      	mov	r2, r3
 80066cc:	2100      	movs	r1, #0
 80066ce:	6938      	ldr	r0, [r7, #16]
 80066d0:	f001 f938 	bl	8007944 <xQueueReceiveFromISR>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d003      	beq.n	80066e2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80066da:	f06f 0302 	mvn.w	r3, #2
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e01c      	b.n	800671c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d019      	beq.n	800671c <osSemaphoreAcquire+0x94>
 80066e8:	4b0f      	ldr	r3, [pc, #60]	@ (8006728 <osSemaphoreAcquire+0xa0>)
 80066ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ee:	601a      	str	r2, [r3, #0]
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	e010      	b.n	800671c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6938      	ldr	r0, [r7, #16]
 80066fe:	f001 f811 	bl	8007724 <xQueueSemaphoreTake>
 8006702:	4603      	mov	r3, r0
 8006704:	2b01      	cmp	r3, #1
 8006706:	d009      	beq.n	800671c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800670e:	f06f 0301 	mvn.w	r3, #1
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e002      	b.n	800671c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006716:	f06f 0302 	mvn.w	r3, #2
 800671a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800671c:	697b      	ldr	r3, [r7, #20]
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006742:	f06f 0303 	mvn.w	r3, #3
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	e02c      	b.n	80067a4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674a:	f3ef 8305 	mrs	r3, IPSR
 800674e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006750:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006752:	2b00      	cmp	r3, #0
 8006754:	d01a      	beq.n	800678c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800675a:	f107 0308 	add.w	r3, r7, #8
 800675e:	4619      	mov	r1, r3
 8006760:	6938      	ldr	r0, [r7, #16]
 8006762:	f000 fe6d 	bl	8007440 <xQueueGiveFromISR>
 8006766:	4603      	mov	r3, r0
 8006768:	2b01      	cmp	r3, #1
 800676a:	d003      	beq.n	8006774 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800676c:	f06f 0302 	mvn.w	r3, #2
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	e017      	b.n	80067a4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d014      	beq.n	80067a4 <osSemaphoreRelease+0x78>
 800677a:	4b0d      	ldr	r3, [pc, #52]	@ (80067b0 <osSemaphoreRelease+0x84>)
 800677c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006780:	601a      	str	r2, [r3, #0]
 8006782:	f3bf 8f4f 	dsb	sy
 8006786:	f3bf 8f6f 	isb	sy
 800678a:	e00b      	b.n	80067a4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800678c:	2300      	movs	r3, #0
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	6938      	ldr	r0, [r7, #16]
 8006794:	f000 fcb4 	bl	8007100 <xQueueGenericSend>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d002      	beq.n	80067a4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800679e:	f06f 0302 	mvn.w	r3, #2
 80067a2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80067a4:	697b      	ldr	r3, [r7, #20]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000ed04 	.word	0xe000ed04

080067b4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b08a      	sub	sp, #40	@ 0x28
 80067b8:	af02      	add	r7, sp, #8
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067c4:	f3ef 8305 	mrs	r3, IPSR
 80067c8:	613b      	str	r3, [r7, #16]
  return(result);
 80067ca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d15f      	bne.n	8006890 <osMessageQueueNew+0xdc>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d05c      	beq.n	8006890 <osMessageQueueNew+0xdc>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d059      	beq.n	8006890 <osMessageQueueNew+0xdc>
    mem = -1;
 80067dc:	f04f 33ff 	mov.w	r3, #4294967295
 80067e0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d029      	beq.n	800683c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d012      	beq.n	8006816 <osMessageQueueNew+0x62>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80067f6:	d90e      	bls.n	8006816 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00a      	beq.n	8006816 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	429a      	cmp	r2, r3
 800680e:	d302      	bcc.n	8006816 <osMessageQueueNew+0x62>
        mem = 1;
 8006810:	2301      	movs	r3, #1
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	e014      	b.n	8006840 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d110      	bne.n	8006840 <osMessageQueueNew+0x8c>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10c      	bne.n	8006840 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800682a:	2b00      	cmp	r3, #0
 800682c:	d108      	bne.n	8006840 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d104      	bne.n	8006840 <osMessageQueueNew+0x8c>
          mem = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	e001      	b.n	8006840 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	2b01      	cmp	r3, #1
 8006844:	d10b      	bne.n	800685e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	2100      	movs	r1, #0
 8006850:	9100      	str	r1, [sp, #0]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fa51 	bl	8006cfc <xQueueGenericCreateStatic>
 800685a:	61f8      	str	r0, [r7, #28]
 800685c:	e008      	b.n	8006870 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d105      	bne.n	8006870 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006864:	2200      	movs	r2, #0
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f000 fac4 	bl	8006df6 <xQueueGenericCreate>
 800686e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00c      	beq.n	8006890 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <osMessageQueueNew+0xd0>
        name = attr->name;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e001      	b.n	8006888 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006888:	6979      	ldr	r1, [r7, #20]
 800688a:	69f8      	ldr	r0, [r7, #28]
 800688c:	f001 fa66 	bl	8007d5c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006890:	69fb      	ldr	r3, [r7, #28]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3720      	adds	r7, #32
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
	...

0800689c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b4:	f3ef 8305 	mrs	r3, IPSR
 80068b8:	617b      	str	r3, [r7, #20]
  return(result);
 80068ba:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d028      	beq.n	8006912 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d005      	beq.n	80068d2 <osMessageQueuePut+0x36>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <osMessageQueuePut+0x36>
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80068d2:	f06f 0303 	mvn.w	r3, #3
 80068d6:	61fb      	str	r3, [r7, #28]
 80068d8:	e038      	b.n	800694c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80068da:	2300      	movs	r3, #0
 80068dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80068de:	f107 0210 	add.w	r2, r7, #16
 80068e2:	2300      	movs	r3, #0
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	69b8      	ldr	r0, [r7, #24]
 80068e8:	f000 fd0c 	bl	8007304 <xQueueGenericSendFromISR>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d003      	beq.n	80068fa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80068f2:	f06f 0302 	mvn.w	r3, #2
 80068f6:	61fb      	str	r3, [r7, #28]
 80068f8:	e028      	b.n	800694c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d025      	beq.n	800694c <osMessageQueuePut+0xb0>
 8006900:	4b15      	ldr	r3, [pc, #84]	@ (8006958 <osMessageQueuePut+0xbc>)
 8006902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	e01c      	b.n	800694c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <osMessageQueuePut+0x82>
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800691e:	f06f 0303 	mvn.w	r3, #3
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e012      	b.n	800694c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006926:	2300      	movs	r3, #0
 8006928:	683a      	ldr	r2, [r7, #0]
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	69b8      	ldr	r0, [r7, #24]
 800692e:	f000 fbe7 	bl	8007100 <xQueueGenericSend>
 8006932:	4603      	mov	r3, r0
 8006934:	2b01      	cmp	r3, #1
 8006936:	d009      	beq.n	800694c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800693e:	f06f 0301 	mvn.w	r3, #1
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e002      	b.n	800694c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006946:	f06f 0302 	mvn.w	r3, #2
 800694a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800694c:	69fb      	ldr	r3, [r7, #28]
}
 800694e:	4618      	mov	r0, r3
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	e000ed04 	.word	0xe000ed04

0800695c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800696e:	2300      	movs	r3, #0
 8006970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006972:	f3ef 8305 	mrs	r3, IPSR
 8006976:	617b      	str	r3, [r7, #20]
  return(result);
 8006978:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800697a:	2b00      	cmp	r3, #0
 800697c:	d028      	beq.n	80069d0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d005      	beq.n	8006990 <osMessageQueueGet+0x34>
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <osMessageQueueGet+0x34>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006990:	f06f 0303 	mvn.w	r3, #3
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	e037      	b.n	8006a08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800699c:	f107 0310 	add.w	r3, r7, #16
 80069a0:	461a      	mov	r2, r3
 80069a2:	68b9      	ldr	r1, [r7, #8]
 80069a4:	69b8      	ldr	r0, [r7, #24]
 80069a6:	f000 ffcd 	bl	8007944 <xQueueReceiveFromISR>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d003      	beq.n	80069b8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80069b0:	f06f 0302 	mvn.w	r3, #2
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	e027      	b.n	8006a08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d024      	beq.n	8006a08 <osMessageQueueGet+0xac>
 80069be:	4b15      	ldr	r3, [pc, #84]	@ (8006a14 <osMessageQueueGet+0xb8>)
 80069c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	e01b      	b.n	8006a08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <osMessageQueueGet+0x80>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d103      	bne.n	80069e4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80069dc:	f06f 0303 	mvn.w	r3, #3
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e011      	b.n	8006a08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	68b9      	ldr	r1, [r7, #8]
 80069e8:	69b8      	ldr	r0, [r7, #24]
 80069ea:	f000 fdb9 	bl	8007560 <xQueueReceive>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d009      	beq.n	8006a08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80069fa:	f06f 0301 	mvn.w	r3, #1
 80069fe:	61fb      	str	r3, [r7, #28]
 8006a00:	e002      	b.n	8006a08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006a02:	f06f 0302 	mvn.w	r3, #2
 8006a06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006a08:	69fb      	ldr	r3, [r7, #28]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	e000ed04 	.word	0xe000ed04

08006a18 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d102      	bne.n	8006a30 <osMessageQueueGetCount+0x18>
    count = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	e00e      	b.n	8006a4e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a30:	f3ef 8305 	mrs	r3, IPSR
 8006a34:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8006a3c:	6938      	ldr	r0, [r7, #16]
 8006a3e:	f001 f822 	bl	8007a86 <uxQueueMessagesWaitingFromISR>
 8006a42:	6178      	str	r0, [r7, #20]
 8006a44:	e003      	b.n	8006a4e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f000 fffe 	bl	8007a48 <uxQueueMessagesWaiting>
 8006a4c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006a4e:	697b      	ldr	r3, [r7, #20]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a07      	ldr	r2, [pc, #28]	@ (8006a84 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4a06      	ldr	r2, [pc, #24]	@ (8006a88 <vApplicationGetIdleTaskMemory+0x30>)
 8006a6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2280      	movs	r2, #128	@ 0x80
 8006a74:	601a      	str	r2, [r3, #0]
}
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000458 	.word	0x20000458
 8006a88:	20000500 	.word	0x20000500

08006a8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a07      	ldr	r2, [pc, #28]	@ (8006ab8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006a9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4a06      	ldr	r2, [pc, #24]	@ (8006abc <vApplicationGetTimerTaskMemory+0x30>)
 8006aa2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aaa:	601a      	str	r2, [r3, #0]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	20000700 	.word	0x20000700
 8006abc:	200007a8 	.word	0x200007a8

08006ac0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f103 0208 	add.w	r2, r3, #8
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f103 0208 	add.w	r2, r3, #8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f103 0208 	add.w	r2, r3, #8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	689a      	ldr	r2, [r3, #8]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	683a      	ldr	r2, [r7, #0]
 8006b3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	601a      	str	r2, [r3, #0]
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b62:	b480      	push	{r7}
 8006b64:	b085      	sub	sp, #20
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d103      	bne.n	8006b82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	e00c      	b.n	8006b9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	3308      	adds	r3, #8
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	e002      	b.n	8006b90 <vListInsert+0x2e>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d2f6      	bcs.n	8006b8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	683a      	ldr	r2, [r7, #0]
 8006baa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	601a      	str	r2, [r3, #0]
}
 8006bc8:	bf00      	nop
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6892      	ldr	r2, [r2, #8]
 8006bea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d103      	bne.n	8006c08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	1e5a      	subs	r2, r3, #1
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10b      	bne.n	8006c54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c4e:	bf00      	nop
 8006c50:	bf00      	nop
 8006c52:	e7fd      	b.n	8006c50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c54:	f002 fe70 	bl	8009938 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c60:	68f9      	ldr	r1, [r7, #12]
 8006c62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	441a      	add	r2, r3
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c84:	3b01      	subs	r3, #1
 8006c86:	68f9      	ldr	r1, [r7, #12]
 8006c88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c8a:	fb01 f303 	mul.w	r3, r1, r3
 8006c8e:	441a      	add	r2, r3
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	22ff      	movs	r2, #255	@ 0xff
 8006c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	22ff      	movs	r2, #255	@ 0xff
 8006ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d114      	bne.n	8006cd4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d01a      	beq.n	8006ce8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3310      	adds	r3, #16
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f001 fdfc 	bl	80088b4 <xTaskRemoveFromEventList>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d012      	beq.n	8006ce8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <xQueueGenericReset+0xd0>)
 8006cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	e009      	b.n	8006ce8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3310      	adds	r3, #16
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7ff fef1 	bl	8006ac0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3324      	adds	r3, #36	@ 0x24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff feec 	bl	8006ac0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ce8:	f002 fe58 	bl	800999c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cec:	2301      	movs	r3, #1
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08e      	sub	sp, #56	@ 0x38
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d002      	beq.n	8006d52 <xQueueGenericCreateStatic+0x56>
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <xQueueGenericCreateStatic+0x5a>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <xQueueGenericCreateStatic+0x5c>
 8006d56:	2300      	movs	r3, #0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	623b      	str	r3, [r7, #32]
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d102      	bne.n	8006d80 <xQueueGenericCreateStatic+0x84>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <xQueueGenericCreateStatic+0x88>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <xQueueGenericCreateStatic+0x8a>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10b      	bne.n	8006da2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	61fb      	str	r3, [r7, #28]
}
 8006d9c:	bf00      	nop
 8006d9e:	bf00      	nop
 8006da0:	e7fd      	b.n	8006d9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006da2:	2350      	movs	r3, #80	@ 0x50
 8006da4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b50      	cmp	r3, #80	@ 0x50
 8006daa:	d00b      	beq.n	8006dc4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	61bb      	str	r3, [r7, #24]
}
 8006dbe:	bf00      	nop
 8006dc0:	bf00      	nop
 8006dc2:	e7fd      	b.n	8006dc0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00d      	beq.n	8006dec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006dd8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	68b9      	ldr	r1, [r7, #8]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f840 	bl	8006e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3730      	adds	r7, #48	@ 0x30
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b08a      	sub	sp, #40	@ 0x28
 8006dfa:	af02      	add	r7, sp, #8
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	4613      	mov	r3, r2
 8006e02:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10b      	bne.n	8006e22 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	613b      	str	r3, [r7, #16]
}
 8006e1c:	bf00      	nop
 8006e1e:	bf00      	nop
 8006e20:	e7fd      	b.n	8006e1e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	fb02 f303 	mul.w	r3, r2, r3
 8006e2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3350      	adds	r3, #80	@ 0x50
 8006e30:	4618      	mov	r0, r3
 8006e32:	f002 fea3 	bl	8009b7c <pvPortMalloc>
 8006e36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d011      	beq.n	8006e62 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	3350      	adds	r3, #80	@ 0x50
 8006e46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e50:	79fa      	ldrb	r2, [r7, #7]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f805 	bl	8006e6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e62:	69bb      	ldr	r3, [r7, #24]
	}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3720      	adds	r7, #32
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d103      	bne.n	8006e88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e002      	b.n	8006e8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e9a:	2101      	movs	r1, #1
 8006e9c:	69b8      	ldr	r0, [r7, #24]
 8006e9e:	f7ff fec3 	bl	8006c28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b082      	sub	sp, #8
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00e      	beq.n	8006ede <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f911 	bl	8007100 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006ede:	bf00      	nop
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	4603      	mov	r3, r0
 8006eee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	461a      	mov	r2, r3
 8006efc:	6939      	ldr	r1, [r7, #16]
 8006efe:	6978      	ldr	r0, [r7, #20]
 8006f00:	f7ff ff79 	bl	8006df6 <xQueueGenericCreate>
 8006f04:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff ffd3 	bl	8006eb2 <prvInitialiseMutex>

		return xNewQueue;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
	}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b088      	sub	sp, #32
 8006f1a:	af02      	add	r7, sp, #8
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	6039      	str	r1, [r7, #0]
 8006f20:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006f22:	2301      	movs	r3, #1
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	2300      	movs	r3, #0
 8006f28:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2200      	movs	r2, #0
 8006f32:	6939      	ldr	r1, [r7, #16]
 8006f34:	6978      	ldr	r0, [r7, #20]
 8006f36:	f7ff fee1 	bl	8006cfc <xQueueGenericCreateStatic>
 8006f3a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff ffb8 	bl	8006eb2 <prvInitialiseMutex>

		return xNewQueue;
 8006f42:	68fb      	ldr	r3, [r7, #12]
	}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d10b      	bne.n	8006f76 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	60fb      	str	r3, [r7, #12]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	689c      	ldr	r4, [r3, #8]
 8006f7a:	f001 fe61 	bl	8008c40 <xTaskGetCurrentTaskHandle>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	429c      	cmp	r4, r3
 8006f82:	d111      	bne.n	8006fa8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	1e5a      	subs	r2, r3, #1
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d105      	bne.n	8006fa2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006f96:	2300      	movs	r3, #0
 8006f98:	2200      	movs	r2, #0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	6938      	ldr	r0, [r7, #16]
 8006f9e:	f000 f8af 	bl	8007100 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	e001      	b.n	8006fac <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006fac:	697b      	ldr	r3, [r7, #20]
	}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd90      	pop	{r4, r7, pc}

08006fb6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006fb6:	b590      	push	{r4, r7, lr}
 8006fb8:	b087      	sub	sp, #28
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	60fb      	str	r3, [r7, #12]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	689c      	ldr	r4, [r3, #8]
 8006fe6:	f001 fe2b 	bl	8008c40 <xTaskGetCurrentTaskHandle>
 8006fea:	4603      	mov	r3, r0
 8006fec:	429c      	cmp	r4, r3
 8006fee:	d107      	bne.n	8007000 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	e00c      	b.n	800701a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6938      	ldr	r0, [r7, #16]
 8007004:	f000 fb8e 	bl	8007724 <xQueueSemaphoreTake>
 8007008:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d004      	beq.n	800701a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800701a:	697b      	ldr	r3, [r7, #20]
	}
 800701c:	4618      	mov	r0, r3
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	bd90      	pop	{r4, r7, pc}

08007024 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	@ 0x28
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61bb      	str	r3, [r7, #24]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	429a      	cmp	r2, r3
 8007054:	d90b      	bls.n	800706e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	617b      	str	r3, [r7, #20]
}
 8007068:	bf00      	nop
 800706a:	bf00      	nop
 800706c:	e7fd      	b.n	800706a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800706e:	2302      	movs	r3, #2
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff fe3f 	bl	8006cfc <xQueueGenericCreateStatic>
 800707e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d002      	beq.n	800708c <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	68ba      	ldr	r2, [r7, #8]
 800708a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800708c:	69fb      	ldr	r3, [r7, #28]
	}
 800708e:	4618      	mov	r0, r3
 8007090:	3720      	adds	r7, #32
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	613b      	str	r3, [r7, #16]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d90b      	bls.n	80070de <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80070de:	2202      	movs	r2, #2
 80070e0:	2100      	movs	r1, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7ff fe87 	bl	8006df6 <xQueueGenericCreate>
 80070e8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d002      	beq.n	80070f6 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80070f6:	697b      	ldr	r3, [r7, #20]
	}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3718      	adds	r7, #24
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08e      	sub	sp, #56	@ 0x38
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
 800710c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10b      	bne.n	8007134 <xQueueGenericSend+0x34>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <xQueueGenericSend+0x42>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueGenericSend+0x46>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueGenericSend+0x48>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <xQueueGenericSend+0x64>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	e7fd      	b.n	8007160 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <xQueueGenericSend+0x72>
 800716a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d101      	bne.n	8007176 <xQueueGenericSend+0x76>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <xQueueGenericSend+0x78>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10b      	bne.n	8007194 <xQueueGenericSend+0x94>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	623b      	str	r3, [r7, #32]
}
 800718e:	bf00      	nop
 8007190:	bf00      	nop
 8007192:	e7fd      	b.n	8007190 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007194:	f001 fd64 	bl	8008c60 <xTaskGetSchedulerState>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <xQueueGenericSend+0xa4>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <xQueueGenericSend+0xa8>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e000      	b.n	80071aa <xQueueGenericSend+0xaa>
 80071a8:	2300      	movs	r3, #0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	61fb      	str	r3, [r7, #28]
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	e7fd      	b.n	80071c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071c6:	f002 fbb7 	bl	8009938 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d302      	bcc.n	80071dc <xQueueGenericSend+0xdc>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d129      	bne.n	8007230 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071e2:	f000 fcab 	bl	8007b3c <prvCopyDataToQueue>
 80071e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d010      	beq.n	8007212 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	3324      	adds	r3, #36	@ 0x24
 80071f4:	4618      	mov	r0, r3
 80071f6:	f001 fb5d 	bl	80088b4 <xTaskRemoveFromEventList>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d013      	beq.n	8007228 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007200:	4b3f      	ldr	r3, [pc, #252]	@ (8007300 <xQueueGenericSend+0x200>)
 8007202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	e00a      	b.n	8007228 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007218:	4b39      	ldr	r3, [pc, #228]	@ (8007300 <xQueueGenericSend+0x200>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007228:	f002 fbb8 	bl	800999c <vPortExitCritical>
				return pdPASS;
 800722c:	2301      	movs	r3, #1
 800722e:	e063      	b.n	80072f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007236:	f002 fbb1 	bl	800999c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800723a:	2300      	movs	r3, #0
 800723c:	e05c      	b.n	80072f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800723e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007240:	2b00      	cmp	r3, #0
 8007242:	d106      	bne.n	8007252 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fb97 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800724e:	2301      	movs	r3, #1
 8007250:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007252:	f002 fba3 	bl	800999c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007256:	f001 f8ed 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800725a:	f002 fb6d 	bl	8009938 <vPortEnterCritical>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <xQueueGenericSend+0x174>
 800726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007276:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800727a:	b25b      	sxtb	r3, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d103      	bne.n	800728a <xQueueGenericSend+0x18a>
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800728a:	f002 fb87 	bl	800999c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	f107 0314 	add.w	r3, r7, #20
 8007294:	4611      	mov	r1, r2
 8007296:	4618      	mov	r0, r3
 8007298:	f001 fb86 	bl	80089a8 <xTaskCheckForTimeOut>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d124      	bne.n	80072ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072a4:	f000 fd42 	bl	8007d2c <prvIsQueueFull>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	3310      	adds	r3, #16
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f001 faaa 	bl	8008810 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072be:	f000 fccd 	bl	8007c5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072c2:	f001 f8c5 	bl	8008450 <xTaskResumeAll>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af7c 	bne.w	80071c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80072ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <xQueueGenericSend+0x200>)
 80072d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d4:	601a      	str	r2, [r3, #0]
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	e772      	b.n	80071c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072e2:	f000 fcbb 	bl	8007c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072e6:	f001 f8b3 	bl	8008450 <xTaskResumeAll>
 80072ea:	e76c      	b.n	80071c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072ee:	f000 fcb5 	bl	8007c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072f2:	f001 f8ad 	bl	8008450 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3738      	adds	r7, #56	@ 0x38
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b090      	sub	sp, #64	@ 0x40
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
 8007310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10b      	bne.n	8007334 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800732e:	bf00      	nop
 8007330:	bf00      	nop
 8007332:	e7fd      	b.n	8007330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d103      	bne.n	8007342 <xQueueGenericSendFromISR+0x3e>
 800733a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <xQueueGenericSendFromISR+0x42>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <xQueueGenericSendFromISR+0x44>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800735e:	bf00      	nop
 8007360:	bf00      	nop
 8007362:	e7fd      	b.n	8007360 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b02      	cmp	r3, #2
 8007368:	d103      	bne.n	8007372 <xQueueGenericSendFromISR+0x6e>
 800736a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <xQueueGenericSendFromISR+0x72>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <xQueueGenericSendFromISR+0x74>
 8007376:	2300      	movs	r3, #0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
}
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007394:	f002 fbb0 	bl	8009af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007398:	f3ef 8211 	mrs	r2, BASEPRI
 800739c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a0:	f383 8811 	msr	BASEPRI, r3
 80073a4:	f3bf 8f6f 	isb	sy
 80073a8:	f3bf 8f4f 	dsb	sy
 80073ac:	61fa      	str	r2, [r7, #28]
 80073ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073b2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <xQueueGenericSendFromISR+0xc2>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d12f      	bne.n	8007426 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80073dc:	f000 fbae 	bl	8007b3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80073e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e8:	d112      	bne.n	8007410 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073f4:	3324      	adds	r3, #36	@ 0x24
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 fa5c 	bl	80088b4 <xTaskRemoveFromEventList>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00e      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00b      	beq.n	8007420 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e007      	b.n	8007420 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007410:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007414:	3301      	adds	r3, #1
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b25a      	sxtb	r2, r3
 800741a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007420:	2301      	movs	r3, #1
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007424:	e001      	b.n	800742a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007426:	2300      	movs	r3, #0
 8007428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800742a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800742c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007434:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007438:	4618      	mov	r0, r3
 800743a:	3740      	adds	r7, #64	@ 0x40
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	@ 0x38
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800746c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	61fb      	str	r3, [r7, #28]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <xQueueGiveFromISR+0x5c>
 8007494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <xQueueGiveFromISR+0x60>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <xQueueGiveFromISR+0x62>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <xQueueGiveFromISR+0x7e>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61bb      	str	r3, [r7, #24]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074be:	f002 fb1b 	bl	8009af8 <vPortValidateInterruptPriority>
	__asm volatile
 80074c2:	f3ef 8211 	mrs	r2, BASEPRI
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	617a      	str	r2, [r7, #20]
 80074d8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80074da:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80074e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d22b      	bcs.n	8007546 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007500:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d112      	bne.n	8007530 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800750a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800750c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d016      	beq.n	8007540 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007514:	3324      	adds	r3, #36	@ 0x24
 8007516:	4618      	mov	r0, r3
 8007518:	f001 f9cc 	bl	80088b4 <xTaskRemoveFromEventList>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	601a      	str	r2, [r3, #0]
 800752e:	e007      	b.n	8007540 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007534:	3301      	adds	r3, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	b25a      	sxtb	r2, r3
 800753a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800753c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007540:	2301      	movs	r3, #1
 8007542:	637b      	str	r3, [r7, #52]	@ 0x34
 8007544:	e001      	b.n	800754a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007546:	2300      	movs	r3, #0
 8007548:	637b      	str	r3, [r7, #52]	@ 0x34
 800754a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f383 8811 	msr	BASEPRI, r3
}
 8007554:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007558:	4618      	mov	r0, r3
 800755a:	3738      	adds	r7, #56	@ 0x38
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08c      	sub	sp, #48	@ 0x30
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800756c:	2300      	movs	r3, #0
 800756e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10b      	bne.n	8007592 <xQueueReceive+0x32>
	__asm volatile
 800757a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	623b      	str	r3, [r7, #32]
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	e7fd      	b.n	800758e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d103      	bne.n	80075a0 <xQueueReceive+0x40>
 8007598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800759a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <xQueueReceive+0x44>
 80075a0:	2301      	movs	r3, #1
 80075a2:	e000      	b.n	80075a6 <xQueueReceive+0x46>
 80075a4:	2300      	movs	r3, #0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <xQueueReceive+0x62>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	61fb      	str	r3, [r7, #28]
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	e7fd      	b.n	80075be <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075c2:	f001 fb4d 	bl	8008c60 <xTaskGetSchedulerState>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <xQueueReceive+0x72>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <xQueueReceive+0x76>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <xQueueReceive+0x78>
 80075d6:	2300      	movs	r3, #0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <xQueueReceive+0x94>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	61bb      	str	r3, [r7, #24]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075f4:	f002 f9a0 	bl	8009938 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01f      	beq.n	8007644 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007604:	68b9      	ldr	r1, [r7, #8]
 8007606:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007608:	f000 fb02 	bl	8007c10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	1e5a      	subs	r2, r3, #1
 8007610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007612:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00f      	beq.n	800763c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	3310      	adds	r3, #16
 8007620:	4618      	mov	r0, r3
 8007622:	f001 f947 	bl	80088b4 <xTaskRemoveFromEventList>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d007      	beq.n	800763c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800762c:	4b3c      	ldr	r3, [pc, #240]	@ (8007720 <xQueueReceive+0x1c0>)
 800762e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800763c:	f002 f9ae 	bl	800999c <vPortExitCritical>
				return pdPASS;
 8007640:	2301      	movs	r3, #1
 8007642:	e069      	b.n	8007718 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800764a:	f002 f9a7 	bl	800999c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800764e:	2300      	movs	r3, #0
 8007650:	e062      	b.n	8007718 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007654:	2b00      	cmp	r3, #0
 8007656:	d106      	bne.n	8007666 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007658:	f107 0310 	add.w	r3, r7, #16
 800765c:	4618      	mov	r0, r3
 800765e:	f001 f98d 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007662:	2301      	movs	r3, #1
 8007664:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007666:	f002 f999 	bl	800999c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800766a:	f000 fee3 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800766e:	f002 f963 	bl	8009938 <vPortEnterCritical>
 8007672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007678:	b25b      	sxtb	r3, r3
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d103      	bne.n	8007688 <xQueueReceive+0x128>
 8007680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800768a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800768e:	b25b      	sxtb	r3, r3
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d103      	bne.n	800769e <xQueueReceive+0x13e>
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	2200      	movs	r2, #0
 800769a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800769e:	f002 f97d 	bl	800999c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076a2:	1d3a      	adds	r2, r7, #4
 80076a4:	f107 0310 	add.w	r3, r7, #16
 80076a8:	4611      	mov	r1, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 f97c 	bl	80089a8 <xTaskCheckForTimeOut>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d123      	bne.n	80076fe <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076b8:	f000 fb22 	bl	8007d00 <prvIsQueueEmpty>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d017      	beq.n	80076f2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c4:	3324      	adds	r3, #36	@ 0x24
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4611      	mov	r1, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f001 f8a0 	bl	8008810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076d2:	f000 fac3 	bl	8007c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076d6:	f000 febb 	bl	8008450 <xTaskResumeAll>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d189      	bne.n	80075f4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80076e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007720 <xQueueReceive+0x1c0>)
 80076e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	f3bf 8f4f 	dsb	sy
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	e780      	b.n	80075f4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076f4:	f000 fab2 	bl	8007c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076f8:	f000 feaa 	bl	8008450 <xTaskResumeAll>
 80076fc:	e77a      	b.n	80075f4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007700:	f000 faac 	bl	8007c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007704:	f000 fea4 	bl	8008450 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800770a:	f000 faf9 	bl	8007d00 <prvIsQueueEmpty>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	f43f af6f 	beq.w	80075f4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007716:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007718:	4618      	mov	r0, r3
 800771a:	3730      	adds	r7, #48	@ 0x30
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	e000ed04 	.word	0xe000ed04

08007724 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	@ 0x38
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800773a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	623b      	str	r3, [r7, #32]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00b      	beq.n	8007778 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61fb      	str	r3, [r7, #28]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007778:	f001 fa72 	bl	8008c60 <xTaskGetSchedulerState>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d102      	bne.n	8007788 <xQueueSemaphoreTake+0x64>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <xQueueSemaphoreTake+0x68>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <xQueueSemaphoreTake+0x6a>
 800778c:	2300      	movs	r3, #0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d10b      	bne.n	80077aa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	61bb      	str	r3, [r7, #24]
}
 80077a4:	bf00      	nop
 80077a6:	bf00      	nop
 80077a8:	e7fd      	b.n	80077a6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077aa:	f002 f8c5 	bl	8009938 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80077ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077b2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80077b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d024      	beq.n	8007804 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	1e5a      	subs	r2, r3, #1
 80077be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80077ca:	f001 fbc3 	bl	8008f54 <pvTaskIncrementMutexHeldCount>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	3310      	adds	r3, #16
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f867 	bl	80088b4 <xTaskRemoveFromEventList>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d007      	beq.n	80077fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80077ec:	4b54      	ldr	r3, [pc, #336]	@ (8007940 <xQueueSemaphoreTake+0x21c>)
 80077ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077f2:	601a      	str	r2, [r3, #0]
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80077fc:	f002 f8ce 	bl	800999c <vPortExitCritical>
				return pdPASS;
 8007800:	2301      	movs	r3, #1
 8007802:	e098      	b.n	8007936 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d112      	bne.n	8007830 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800780a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	617b      	str	r3, [r7, #20]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007828:	f002 f8b8 	bl	800999c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800782c:	2300      	movs	r3, #0
 800782e:	e082      	b.n	8007936 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007836:	f107 030c 	add.w	r3, r7, #12
 800783a:	4618      	mov	r0, r3
 800783c:	f001 f89e 	bl	800897c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007840:	2301      	movs	r3, #1
 8007842:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007844:	f002 f8aa 	bl	800999c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007848:	f000 fdf4 	bl	8008434 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800784c:	f002 f874 	bl	8009938 <vPortEnterCritical>
 8007850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007852:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007856:	b25b      	sxtb	r3, r3
 8007858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800785c:	d103      	bne.n	8007866 <xQueueSemaphoreTake+0x142>
 800785e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007868:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800786c:	b25b      	sxtb	r3, r3
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007872:	d103      	bne.n	800787c <xQueueSemaphoreTake+0x158>
 8007874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800787c:	f002 f88e 	bl	800999c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007880:	463a      	mov	r2, r7
 8007882:	f107 030c 	add.w	r3, r7, #12
 8007886:	4611      	mov	r1, r2
 8007888:	4618      	mov	r0, r3
 800788a:	f001 f88d 	bl	80089a8 <xTaskCheckForTimeOut>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d132      	bne.n	80078fa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007896:	f000 fa33 	bl	8007d00 <prvIsQueueEmpty>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d026      	beq.n	80078ee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d109      	bne.n	80078bc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80078a8:	f002 f846 	bl	8009938 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 f9f3 	bl	8008c9c <xTaskPriorityInherit>
 80078b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80078b8:	f002 f870 	bl	800999c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078be:	3324      	adds	r3, #36	@ 0x24
 80078c0:	683a      	ldr	r2, [r7, #0]
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ffa3 	bl	8008810 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078cc:	f000 f9c6 	bl	8007c5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078d0:	f000 fdbe 	bl	8008450 <xTaskResumeAll>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f47f af67 	bne.w	80077aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80078dc:	4b18      	ldr	r3, [pc, #96]	@ (8007940 <xQueueSemaphoreTake+0x21c>)
 80078de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e2:	601a      	str	r2, [r3, #0]
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	e75d      	b.n	80077aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80078ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078f0:	f000 f9b4 	bl	8007c5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078f4:	f000 fdac 	bl	8008450 <xTaskResumeAll>
 80078f8:	e757      	b.n	80077aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80078fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80078fc:	f000 f9ae 	bl	8007c5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007900:	f000 fda6 	bl	8008450 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007904:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007906:	f000 f9fb 	bl	8007d00 <prvIsQueueEmpty>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	f43f af4c 	beq.w	80077aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007918:	f002 f80e 	bl	8009938 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800791c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800791e:	f000 f8f5 	bl	8007b0c <prvGetDisinheritPriorityAfterTimeout>
 8007922:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fa8e 	bl	8008e4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007930:	f002 f834 	bl	800999c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007934:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007936:	4618      	mov	r0, r3
 8007938:	3738      	adds	r7, #56	@ 0x38
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	e000ed04 	.word	0xe000ed04

08007944 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08e      	sub	sp, #56	@ 0x38
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	2b00      	cmp	r3, #0
 8007958:	d10b      	bne.n	8007972 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	623b      	str	r3, [r7, #32]
}
 800796c:	bf00      	nop
 800796e:	bf00      	nop
 8007970:	e7fd      	b.n	800796e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d103      	bne.n	8007980 <xQueueReceiveFromISR+0x3c>
 8007978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <xQueueReceiveFromISR+0x40>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <xQueueReceiveFromISR+0x42>
 8007984:	2300      	movs	r3, #0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	61fb      	str	r3, [r7, #28]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079a2:	f002 f8a9 	bl	8009af8 <vPortValidateInterruptPriority>
	__asm volatile
 80079a6:	f3ef 8211 	mrs	r2, BASEPRI
 80079aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	61ba      	str	r2, [r7, #24]
 80079bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d02f      	beq.n	8007a2e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079dc:	f000 f918 	bl	8007c10 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	1e5a      	subs	r2, r3, #1
 80079e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80079ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079f0:	d112      	bne.n	8007a18 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d016      	beq.n	8007a28 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	3310      	adds	r3, #16
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 ff58 	bl	80088b4 <xTaskRemoveFromEventList>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00e      	beq.n	8007a28 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e007      	b.n	8007a28 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	b25a      	sxtb	r2, r3
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a2c:	e001      	b.n	8007a32 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	f383 8811 	msr	BASEPRI, r3
}
 8007a3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3738      	adds	r7, #56	@ 0x38
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10b      	bne.n	8007a6e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8007a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	f3bf 8f6f 	isb	sy
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	60bb      	str	r3, [r7, #8]
}
 8007a68:	bf00      	nop
 8007a6a:	bf00      	nop
 8007a6c:	e7fd      	b.n	8007a6a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007a6e:	f001 ff63 	bl	8009938 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a76:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007a78:	f001 ff90 	bl	800999c <vPortExitCritical>

	return uxReturn;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007a86:	b480      	push	{r7}
 8007a88:	b087      	sub	sp, #28
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10b      	bne.n	8007ab0 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	e7fd      	b.n	8007aac <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007ab6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10b      	bne.n	8007aee <vQueueDelete+0x2a>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	60bb      	str	r3, [r7, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	e7fd      	b.n	8007aea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 f95e 	bl	8007db0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f002 f90a 	bl	8009d18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d006      	beq.n	8007b2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e001      	b.n	8007b2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
	}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10d      	bne.n	8007b76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d14d      	bne.n	8007bfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f001 f900 	bl	8008d6c <xTaskPriorityDisinherit>
 8007b6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	609a      	str	r2, [r3, #8]
 8007b74:	e043      	b.n	8007bfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d119      	bne.n	8007bb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6858      	ldr	r0, [r3, #4]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b84:	461a      	mov	r2, r3
 8007b86:	68b9      	ldr	r1, [r7, #8]
 8007b88:	f003 fa85 	bl	800b096 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b94:	441a      	add	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d32b      	bcc.n	8007bfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	e026      	b.n	8007bfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	68d8      	ldr	r0, [r3, #12]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb8:	461a      	mov	r2, r3
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	f003 fa6b 	bl	800b096 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68da      	ldr	r2, [r3, #12]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc8:	425b      	negs	r3, r3
 8007bca:	441a      	add	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d207      	bcs.n	8007bec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	689a      	ldr	r2, [r3, #8]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be4:	425b      	negs	r3, r3
 8007be6:	441a      	add	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d105      	bne.n	8007bfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c06:	697b      	ldr	r3, [r7, #20]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	441a      	add	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68da      	ldr	r2, [r3, #12]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d303      	bcc.n	8007c44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68d9      	ldr	r1, [r3, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	6838      	ldr	r0, [r7, #0]
 8007c50:	f003 fa21 	bl	800b096 <memcpy>
	}
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007c64:	f001 fe68 	bl	8009938 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c70:	e011      	b.n	8007c96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d012      	beq.n	8007ca0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	3324      	adds	r3, #36	@ 0x24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 fe18 	bl	80088b4 <xTaskRemoveFromEventList>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c8a:	f000 fef1 	bl	8008a70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	dce9      	bgt.n	8007c72 <prvUnlockQueue+0x16>
 8007c9e:	e000      	b.n	8007ca2 <prvUnlockQueue+0x46>
					break;
 8007ca0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	22ff      	movs	r2, #255	@ 0xff
 8007ca6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007caa:	f001 fe77 	bl	800999c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007cae:	f001 fe43 	bl	8009938 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007cba:	e011      	b.n	8007ce0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3310      	adds	r3, #16
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fdf3 	bl	80088b4 <xTaskRemoveFromEventList>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007cd4:	f000 fecc 	bl	8008a70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007cd8:	7bbb      	ldrb	r3, [r7, #14]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	dce9      	bgt.n	8007cbc <prvUnlockQueue+0x60>
 8007ce8:	e000      	b.n	8007cec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007cea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	22ff      	movs	r2, #255	@ 0xff
 8007cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007cf4:	f001 fe52 	bl	800999c <vPortExitCritical>
}
 8007cf8:	bf00      	nop
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d08:	f001 fe16 	bl	8009938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d14:	2301      	movs	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	e001      	b.n	8007d1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d1e:	f001 fe3d 	bl	800999c <vPortExitCritical>

	return xReturn;
 8007d22:	68fb      	ldr	r3, [r7, #12]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d34:	f001 fe00 	bl	8009938 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d102      	bne.n	8007d4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007d44:	2301      	movs	r3, #1
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	e001      	b.n	8007d4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d4e:	f001 fe25 	bl	800999c <vPortExitCritical>

	return xReturn;
 8007d52:	68fb      	ldr	r3, [r7, #12]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e014      	b.n	8007d96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d6c:	4a0f      	ldr	r2, [pc, #60]	@ (8007dac <vQueueAddToRegistry+0x50>)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d78:	490c      	ldr	r1, [pc, #48]	@ (8007dac <vQueueAddToRegistry+0x50>)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d82:	4a0a      	ldr	r2, [pc, #40]	@ (8007dac <vQueueAddToRegistry+0x50>)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	00db      	lsls	r3, r3, #3
 8007d88:	4413      	add	r3, r2
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d8e:	e006      	b.n	8007d9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b07      	cmp	r3, #7
 8007d9a:	d9e7      	bls.n	8007d6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000ba8 	.word	0x20000ba8

08007db0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e016      	b.n	8007dec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007dbe:	4a10      	ldr	r2, [pc, #64]	@ (8007e00 <vQueueUnregisterQueue+0x50>)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	00db      	lsls	r3, r3, #3
 8007dc4:	4413      	add	r3, r2
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d10b      	bne.n	8007de6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007dce:	4a0c      	ldr	r2, [pc, #48]	@ (8007e00 <vQueueUnregisterQueue+0x50>)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007dd8:	4a09      	ldr	r2, [pc, #36]	@ (8007e00 <vQueueUnregisterQueue+0x50>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	00db      	lsls	r3, r3, #3
 8007dde:	4413      	add	r3, r2
 8007de0:	2200      	movs	r2, #0
 8007de2:	605a      	str	r2, [r3, #4]
				break;
 8007de4:	e006      	b.n	8007df4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	3301      	adds	r3, #1
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b07      	cmp	r3, #7
 8007df0:	d9e5      	bls.n	8007dbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000ba8 	.word	0x20000ba8

08007e04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e14:	f001 fd90 	bl	8009938 <vPortEnterCritical>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e24:	d103      	bne.n	8007e2e <vQueueWaitForMessageRestricted+0x2a>
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e34:	b25b      	sxtb	r3, r3
 8007e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e3a:	d103      	bne.n	8007e44 <vQueueWaitForMessageRestricted+0x40>
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e44:	f001 fdaa 	bl	800999c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	3324      	adds	r3, #36	@ 0x24
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	68b9      	ldr	r1, [r7, #8]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f000 fcff 	bl	800885c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e5e:	6978      	ldr	r0, [r7, #20]
 8007e60:	f7ff fefc 	bl	8007c5c <prvUnlockQueue>
	}
 8007e64:	bf00      	nop
 8007e66:	3718      	adds	r7, #24
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	@ 0x38
 8007e70:	af04      	add	r7, sp, #16
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	623b      	str	r3, [r7, #32]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10b      	bne.n	8007eb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	f383 8811 	msr	BASEPRI, r3
 8007ea6:	f3bf 8f6f 	isb	sy
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	61fb      	str	r3, [r7, #28]
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	e7fd      	b.n	8007eb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007eb6:	23a8      	movs	r3, #168	@ 0xa8
 8007eb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	2ba8      	cmp	r3, #168	@ 0xa8
 8007ebe:	d00b      	beq.n	8007ed8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	61bb      	str	r3, [r7, #24]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ed8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d01e      	beq.n	8007f1e <xTaskCreateStatic+0xb2>
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01b      	beq.n	8007f1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ee8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007eee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9303      	str	r3, [sp, #12]
 8007efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efe:	9302      	str	r3, [sp, #8]
 8007f00:	f107 0314 	add.w	r3, r7, #20
 8007f04:	9301      	str	r3, [sp, #4]
 8007f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 f851 	bl	8007fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f18:	f000 f8f6 	bl	8008108 <prvAddNewTaskToReadyList>
 8007f1c:	e001      	b.n	8007f22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f22:	697b      	ldr	r3, [r7, #20]
	}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	@ 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b08c      	sub	sp, #48	@ 0x30
 8007f30:	af04      	add	r7, sp, #16
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f001 fe1b 	bl	8009b7c <pvPortMalloc>
 8007f46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00e      	beq.n	8007f6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f4e:	20a8      	movs	r0, #168	@ 0xa8
 8007f50:	f001 fe14 	bl	8009b7c <pvPortMalloc>
 8007f54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f62:	e005      	b.n	8007f70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f64:	6978      	ldr	r0, [r7, #20]
 8007f66:	f001 fed7 	bl	8009d18 <vPortFree>
 8007f6a:	e001      	b.n	8007f70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f70:	69fb      	ldr	r3, [r7, #28]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d017      	beq.n	8007fa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f7e:	88fa      	ldrh	r2, [r7, #6]
 8007f80:	2300      	movs	r3, #0
 8007f82:	9303      	str	r3, [sp, #12]
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 f80f 	bl	8007fb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f9a:	69f8      	ldr	r0, [r7, #28]
 8007f9c:	f000 f8b4 	bl	8008108 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	e002      	b.n	8007fac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8007faa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fac:	69bb      	ldr	r3, [r7, #24]
	}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	21a5      	movs	r1, #165	@ 0xa5
 8007fd2:	f002 ff82 	bl	800aeda <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4413      	add	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	f023 0307 	bic.w	r3, r3, #7
 8007fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	f003 0307 	and.w	r3, r3, #7
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00b      	beq.n	8008012 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	617b      	str	r3, [r7, #20]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d01f      	beq.n	8008058 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008018:	2300      	movs	r3, #0
 800801a:	61fb      	str	r3, [r7, #28]
 800801c:	e012      	b.n	8008044 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	4413      	add	r3, r2
 8008024:	7819      	ldrb	r1, [r3, #0]
 8008026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	3334      	adds	r3, #52	@ 0x34
 800802e:	460a      	mov	r2, r1
 8008030:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008032:	68ba      	ldr	r2, [r7, #8]
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	4413      	add	r3, r2
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	3301      	adds	r3, #1
 8008042:	61fb      	str	r3, [r7, #28]
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	2b0f      	cmp	r3, #15
 8008048:	d9e9      	bls.n	800801e <prvInitialiseNewTask+0x66>
 800804a:	e000      	b.n	800804e <prvInitialiseNewTask+0x96>
			{
				break;
 800804c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008056:	e003      	b.n	8008060 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805a:	2200      	movs	r2, #0
 800805c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008062:	2b37      	cmp	r3, #55	@ 0x37
 8008064:	d901      	bls.n	800806a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008066:	2337      	movs	r3, #55	@ 0x37
 8008068:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800806e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008074:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008078:	2200      	movs	r2, #0
 800807a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800807c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807e:	3304      	adds	r3, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fd3d 	bl	8006b00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	3318      	adds	r3, #24
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe fd38 	bl	8006b00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008094:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008098:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800809c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	2200      	movs	r2, #0
 80080aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2200      	movs	r2, #0
 80080b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	3354      	adds	r3, #84	@ 0x54
 80080ba:	224c      	movs	r2, #76	@ 0x4c
 80080bc:	2100      	movs	r1, #0
 80080be:	4618      	mov	r0, r3
 80080c0:	f002 ff0b 	bl	800aeda <memset>
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c6:	4a0d      	ldr	r2, [pc, #52]	@ (80080fc <prvInitialiseNewTask+0x144>)
 80080c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008100 <prvInitialiseNewTask+0x148>)
 80080ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008104 <prvInitialiseNewTask+0x14c>)
 80080d4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	68f9      	ldr	r1, [r7, #12]
 80080da:	69b8      	ldr	r0, [r7, #24]
 80080dc:	f001 fafc 	bl	80096d8 <pxPortInitialiseStack>
 80080e0:	4602      	mov	r2, r0
 80080e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f2:	bf00      	nop
 80080f4:	3720      	adds	r7, #32
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	20004e3c 	.word	0x20004e3c
 8008100:	20004ea4 	.word	0x20004ea4
 8008104:	20004f0c 	.word	0x20004f0c

08008108 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008110:	f001 fc12 	bl	8009938 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008114:	4b2d      	ldr	r3, [pc, #180]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3301      	adds	r3, #1
 800811a:	4a2c      	ldr	r2, [pc, #176]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 800811c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800811e:	4b2c      	ldr	r3, [pc, #176]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008126:	4a2a      	ldr	r2, [pc, #168]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800812c:	4b27      	ldr	r3, [pc, #156]	@ (80081cc <prvAddNewTaskToReadyList+0xc4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d110      	bne.n	8008156 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008134:	f000 fcc0 	bl	8008ab8 <prvInitialiseTaskLists>
 8008138:	e00d      	b.n	8008156 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800813a:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <prvAddNewTaskToReadyList+0xcc>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d109      	bne.n	8008156 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008142:	4b23      	ldr	r3, [pc, #140]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	429a      	cmp	r2, r3
 800814e:	d802      	bhi.n	8008156 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008150:	4a1f      	ldr	r2, [pc, #124]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008156:	4b20      	ldr	r3, [pc, #128]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3301      	adds	r3, #1
 800815c:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 800815e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008160:	4b1d      	ldr	r3, [pc, #116]	@ (80081d8 <prvAddNewTaskToReadyList+0xd0>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800816c:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <prvAddNewTaskToReadyList+0xd4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d903      	bls.n	800817c <prvAddNewTaskToReadyList+0x74>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008178:	4a18      	ldr	r2, [pc, #96]	@ (80081dc <prvAddNewTaskToReadyList+0xd4>)
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008180:	4613      	mov	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4a15      	ldr	r2, [pc, #84]	@ (80081e0 <prvAddNewTaskToReadyList+0xd8>)
 800818a:	441a      	add	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3304      	adds	r3, #4
 8008190:	4619      	mov	r1, r3
 8008192:	4610      	mov	r0, r2
 8008194:	f7fe fcc1 	bl	8006b1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008198:	f001 fc00 	bl	800999c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800819c:	4b0d      	ldr	r3, [pc, #52]	@ (80081d4 <prvAddNewTaskToReadyList+0xcc>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081a4:	4b0a      	ldr	r3, [pc, #40]	@ (80081d0 <prvAddNewTaskToReadyList+0xc8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d207      	bcs.n	80081c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081b2:	4b0c      	ldr	r3, [pc, #48]	@ (80081e4 <prvAddNewTaskToReadyList+0xdc>)
 80081b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	200010bc 	.word	0x200010bc
 80081d0:	20000be8 	.word	0x20000be8
 80081d4:	200010c8 	.word	0x200010c8
 80081d8:	200010d8 	.word	0x200010d8
 80081dc:	200010c4 	.word	0x200010c4
 80081e0:	20000bec 	.word	0x20000bec
 80081e4:	e000ed04 	.word	0xe000ed04

080081e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	@ 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <vTaskDelayUntil+0x2c>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	617b      	str	r3, [r7, #20]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <vTaskDelayUntil+0x4a>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	613b      	str	r3, [r7, #16]
}
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8008232:	4b2a      	ldr	r3, [pc, #168]	@ (80082dc <vTaskDelayUntil+0xf4>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00b      	beq.n	8008252 <vTaskDelayUntil+0x6a>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	60fb      	str	r3, [r7, #12]
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	e7fd      	b.n	800824e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8008252:	f000 f8ef 	bl	8008434 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008256:	4b22      	ldr	r3, [pc, #136]	@ (80082e0 <vTaskDelayUntil+0xf8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	4413      	add	r3, r2
 8008264:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6a3a      	ldr	r2, [r7, #32]
 800826c:	429a      	cmp	r2, r3
 800826e:	d20b      	bcs.n	8008288 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	429a      	cmp	r2, r3
 8008278:	d211      	bcs.n	800829e <vTaskDelayUntil+0xb6>
 800827a:	69fa      	ldr	r2, [r7, #28]
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	429a      	cmp	r2, r3
 8008280:	d90d      	bls.n	800829e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8008282:	2301      	movs	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	@ 0x24
 8008286:	e00a      	b.n	800829e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69fa      	ldr	r2, [r7, #28]
 800828e:	429a      	cmp	r2, r3
 8008290:	d303      	bcc.n	800829a <vTaskDelayUntil+0xb2>
 8008292:	69fa      	ldr	r2, [r7, #28]
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	429a      	cmp	r2, r3
 8008298:	d901      	bls.n	800829e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800829a:	2301      	movs	r3, #1
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80082a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d006      	beq.n	80082b8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80082aa:	69fa      	ldr	r2, [r7, #28]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2100      	movs	r1, #0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fe62 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80082b8:	f000 f8ca 	bl	8008450 <xTaskResumeAll>
 80082bc:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d107      	bne.n	80082d4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80082c4:	4b07      	ldr	r3, [pc, #28]	@ (80082e4 <vTaskDelayUntil+0xfc>)
 80082c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082ca:	601a      	str	r2, [r3, #0]
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082d4:	bf00      	nop
 80082d6:	3728      	adds	r7, #40	@ 0x28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	200010e4 	.word	0x200010e4
 80082e0:	200010c0 	.word	0x200010c0
 80082e4:	e000ed04 	.word	0xe000ed04

080082e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082f0:	2300      	movs	r3, #0
 80082f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d018      	beq.n	800832c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082fa:	4b14      	ldr	r3, [pc, #80]	@ (800834c <vTaskDelay+0x64>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00b      	beq.n	800831a <vTaskDelay+0x32>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop
 8008318:	e7fd      	b.n	8008316 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800831a:	f000 f88b 	bl	8008434 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800831e:	2100      	movs	r1, #0
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fe2b 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008326:	f000 f893 	bl	8008450 <xTaskResumeAll>
 800832a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008332:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <vTaskDelay+0x68>)
 8008334:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	200010e4 	.word	0x200010e4
 8008350:	e000ed04 	.word	0xe000ed04

08008354 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08a      	sub	sp, #40	@ 0x28
 8008358:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008362:	463a      	mov	r2, r7
 8008364:	1d39      	adds	r1, r7, #4
 8008366:	f107 0308 	add.w	r3, r7, #8
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fb74 	bl	8006a58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008370:	6839      	ldr	r1, [r7, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	9202      	str	r2, [sp, #8]
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	2300      	movs	r3, #0
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	2300      	movs	r3, #0
 8008380:	460a      	mov	r2, r1
 8008382:	4924      	ldr	r1, [pc, #144]	@ (8008414 <vTaskStartScheduler+0xc0>)
 8008384:	4824      	ldr	r0, [pc, #144]	@ (8008418 <vTaskStartScheduler+0xc4>)
 8008386:	f7ff fd71 	bl	8007e6c <xTaskCreateStatic>
 800838a:	4603      	mov	r3, r0
 800838c:	4a23      	ldr	r2, [pc, #140]	@ (800841c <vTaskStartScheduler+0xc8>)
 800838e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008390:	4b22      	ldr	r3, [pc, #136]	@ (800841c <vTaskStartScheduler+0xc8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008398:	2301      	movs	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
 800839c:	e001      	b.n	80083a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800839e:	2300      	movs	r3, #0
 80083a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d102      	bne.n	80083ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083a8:	f000 fe3c 	bl	8009024 <xTimerCreateTimerTask>
 80083ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d11b      	bne.n	80083ec <vTaskStartScheduler+0x98>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	613b      	str	r3, [r7, #16]
}
 80083c6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <vTaskStartScheduler+0xcc>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3354      	adds	r3, #84	@ 0x54
 80083ce:	4a15      	ldr	r2, [pc, #84]	@ (8008424 <vTaskStartScheduler+0xd0>)
 80083d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083d2:	4b15      	ldr	r3, [pc, #84]	@ (8008428 <vTaskStartScheduler+0xd4>)
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295
 80083d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083da:	4b14      	ldr	r3, [pc, #80]	@ (800842c <vTaskStartScheduler+0xd8>)
 80083dc:	2201      	movs	r2, #1
 80083de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083e0:	4b13      	ldr	r3, [pc, #76]	@ (8008430 <vTaskStartScheduler+0xdc>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083e6:	f001 fa03 	bl	80097f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083ea:	e00f      	b.n	800840c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f2:	d10b      	bne.n	800840c <vTaskStartScheduler+0xb8>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	60fb      	str	r3, [r7, #12]
}
 8008406:	bf00      	nop
 8008408:	bf00      	nop
 800840a:	e7fd      	b.n	8008408 <vTaskStartScheduler+0xb4>
}
 800840c:	bf00      	nop
 800840e:	3718      	adds	r7, #24
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	0800e920 	.word	0x0800e920
 8008418:	08008a89 	.word	0x08008a89
 800841c:	200010e0 	.word	0x200010e0
 8008420:	20000be8 	.word	0x20000be8
 8008424:	20000020 	.word	0x20000020
 8008428:	200010dc 	.word	0x200010dc
 800842c:	200010c8 	.word	0x200010c8
 8008430:	200010c0 	.word	0x200010c0

08008434 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008434:	b480      	push	{r7}
 8008436:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008438:	4b04      	ldr	r3, [pc, #16]	@ (800844c <vTaskSuspendAll+0x18>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	3301      	adds	r3, #1
 800843e:	4a03      	ldr	r2, [pc, #12]	@ (800844c <vTaskSuspendAll+0x18>)
 8008440:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008442:	bf00      	nop
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	200010e4 	.word	0x200010e4

08008450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800845a:	2300      	movs	r3, #0
 800845c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800845e:	4b42      	ldr	r3, [pc, #264]	@ (8008568 <xTaskResumeAll+0x118>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10b      	bne.n	800847e <xTaskResumeAll+0x2e>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	603b      	str	r3, [r7, #0]
}
 8008478:	bf00      	nop
 800847a:	bf00      	nop
 800847c:	e7fd      	b.n	800847a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800847e:	f001 fa5b 	bl	8009938 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008482:	4b39      	ldr	r3, [pc, #228]	@ (8008568 <xTaskResumeAll+0x118>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3b01      	subs	r3, #1
 8008488:	4a37      	ldr	r2, [pc, #220]	@ (8008568 <xTaskResumeAll+0x118>)
 800848a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800848c:	4b36      	ldr	r3, [pc, #216]	@ (8008568 <xTaskResumeAll+0x118>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d162      	bne.n	800855a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008494:	4b35      	ldr	r3, [pc, #212]	@ (800856c <xTaskResumeAll+0x11c>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d05e      	beq.n	800855a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800849c:	e02f      	b.n	80084fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800849e:	4b34      	ldr	r3, [pc, #208]	@ (8008570 <xTaskResumeAll+0x120>)
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	3318      	adds	r3, #24
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fe fb92 	bl	8006bd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fb8d 	bl	8006bd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4b2d      	ldr	r3, [pc, #180]	@ (8008574 <xTaskResumeAll+0x124>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d903      	bls.n	80084ce <xTaskResumeAll+0x7e>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008574 <xTaskResumeAll+0x124>)
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084d2:	4613      	mov	r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4a27      	ldr	r2, [pc, #156]	@ (8008578 <xTaskResumeAll+0x128>)
 80084dc:	441a      	add	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3304      	adds	r3, #4
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f7fe fb18 	bl	8006b1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ee:	4b23      	ldr	r3, [pc, #140]	@ (800857c <xTaskResumeAll+0x12c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d302      	bcc.n	80084fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084f8:	4b21      	ldr	r3, [pc, #132]	@ (8008580 <xTaskResumeAll+0x130>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008570 <xTaskResumeAll+0x120>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1cb      	bne.n	800849e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800850c:	f000 fb78 	bl	8008c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008510:	4b1c      	ldr	r3, [pc, #112]	@ (8008584 <xTaskResumeAll+0x134>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d010      	beq.n	800853e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800851c:	f000 f858 	bl	80085d0 <xTaskIncrementTick>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008526:	4b16      	ldr	r3, [pc, #88]	@ (8008580 <xTaskResumeAll+0x130>)
 8008528:	2201      	movs	r2, #1
 800852a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3b01      	subs	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1f1      	bne.n	800851c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008538:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <xTaskResumeAll+0x134>)
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800853e:	4b10      	ldr	r3, [pc, #64]	@ (8008580 <xTaskResumeAll+0x130>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800854a:	4b0f      	ldr	r3, [pc, #60]	@ (8008588 <xTaskResumeAll+0x138>)
 800854c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800855a:	f001 fa1f 	bl	800999c <vPortExitCritical>

	return xAlreadyYielded;
 800855e:	68bb      	ldr	r3, [r7, #8]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	200010e4 	.word	0x200010e4
 800856c:	200010bc 	.word	0x200010bc
 8008570:	2000107c 	.word	0x2000107c
 8008574:	200010c4 	.word	0x200010c4
 8008578:	20000bec 	.word	0x20000bec
 800857c:	20000be8 	.word	0x20000be8
 8008580:	200010d0 	.word	0x200010d0
 8008584:	200010cc 	.word	0x200010cc
 8008588:	e000ed04 	.word	0xe000ed04

0800858c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008592:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <xTaskGetTickCount+0x1c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008598:	687b      	ldr	r3, [r7, #4]
}
 800859a:	4618      	mov	r0, r3
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	200010c0 	.word	0x200010c0

080085ac <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085b2:	f001 faa1 	bl	8009af8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80085ba:	4b04      	ldr	r3, [pc, #16]	@ (80085cc <xTaskGetTickCountFromISR+0x20>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085c0:	683b      	ldr	r3, [r7, #0]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200010c0 	.word	0x200010c0

080085d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085da:	4b4f      	ldr	r3, [pc, #316]	@ (8008718 <xTaskIncrementTick+0x148>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 8090 	bne.w	8008704 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085e4:	4b4d      	ldr	r3, [pc, #308]	@ (800871c <xTaskIncrementTick+0x14c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085ec:	4a4b      	ldr	r2, [pc, #300]	@ (800871c <xTaskIncrementTick+0x14c>)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d121      	bne.n	800863c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085f8:	4b49      	ldr	r3, [pc, #292]	@ (8008720 <xTaskIncrementTick+0x150>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	603b      	str	r3, [r7, #0]
}
 8008614:	bf00      	nop
 8008616:	bf00      	nop
 8008618:	e7fd      	b.n	8008616 <xTaskIncrementTick+0x46>
 800861a:	4b41      	ldr	r3, [pc, #260]	@ (8008720 <xTaskIncrementTick+0x150>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	4b40      	ldr	r3, [pc, #256]	@ (8008724 <xTaskIncrementTick+0x154>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a3e      	ldr	r2, [pc, #248]	@ (8008720 <xTaskIncrementTick+0x150>)
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	4a3e      	ldr	r2, [pc, #248]	@ (8008724 <xTaskIncrementTick+0x154>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	4b3e      	ldr	r3, [pc, #248]	@ (8008728 <xTaskIncrementTick+0x158>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	4a3c      	ldr	r2, [pc, #240]	@ (8008728 <xTaskIncrementTick+0x158>)
 8008636:	6013      	str	r3, [r2, #0]
 8008638:	f000 fae2 	bl	8008c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800863c:	4b3b      	ldr	r3, [pc, #236]	@ (800872c <xTaskIncrementTick+0x15c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	429a      	cmp	r2, r3
 8008644:	d349      	bcc.n	80086da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008646:	4b36      	ldr	r3, [pc, #216]	@ (8008720 <xTaskIncrementTick+0x150>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d104      	bne.n	800865a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008650:	4b36      	ldr	r3, [pc, #216]	@ (800872c <xTaskIncrementTick+0x15c>)
 8008652:	f04f 32ff 	mov.w	r2, #4294967295
 8008656:	601a      	str	r2, [r3, #0]
					break;
 8008658:	e03f      	b.n	80086da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800865a:	4b31      	ldr	r3, [pc, #196]	@ (8008720 <xTaskIncrementTick+0x150>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	429a      	cmp	r2, r3
 8008670:	d203      	bcs.n	800867a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008672:	4a2e      	ldr	r2, [pc, #184]	@ (800872c <xTaskIncrementTick+0x15c>)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008678:	e02f      	b.n	80086da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	3304      	adds	r3, #4
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe faa8 	bl	8006bd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	3318      	adds	r3, #24
 8008690:	4618      	mov	r0, r3
 8008692:	f7fe fa9f 	bl	8006bd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800869a:	4b25      	ldr	r3, [pc, #148]	@ (8008730 <xTaskIncrementTick+0x160>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d903      	bls.n	80086aa <xTaskIncrementTick+0xda>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a6:	4a22      	ldr	r2, [pc, #136]	@ (8008730 <xTaskIncrementTick+0x160>)
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ae:	4613      	mov	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4413      	add	r3, r2
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4a1f      	ldr	r2, [pc, #124]	@ (8008734 <xTaskIncrementTick+0x164>)
 80086b8:	441a      	add	r2, r3
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe fa2a 	bl	8006b1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ca:	4b1b      	ldr	r3, [pc, #108]	@ (8008738 <xTaskIncrementTick+0x168>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3b8      	bcc.n	8008646 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80086d4:	2301      	movs	r3, #1
 80086d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d8:	e7b5      	b.n	8008646 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086da:	4b17      	ldr	r3, [pc, #92]	@ (8008738 <xTaskIncrementTick+0x168>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e0:	4914      	ldr	r1, [pc, #80]	@ (8008734 <xTaskIncrementTick+0x164>)
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	440b      	add	r3, r1
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d901      	bls.n	80086f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80086f2:	2301      	movs	r3, #1
 80086f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086f6:	4b11      	ldr	r3, [pc, #68]	@ (800873c <xTaskIncrementTick+0x16c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d007      	beq.n	800870e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80086fe:	2301      	movs	r3, #1
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e004      	b.n	800870e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008704:	4b0e      	ldr	r3, [pc, #56]	@ (8008740 <xTaskIncrementTick+0x170>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	4a0d      	ldr	r2, [pc, #52]	@ (8008740 <xTaskIncrementTick+0x170>)
 800870c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800870e:	697b      	ldr	r3, [r7, #20]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	200010e4 	.word	0x200010e4
 800871c:	200010c0 	.word	0x200010c0
 8008720:	20001074 	.word	0x20001074
 8008724:	20001078 	.word	0x20001078
 8008728:	200010d4 	.word	0x200010d4
 800872c:	200010dc 	.word	0x200010dc
 8008730:	200010c4 	.word	0x200010c4
 8008734:	20000bec 	.word	0x20000bec
 8008738:	20000be8 	.word	0x20000be8
 800873c:	200010d0 	.word	0x200010d0
 8008740:	200010cc 	.word	0x200010cc

08008744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800874a:	4b2b      	ldr	r3, [pc, #172]	@ (80087f8 <vTaskSwitchContext+0xb4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008752:	4b2a      	ldr	r3, [pc, #168]	@ (80087fc <vTaskSwitchContext+0xb8>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008758:	e047      	b.n	80087ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800875a:	4b28      	ldr	r3, [pc, #160]	@ (80087fc <vTaskSwitchContext+0xb8>)
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	4b27      	ldr	r3, [pc, #156]	@ (8008800 <vTaskSwitchContext+0xbc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e011      	b.n	800878c <vTaskSwitchContext+0x48>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10b      	bne.n	8008786 <vTaskSwitchContext+0x42>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
 8008782:	bf00      	nop
 8008784:	e7fd      	b.n	8008782 <vTaskSwitchContext+0x3e>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3b01      	subs	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	491d      	ldr	r1, [pc, #116]	@ (8008804 <vTaskSwitchContext+0xc0>)
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4613      	mov	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0e3      	beq.n	8008768 <vTaskSwitchContext+0x24>
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4a16      	ldr	r2, [pc, #88]	@ (8008804 <vTaskSwitchContext+0xc0>)
 80087ac:	4413      	add	r3, r2
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	3308      	adds	r3, #8
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d104      	bne.n	80087d0 <vTaskSwitchContext+0x8c>
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	605a      	str	r2, [r3, #4]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008808 <vTaskSwitchContext+0xc4>)
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	4a09      	ldr	r2, [pc, #36]	@ (8008800 <vTaskSwitchContext+0xbc>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087e0:	4b09      	ldr	r3, [pc, #36]	@ (8008808 <vTaskSwitchContext+0xc4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	3354      	adds	r3, #84	@ 0x54
 80087e6:	4a09      	ldr	r2, [pc, #36]	@ (800880c <vTaskSwitchContext+0xc8>)
 80087e8:	6013      	str	r3, [r2, #0]
}
 80087ea:	bf00      	nop
 80087ec:	3714      	adds	r7, #20
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr
 80087f6:	bf00      	nop
 80087f8:	200010e4 	.word	0x200010e4
 80087fc:	200010d0 	.word	0x200010d0
 8008800:	200010c4 	.word	0x200010c4
 8008804:	20000bec 	.word	0x20000bec
 8008808:	20000be8 	.word	0x20000be8
 800880c:	20000020 	.word	0x20000020

08008810 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	60fb      	str	r3, [r7, #12]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008838:	4b07      	ldr	r3, [pc, #28]	@ (8008858 <vTaskPlaceOnEventList+0x48>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	3318      	adds	r3, #24
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7fe f98e 	bl	8006b62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008846:	2101      	movs	r1, #1
 8008848:	6838      	ldr	r0, [r7, #0]
 800884a:	f000 fb97 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	20000be8 	.word	0x20000be8

0800885c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800885c:	b580      	push	{r7, lr}
 800885e:	b086      	sub	sp, #24
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008886:	4b0a      	ldr	r3, [pc, #40]	@ (80088b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3318      	adds	r3, #24
 800888c:	4619      	mov	r1, r3
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f7fe f943 	bl	8006b1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800889a:	f04f 33ff 	mov.w	r3, #4294967295
 800889e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	68b8      	ldr	r0, [r7, #8]
 80088a4:	f000 fb6a 	bl	8008f7c <prvAddCurrentTaskToDelayedList>
	}
 80088a8:	bf00      	nop
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	20000be8 	.word	0x20000be8

080088b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b086      	sub	sp, #24
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	60fb      	str	r3, [r7, #12]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	3318      	adds	r3, #24
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe f974 	bl	8006bd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <xTaskRemoveFromEventList+0xb0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d11d      	bne.n	8008930 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe f96b 	bl	8006bd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008902:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <xTaskRemoveFromEventList+0xb4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d903      	bls.n	8008912 <xTaskRemoveFromEventList+0x5e>
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	4a16      	ldr	r2, [pc, #88]	@ (8008968 <xTaskRemoveFromEventList+0xb4>)
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4a13      	ldr	r2, [pc, #76]	@ (800896c <xTaskRemoveFromEventList+0xb8>)
 8008920:	441a      	add	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fe f8f6 	bl	8006b1a <vListInsertEnd>
 800892e:	e005      	b.n	800893c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	3318      	adds	r3, #24
 8008934:	4619      	mov	r1, r3
 8008936:	480e      	ldr	r0, [pc, #56]	@ (8008970 <xTaskRemoveFromEventList+0xbc>)
 8008938:	f7fe f8ef 	bl	8006b1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <xTaskRemoveFromEventList+0xc0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d905      	bls.n	8008956 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800894a:	2301      	movs	r3, #1
 800894c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800894e:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <xTaskRemoveFromEventList+0xc4>)
 8008950:	2201      	movs	r2, #1
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	e001      	b.n	800895a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008956:	2300      	movs	r3, #0
 8008958:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800895a:	697b      	ldr	r3, [r7, #20]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	200010e4 	.word	0x200010e4
 8008968:	200010c4 	.word	0x200010c4
 800896c:	20000bec 	.word	0x20000bec
 8008970:	2000107c 	.word	0x2000107c
 8008974:	20000be8 	.word	0x20000be8
 8008978:	200010d0 	.word	0x200010d0

0800897c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008984:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <vTaskInternalSetTimeOutState+0x24>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800898c:	4b05      	ldr	r3, [pc, #20]	@ (80089a4 <vTaskInternalSetTimeOutState+0x28>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	605a      	str	r2, [r3, #4]
}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	200010d4 	.word	0x200010d4
 80089a4:	200010c0 	.word	0x200010c0

080089a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b088      	sub	sp, #32
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	613b      	str	r3, [r7, #16]
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	e7fd      	b.n	80089cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10b      	bne.n	80089ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	60fb      	str	r3, [r7, #12]
}
 80089e8:	bf00      	nop
 80089ea:	bf00      	nop
 80089ec:	e7fd      	b.n	80089ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80089ee:	f000 ffa3 	bl	8009938 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089f2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a68 <xTaskCheckForTimeOut+0xc0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d102      	bne.n	8008a12 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
 8008a10:	e023      	b.n	8008a5a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	4b15      	ldr	r3, [pc, #84]	@ (8008a6c <xTaskCheckForTimeOut+0xc4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d007      	beq.n	8008a2e <xTaskCheckForTimeOut+0x86>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d302      	bcc.n	8008a2e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	61fb      	str	r3, [r7, #28]
 8008a2c:	e015      	b.n	8008a5a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d20b      	bcs.n	8008a50 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad2      	subs	r2, r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f7ff ff99 	bl	800897c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61fb      	str	r3, [r7, #28]
 8008a4e:	e004      	b.n	8008a5a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a5a:	f000 ff9f 	bl	800999c <vPortExitCritical>

	return xReturn;
 8008a5e:	69fb      	ldr	r3, [r7, #28]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	200010c0 	.word	0x200010c0
 8008a6c:	200010d4 	.word	0x200010d4

08008a70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a74:	4b03      	ldr	r3, [pc, #12]	@ (8008a84 <vTaskMissedYield+0x14>)
 8008a76:	2201      	movs	r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	200010d0 	.word	0x200010d0

08008a88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a90:	f000 f852 	bl	8008b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a94:	4b06      	ldr	r3, [pc, #24]	@ (8008ab0 <prvIdleTask+0x28>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d9f9      	bls.n	8008a90 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <prvIdleTask+0x2c>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008aac:	e7f0      	b.n	8008a90 <prvIdleTask+0x8>
 8008aae:	bf00      	nop
 8008ab0:	20000bec 	.word	0x20000bec
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b082      	sub	sp, #8
 8008abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008abe:	2300      	movs	r3, #0
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	e00c      	b.n	8008ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	4a12      	ldr	r2, [pc, #72]	@ (8008b18 <prvInitialiseTaskLists+0x60>)
 8008ad0:	4413      	add	r3, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fd fff4 	bl	8006ac0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	3301      	adds	r3, #1
 8008adc:	607b      	str	r3, [r7, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b37      	cmp	r3, #55	@ 0x37
 8008ae2:	d9ef      	bls.n	8008ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ae4:	480d      	ldr	r0, [pc, #52]	@ (8008b1c <prvInitialiseTaskLists+0x64>)
 8008ae6:	f7fd ffeb 	bl	8006ac0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008aea:	480d      	ldr	r0, [pc, #52]	@ (8008b20 <prvInitialiseTaskLists+0x68>)
 8008aec:	f7fd ffe8 	bl	8006ac0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008af0:	480c      	ldr	r0, [pc, #48]	@ (8008b24 <prvInitialiseTaskLists+0x6c>)
 8008af2:	f7fd ffe5 	bl	8006ac0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008af6:	480c      	ldr	r0, [pc, #48]	@ (8008b28 <prvInitialiseTaskLists+0x70>)
 8008af8:	f7fd ffe2 	bl	8006ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008afc:	480b      	ldr	r0, [pc, #44]	@ (8008b2c <prvInitialiseTaskLists+0x74>)
 8008afe:	f7fd ffdf 	bl	8006ac0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b02:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <prvInitialiseTaskLists+0x78>)
 8008b04:	4a05      	ldr	r2, [pc, #20]	@ (8008b1c <prvInitialiseTaskLists+0x64>)
 8008b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b08:	4b0a      	ldr	r3, [pc, #40]	@ (8008b34 <prvInitialiseTaskLists+0x7c>)
 8008b0a:	4a05      	ldr	r2, [pc, #20]	@ (8008b20 <prvInitialiseTaskLists+0x68>)
 8008b0c:	601a      	str	r2, [r3, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000bec 	.word	0x20000bec
 8008b1c:	2000104c 	.word	0x2000104c
 8008b20:	20001060 	.word	0x20001060
 8008b24:	2000107c 	.word	0x2000107c
 8008b28:	20001090 	.word	0x20001090
 8008b2c:	200010a8 	.word	0x200010a8
 8008b30:	20001074 	.word	0x20001074
 8008b34:	20001078 	.word	0x20001078

08008b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b3e:	e019      	b.n	8008b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b40:	f000 fefa 	bl	8009938 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b44:	4b10      	ldr	r3, [pc, #64]	@ (8008b88 <prvCheckTasksWaitingTermination+0x50>)
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe f83f 	bl	8006bd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b56:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <prvCheckTasksWaitingTermination+0x54>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8008b8c <prvCheckTasksWaitingTermination+0x54>)
 8008b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b60:	4b0b      	ldr	r3, [pc, #44]	@ (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	4a0a      	ldr	r2, [pc, #40]	@ (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b6a:	f000 ff17 	bl	800999c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f810 	bl	8008b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b74:	4b06      	ldr	r3, [pc, #24]	@ (8008b90 <prvCheckTasksWaitingTermination+0x58>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1e1      	bne.n	8008b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b7c:	bf00      	nop
 8008b7e:	bf00      	nop
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20001090 	.word	0x20001090
 8008b8c:	200010bc 	.word	0x200010bc
 8008b90:	200010a4 	.word	0x200010a4

08008b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	3354      	adds	r3, #84	@ 0x54
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f002 f9b7 	bl	800af14 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d108      	bne.n	8008bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f001 f8af 	bl	8009d18 <vPortFree>
				vPortFree( pxTCB );
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f8ac 	bl	8009d18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bc0:	e019      	b.n	8008bf6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d103      	bne.n	8008bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f001 f8a3 	bl	8009d18 <vPortFree>
	}
 8008bd2:	e010      	b.n	8008bf6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d00b      	beq.n	8008bf6 <prvDeleteTCB+0x62>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	60fb      	str	r3, [r7, #12]
}
 8008bf0:	bf00      	nop
 8008bf2:	bf00      	nop
 8008bf4:	e7fd      	b.n	8008bf2 <prvDeleteTCB+0x5e>
	}
 8008bf6:	bf00      	nop
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
	...

08008c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c06:	4b0c      	ldr	r3, [pc, #48]	@ (8008c38 <prvResetNextTaskUnblockTime+0x38>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d104      	bne.n	8008c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c10:	4b0a      	ldr	r3, [pc, #40]	@ (8008c3c <prvResetNextTaskUnblockTime+0x3c>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c18:	e008      	b.n	8008c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1a:	4b07      	ldr	r3, [pc, #28]	@ (8008c38 <prvResetNextTaskUnblockTime+0x38>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a04      	ldr	r2, [pc, #16]	@ (8008c3c <prvResetNextTaskUnblockTime+0x3c>)
 8008c2a:	6013      	str	r3, [r2, #0]
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	20001074 	.word	0x20001074
 8008c3c:	200010dc 	.word	0x200010dc

08008c40 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008c46:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <xTaskGetCurrentTaskHandle+0x1c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008c4c:	687b      	ldr	r3, [r7, #4]
	}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20000be8 	.word	0x20000be8

08008c60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c66:	4b0b      	ldr	r3, [pc, #44]	@ (8008c94 <xTaskGetSchedulerState+0x34>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	607b      	str	r3, [r7, #4]
 8008c72:	e008      	b.n	8008c86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c74:	4b08      	ldr	r3, [pc, #32]	@ (8008c98 <xTaskGetSchedulerState+0x38>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d102      	bne.n	8008c82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	607b      	str	r3, [r7, #4]
 8008c80:	e001      	b.n	8008c86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c82:	2300      	movs	r3, #0
 8008c84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c86:	687b      	ldr	r3, [r7, #4]
	}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	200010c8 	.word	0x200010c8
 8008c98:	200010e4 	.word	0x200010e4

08008c9c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d051      	beq.n	8008d56 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8008d60 <xTaskPriorityInherit+0xc4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d241      	bcs.n	8008d44 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	db06      	blt.n	8008cd6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cc8:	4b25      	ldr	r3, [pc, #148]	@ (8008d60 <xTaskPriorityInherit+0xc4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	6959      	ldr	r1, [r3, #20]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cde:	4613      	mov	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8008d64 <xTaskPriorityInherit+0xc8>)
 8008ce8:	4413      	add	r3, r2
 8008cea:	4299      	cmp	r1, r3
 8008cec:	d122      	bne.n	8008d34 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fd ff6e 	bl	8006bd4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cf8:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <xTaskPriorityInherit+0xc4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d06:	4b18      	ldr	r3, [pc, #96]	@ (8008d68 <xTaskPriorityInherit+0xcc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d903      	bls.n	8008d16 <xTaskPriorityInherit+0x7a>
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d12:	4a15      	ldr	r2, [pc, #84]	@ (8008d68 <xTaskPriorityInherit+0xcc>)
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4a10      	ldr	r2, [pc, #64]	@ (8008d64 <xTaskPriorityInherit+0xc8>)
 8008d24:	441a      	add	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	3304      	adds	r3, #4
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	f7fd fef4 	bl	8006b1a <vListInsertEnd>
 8008d32:	e004      	b.n	8008d3e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d34:	4b0a      	ldr	r3, [pc, #40]	@ (8008d60 <xTaskPriorityInherit+0xc4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
 8008d42:	e008      	b.n	8008d56 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d48:	4b05      	ldr	r3, [pc, #20]	@ (8008d60 <xTaskPriorityInherit+0xc4>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d201      	bcs.n	8008d56 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d52:	2301      	movs	r3, #1
 8008d54:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d56:	68fb      	ldr	r3, [r7, #12]
	}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	20000be8 	.word	0x20000be8
 8008d64:	20000bec 	.word	0x20000bec
 8008d68:	200010c4 	.word	0x200010c4

08008d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d058      	beq.n	8008e34 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d82:	4b2f      	ldr	r3, [pc, #188]	@ (8008e40 <xTaskPriorityDisinherit+0xd4>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d00b      	beq.n	8008da4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60fb      	str	r3, [r7, #12]
}
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	60bb      	str	r3, [r7, #8]
}
 8008dbe:	bf00      	nop
 8008dc0:	bf00      	nop
 8008dc2:	e7fd      	b.n	8008dc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc8:	1e5a      	subs	r2, r3, #1
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d02c      	beq.n	8008e34 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d128      	bne.n	8008e34 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	3304      	adds	r3, #4
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fef4 	bl	8006bd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e04:	4b0f      	ldr	r3, [pc, #60]	@ (8008e44 <xTaskPriorityDisinherit+0xd8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d903      	bls.n	8008e14 <xTaskPriorityDisinherit+0xa8>
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e10:	4a0c      	ldr	r2, [pc, #48]	@ (8008e44 <xTaskPriorityDisinherit+0xd8>)
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4a09      	ldr	r2, [pc, #36]	@ (8008e48 <xTaskPriorityDisinherit+0xdc>)
 8008e22:	441a      	add	r2, r3
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	3304      	adds	r3, #4
 8008e28:	4619      	mov	r1, r3
 8008e2a:	4610      	mov	r0, r2
 8008e2c:	f7fd fe75 	bl	8006b1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e30:	2301      	movs	r3, #1
 8008e32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e34:	697b      	ldr	r3, [r7, #20]
	}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000be8 	.word	0x20000be8
 8008e44:	200010c4 	.word	0x200010c4
 8008e48:	20000bec 	.word	0x20000bec

08008e4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d06c      	beq.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10b      	bne.n	8008e84 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	bf00      	nop
 8008e82:	e7fd      	b.n	8008e80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d902      	bls.n	8008e94 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	61fb      	str	r3, [r7, #28]
 8008e92:	e002      	b.n	8008e9a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e98:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d04c      	beq.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d147      	bne.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008eae:	4b26      	ldr	r3, [pc, #152]	@ (8008f48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d10b      	bne.n	8008ed0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	60bb      	str	r3, [r7, #8]
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	e7fd      	b.n	8008ecc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	69fa      	ldr	r2, [r7, #28]
 8008eda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	db04      	blt.n	8008eee <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	6959      	ldr	r1, [r3, #20]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4a13      	ldr	r2, [pc, #76]	@ (8008f4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008efe:	4413      	add	r3, r2
 8008f00:	4299      	cmp	r1, r3
 8008f02:	d11c      	bne.n	8008f3e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	3304      	adds	r3, #4
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fd fe63 	bl	8006bd4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f12:	4b0f      	ldr	r3, [pc, #60]	@ (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d903      	bls.n	8008f22 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8008f50 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008f20:	6013      	str	r3, [r2, #0]
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f26:	4613      	mov	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4413      	add	r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	4a07      	ldr	r2, [pc, #28]	@ (8008f4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f30:	441a      	add	r2, r3
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	4610      	mov	r0, r2
 8008f3a:	f7fd fdee 	bl	8006b1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f3e:	bf00      	nop
 8008f40:	3720      	adds	r7, #32
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000be8 	.word	0x20000be8
 8008f4c:	20000bec 	.word	0x20000bec
 8008f50:	200010c4 	.word	0x200010c4

08008f54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008f54:	b480      	push	{r7}
 8008f56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008f58:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d004      	beq.n	8008f6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008f60:	4b05      	ldr	r3, [pc, #20]	@ (8008f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f66:	3201      	adds	r2, #1
 8008f68:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008f6a:	4b03      	ldr	r3, [pc, #12]	@ (8008f78 <pvTaskIncrementMutexHeldCount+0x24>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
	}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr
 8008f78:	20000be8 	.word	0x20000be8

08008f7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f86:	4b21      	ldr	r3, [pc, #132]	@ (800900c <prvAddCurrentTaskToDelayedList+0x90>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f8c:	4b20      	ldr	r3, [pc, #128]	@ (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3304      	adds	r3, #4
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd fe1e 	bl	8006bd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9e:	d10a      	bne.n	8008fb6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4819      	ldr	r0, [pc, #100]	@ (8009014 <prvAddCurrentTaskToDelayedList+0x98>)
 8008fb0:	f7fd fdb3 	bl	8006b1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008fb4:	e026      	b.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4413      	add	r3, r2
 8008fbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008fbe:	4b14      	ldr	r3, [pc, #80]	@ (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d209      	bcs.n	8008fe2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fce:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	3304      	adds	r3, #4
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4610      	mov	r0, r2
 8008fdc:	f7fd fdc1 	bl	8006b62 <vListInsert>
}
 8008fe0:	e010      	b.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800901c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8009010 <prvAddCurrentTaskToDelayedList+0x94>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7fd fdb7 	bl	8006b62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8009020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d202      	bcs.n	8009004 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ffe:	4a08      	ldr	r2, [pc, #32]	@ (8009020 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6013      	str	r3, [r2, #0]
}
 8009004:	bf00      	nop
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	200010c0 	.word	0x200010c0
 8009010:	20000be8 	.word	0x20000be8
 8009014:	200010a8 	.word	0x200010a8
 8009018:	20001078 	.word	0x20001078
 800901c:	20001074 	.word	0x20001074
 8009020:	200010dc 	.word	0x200010dc

08009024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08a      	sub	sp, #40	@ 0x28
 8009028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800902e:	f000 fb13 	bl	8009658 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009032:	4b1d      	ldr	r3, [pc, #116]	@ (80090a8 <xTimerCreateTimerTask+0x84>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d021      	beq.n	800907e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800903e:	2300      	movs	r3, #0
 8009040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009042:	1d3a      	adds	r2, r7, #4
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	4618      	mov	r0, r3
 800904e:	f7fd fd1d 	bl	8006a8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009052:	6879      	ldr	r1, [r7, #4]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	2302      	movs	r3, #2
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	2300      	movs	r3, #0
 8009062:	460a      	mov	r2, r1
 8009064:	4911      	ldr	r1, [pc, #68]	@ (80090ac <xTimerCreateTimerTask+0x88>)
 8009066:	4812      	ldr	r0, [pc, #72]	@ (80090b0 <xTimerCreateTimerTask+0x8c>)
 8009068:	f7fe ff00 	bl	8007e6c <xTaskCreateStatic>
 800906c:	4603      	mov	r3, r0
 800906e:	4a11      	ldr	r2, [pc, #68]	@ (80090b4 <xTimerCreateTimerTask+0x90>)
 8009070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009072:	4b10      	ldr	r3, [pc, #64]	@ (80090b4 <xTimerCreateTimerTask+0x90>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800907a:	2301      	movs	r3, #1
 800907c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10b      	bne.n	800909c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	613b      	str	r3, [r7, #16]
}
 8009096:	bf00      	nop
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800909c:	697b      	ldr	r3, [r7, #20]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	20001118 	.word	0x20001118
 80090ac:	0800e928 	.word	0x0800e928
 80090b0:	080091f1 	.word	0x080091f1
 80090b4:	2000111c 	.word	0x2000111c

080090b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08a      	sub	sp, #40	@ 0x28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090c6:	2300      	movs	r3, #0
 80090c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10b      	bne.n	80090e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	623b      	str	r3, [r7, #32]
}
 80090e2:	bf00      	nop
 80090e4:	bf00      	nop
 80090e6:	e7fd      	b.n	80090e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090e8:	4b19      	ldr	r3, [pc, #100]	@ (8009150 <xTimerGenericCommand+0x98>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02a      	beq.n	8009146 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	2b05      	cmp	r3, #5
 8009100:	dc18      	bgt.n	8009134 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009102:	f7ff fdad 	bl	8008c60 <xTaskGetSchedulerState>
 8009106:	4603      	mov	r3, r0
 8009108:	2b02      	cmp	r3, #2
 800910a:	d109      	bne.n	8009120 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800910c:	4b10      	ldr	r3, [pc, #64]	@ (8009150 <xTimerGenericCommand+0x98>)
 800910e:	6818      	ldr	r0, [r3, #0]
 8009110:	f107 0110 	add.w	r1, r7, #16
 8009114:	2300      	movs	r3, #0
 8009116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009118:	f7fd fff2 	bl	8007100 <xQueueGenericSend>
 800911c:	6278      	str	r0, [r7, #36]	@ 0x24
 800911e:	e012      	b.n	8009146 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009120:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <xTimerGenericCommand+0x98>)
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	f107 0110 	add.w	r1, r7, #16
 8009128:	2300      	movs	r3, #0
 800912a:	2200      	movs	r2, #0
 800912c:	f7fd ffe8 	bl	8007100 <xQueueGenericSend>
 8009130:	6278      	str	r0, [r7, #36]	@ 0x24
 8009132:	e008      	b.n	8009146 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009134:	4b06      	ldr	r3, [pc, #24]	@ (8009150 <xTimerGenericCommand+0x98>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	f107 0110 	add.w	r1, r7, #16
 800913c:	2300      	movs	r3, #0
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	f7fe f8e0 	bl	8007304 <xQueueGenericSendFromISR>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009148:	4618      	mov	r0, r3
 800914a:	3728      	adds	r7, #40	@ 0x28
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	20001118 	.word	0x20001118

08009154 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800915e:	4b23      	ldr	r3, [pc, #140]	@ (80091ec <prvProcessExpiredTimer+0x98>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	3304      	adds	r3, #4
 800916c:	4618      	mov	r0, r3
 800916e:	f7fd fd31 	bl	8006bd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	d023      	beq.n	80091c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	699a      	ldr	r2, [r3, #24]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	18d1      	adds	r1, r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	683a      	ldr	r2, [r7, #0]
 800918c:	6978      	ldr	r0, [r7, #20]
 800918e:	f000 f8d5 	bl	800933c <prvInsertTimerInActiveList>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d020      	beq.n	80091da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009198:	2300      	movs	r3, #0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	2100      	movs	r1, #0
 80091a2:	6978      	ldr	r0, [r7, #20]
 80091a4:	f7ff ff88 	bl	80090b8 <xTimerGenericCommand>
 80091a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d114      	bne.n	80091da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	60fb      	str	r3, [r7, #12]
}
 80091c2:	bf00      	nop
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091ce:	f023 0301 	bic.w	r3, r3, #1
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	6978      	ldr	r0, [r7, #20]
 80091e0:	4798      	blx	r3
}
 80091e2:	bf00      	nop
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20001110 	.word	0x20001110

080091f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091f8:	f107 0308 	add.w	r3, r7, #8
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 f859 	bl	80092b4 <prvGetNextExpireTime>
 8009202:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f805 	bl	8009218 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800920e:	f000 f8d7 	bl	80093c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009212:	bf00      	nop
 8009214:	e7f0      	b.n	80091f8 <prvTimerTask+0x8>
	...

08009218 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009222:	f7ff f907 	bl	8008434 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009226:	f107 0308 	add.w	r3, r7, #8
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f866 	bl	80092fc <prvSampleTimeNow>
 8009230:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d130      	bne.n	800929a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10a      	bne.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	429a      	cmp	r2, r3
 8009244:	d806      	bhi.n	8009254 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009246:	f7ff f903 	bl	8008450 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800924a:	68f9      	ldr	r1, [r7, #12]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff81 	bl	8009154 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009252:	e024      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800925a:	4b13      	ldr	r3, [pc, #76]	@ (80092a8 <prvProcessTimerOrBlockTask+0x90>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <prvProcessTimerOrBlockTask+0x50>
 8009264:	2301      	movs	r3, #1
 8009266:	e000      	b.n	800926a <prvProcessTimerOrBlockTask+0x52>
 8009268:	2300      	movs	r3, #0
 800926a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800926c:	4b0f      	ldr	r3, [pc, #60]	@ (80092ac <prvProcessTimerOrBlockTask+0x94>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4619      	mov	r1, r3
 800927a:	f7fe fdc3 	bl	8007e04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800927e:	f7ff f8e7 	bl	8008450 <xTaskResumeAll>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009288:	4b09      	ldr	r3, [pc, #36]	@ (80092b0 <prvProcessTimerOrBlockTask+0x98>)
 800928a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	f3bf 8f6f 	isb	sy
}
 8009298:	e001      	b.n	800929e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800929a:	f7ff f8d9 	bl	8008450 <xTaskResumeAll>
}
 800929e:	bf00      	nop
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20001114 	.word	0x20001114
 80092ac:	20001118 	.word	0x20001118
 80092b0:	e000ed04 	.word	0xe000ed04

080092b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092bc:	4b0e      	ldr	r3, [pc, #56]	@ (80092f8 <prvGetNextExpireTime+0x44>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <prvGetNextExpireTime+0x16>
 80092c6:	2201      	movs	r2, #1
 80092c8:	e000      	b.n	80092cc <prvGetNextExpireTime+0x18>
 80092ca:	2200      	movs	r2, #0
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d105      	bne.n	80092e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092d8:	4b07      	ldr	r3, [pc, #28]	@ (80092f8 <prvGetNextExpireTime+0x44>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	60fb      	str	r3, [r7, #12]
 80092e2:	e001      	b.n	80092e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092e8:	68fb      	ldr	r3, [r7, #12]
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	20001110 	.word	0x20001110

080092fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009304:	f7ff f942 	bl	800858c <xTaskGetTickCount>
 8009308:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800930a:	4b0b      	ldr	r3, [pc, #44]	@ (8009338 <prvSampleTimeNow+0x3c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	429a      	cmp	r2, r3
 8009312:	d205      	bcs.n	8009320 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009314:	f000 f93a 	bl	800958c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e002      	b.n	8009326 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009326:	4a04      	ldr	r2, [pc, #16]	@ (8009338 <prvSampleTimeNow+0x3c>)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800932c:	68fb      	ldr	r3, [r7, #12]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20001120 	.word	0x20001120

0800933c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b086      	sub	sp, #24
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	429a      	cmp	r2, r3
 8009360:	d812      	bhi.n	8009388 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	429a      	cmp	r2, r3
 800936e:	d302      	bcc.n	8009376 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009370:	2301      	movs	r3, #1
 8009372:	617b      	str	r3, [r7, #20]
 8009374:	e01b      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009376:	4b10      	ldr	r3, [pc, #64]	@ (80093b8 <prvInsertTimerInActiveList+0x7c>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f7fd fbee 	bl	8006b62 <vListInsert>
 8009386:	e012      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	429a      	cmp	r2, r3
 800938e:	d206      	bcs.n	800939e <prvInsertTimerInActiveList+0x62>
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e007      	b.n	80093ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b07      	ldr	r3, [pc, #28]	@ (80093bc <prvInsertTimerInActiveList+0x80>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fd fbda 	bl	8006b62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093ae:	697b      	ldr	r3, [r7, #20]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20001114 	.word	0x20001114
 80093bc:	20001110 	.word	0x20001110

080093c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b08e      	sub	sp, #56	@ 0x38
 80093c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093c6:	e0ce      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	da19      	bge.n	8009402 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093ce:	1d3b      	adds	r3, r7, #4
 80093d0:	3304      	adds	r3, #4
 80093d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10b      	bne.n	80093f2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	61fb      	str	r3, [r7, #28]
}
 80093ec:	bf00      	nop
 80093ee:	bf00      	nop
 80093f0:	e7fd      	b.n	80093ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f8:	6850      	ldr	r0, [r2, #4]
 80093fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093fc:	6892      	ldr	r2, [r2, #8]
 80093fe:	4611      	mov	r1, r2
 8009400:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f2c0 80ae 	blt.w	8009566 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800940e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009418:	3304      	adds	r3, #4
 800941a:	4618      	mov	r0, r3
 800941c:	f7fd fbda 	bl	8006bd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009420:	463b      	mov	r3, r7
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff ff6a 	bl	80092fc <prvSampleTimeNow>
 8009428:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b09      	cmp	r3, #9
 800942e:	f200 8097 	bhi.w	8009560 <prvProcessReceivedCommands+0x1a0>
 8009432:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <prvProcessReceivedCommands+0x78>)
 8009434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009438:	08009461 	.word	0x08009461
 800943c:	08009461 	.word	0x08009461
 8009440:	08009461 	.word	0x08009461
 8009444:	080094d7 	.word	0x080094d7
 8009448:	080094eb 	.word	0x080094eb
 800944c:	08009537 	.word	0x08009537
 8009450:	08009461 	.word	0x08009461
 8009454:	08009461 	.word	0x08009461
 8009458:	080094d7 	.word	0x080094d7
 800945c:	080094eb 	.word	0x080094eb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	b2da      	uxtb	r2, r3
 800946c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009472:	68ba      	ldr	r2, [r7, #8]
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	18d1      	adds	r1, r2, r3
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800947e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009480:	f7ff ff5c 	bl	800933c <prvInsertTimerInActiveList>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d06c      	beq.n	8009564 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800948a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009490:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d061      	beq.n	8009564 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	441a      	add	r2, r3
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	2100      	movs	r1, #0
 80094b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094b2:	f7ff fe01 	bl	80090b8 <xTimerGenericCommand>
 80094b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d152      	bne.n	8009564 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	61bb      	str	r3, [r7, #24]
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	e7fd      	b.n	80094d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094e8:	e03d      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094f0:	f043 0301 	orr.w	r3, r3, #1
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10b      	bne.n	8009522 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	617b      	str	r3, [r7, #20]
}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	e7fd      	b.n	800951e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009528:	18d1      	adds	r1, r2, r3
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800952e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009530:	f7ff ff04 	bl	800933c <prvInsertTimerInActiveList>
					break;
 8009534:	e017      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009544:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009546:	f000 fbe7 	bl	8009d18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800954a:	e00c      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800954c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	b2da      	uxtb	r2, r3
 8009558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800955e:	e002      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009560:	bf00      	nop
 8009562:	e000      	b.n	8009566 <prvProcessReceivedCommands+0x1a6>
					break;
 8009564:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009566:	4b08      	ldr	r3, [pc, #32]	@ (8009588 <prvProcessReceivedCommands+0x1c8>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	1d39      	adds	r1, r7, #4
 800956c:	2200      	movs	r2, #0
 800956e:	4618      	mov	r0, r3
 8009570:	f7fd fff6 	bl	8007560 <xQueueReceive>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	f47f af26 	bne.w	80093c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800957c:	bf00      	nop
 800957e:	bf00      	nop
 8009580:	3730      	adds	r7, #48	@ 0x30
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20001118 	.word	0x20001118

0800958c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009592:	e049      	b.n	8009628 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009594:	4b2e      	ldr	r3, [pc, #184]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800959e:	4b2c      	ldr	r3, [pc, #176]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3304      	adds	r3, #4
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fb11 	bl	8006bd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d02f      	beq.n	8009628 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	699b      	ldr	r3, [r3, #24]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4413      	add	r3, r2
 80095d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d90e      	bls.n	80095f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095e6:	4b1a      	ldr	r3, [pc, #104]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7fd fab6 	bl	8006b62 <vListInsert>
 80095f6:	e017      	b.n	8009628 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095f8:	2300      	movs	r3, #0
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	2300      	movs	r3, #0
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	2100      	movs	r1, #0
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff fd58 	bl	80090b8 <xTimerGenericCommand>
 8009608:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d10b      	bne.n	8009628 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009614:	f383 8811 	msr	BASEPRI, r3
 8009618:	f3bf 8f6f 	isb	sy
 800961c:	f3bf 8f4f 	dsb	sy
 8009620:	603b      	str	r3, [r7, #0]
}
 8009622:	bf00      	nop
 8009624:	bf00      	nop
 8009626:	e7fd      	b.n	8009624 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009628:	4b09      	ldr	r3, [pc, #36]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1b0      	bne.n	8009594 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009632:	4b07      	ldr	r3, [pc, #28]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009638:	4b06      	ldr	r3, [pc, #24]	@ (8009654 <prvSwitchTimerLists+0xc8>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a04      	ldr	r2, [pc, #16]	@ (8009650 <prvSwitchTimerLists+0xc4>)
 800963e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009640:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <prvSwitchTimerLists+0xc8>)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	6013      	str	r3, [r2, #0]
}
 8009646:	bf00      	nop
 8009648:	3718      	adds	r7, #24
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	20001110 	.word	0x20001110
 8009654:	20001114 	.word	0x20001114

08009658 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800965e:	f000 f96b 	bl	8009938 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009662:	4b15      	ldr	r3, [pc, #84]	@ (80096b8 <prvCheckForValidListAndQueue+0x60>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d120      	bne.n	80096ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800966a:	4814      	ldr	r0, [pc, #80]	@ (80096bc <prvCheckForValidListAndQueue+0x64>)
 800966c:	f7fd fa28 	bl	8006ac0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009670:	4813      	ldr	r0, [pc, #76]	@ (80096c0 <prvCheckForValidListAndQueue+0x68>)
 8009672:	f7fd fa25 	bl	8006ac0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009676:	4b13      	ldr	r3, [pc, #76]	@ (80096c4 <prvCheckForValidListAndQueue+0x6c>)
 8009678:	4a10      	ldr	r2, [pc, #64]	@ (80096bc <prvCheckForValidListAndQueue+0x64>)
 800967a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800967c:	4b12      	ldr	r3, [pc, #72]	@ (80096c8 <prvCheckForValidListAndQueue+0x70>)
 800967e:	4a10      	ldr	r2, [pc, #64]	@ (80096c0 <prvCheckForValidListAndQueue+0x68>)
 8009680:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009682:	2300      	movs	r3, #0
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4b11      	ldr	r3, [pc, #68]	@ (80096cc <prvCheckForValidListAndQueue+0x74>)
 8009688:	4a11      	ldr	r2, [pc, #68]	@ (80096d0 <prvCheckForValidListAndQueue+0x78>)
 800968a:	2110      	movs	r1, #16
 800968c:	200a      	movs	r0, #10
 800968e:	f7fd fb35 	bl	8006cfc <xQueueGenericCreateStatic>
 8009692:	4603      	mov	r3, r0
 8009694:	4a08      	ldr	r2, [pc, #32]	@ (80096b8 <prvCheckForValidListAndQueue+0x60>)
 8009696:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009698:	4b07      	ldr	r3, [pc, #28]	@ (80096b8 <prvCheckForValidListAndQueue+0x60>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096a0:	4b05      	ldr	r3, [pc, #20]	@ (80096b8 <prvCheckForValidListAndQueue+0x60>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	490b      	ldr	r1, [pc, #44]	@ (80096d4 <prvCheckForValidListAndQueue+0x7c>)
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fb58 	bl	8007d5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ac:	f000 f976 	bl	800999c <vPortExitCritical>
}
 80096b0:	bf00      	nop
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20001118 	.word	0x20001118
 80096bc:	200010e8 	.word	0x200010e8
 80096c0:	200010fc 	.word	0x200010fc
 80096c4:	20001110 	.word	0x20001110
 80096c8:	20001114 	.word	0x20001114
 80096cc:	200011c4 	.word	0x200011c4
 80096d0:	20001124 	.word	0x20001124
 80096d4:	0800e930 	.word	0x0800e930

080096d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3b04      	subs	r3, #4
 80096e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80096f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3b04      	subs	r3, #4
 80096f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	f023 0201 	bic.w	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	3b04      	subs	r3, #4
 8009706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009708:	4a0c      	ldr	r2, [pc, #48]	@ (800973c <pxPortInitialiseStack+0x64>)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3b14      	subs	r3, #20
 8009712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	3b04      	subs	r3, #4
 800971e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f06f 0202 	mvn.w	r2, #2
 8009726:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	3b20      	subs	r3, #32
 800972c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800972e:	68fb      	ldr	r3, [r7, #12]
}
 8009730:	4618      	mov	r0, r3
 8009732:	3714      	adds	r7, #20
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	08009741 	.word	0x08009741

08009740 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009746:	2300      	movs	r3, #0
 8009748:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800974a:	4b13      	ldr	r3, [pc, #76]	@ (8009798 <prvTaskExitError+0x58>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009752:	d00b      	beq.n	800976c <prvTaskExitError+0x2c>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <prvTaskExitError+0x28>
	__asm volatile
 800976c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	60bb      	str	r3, [r7, #8]
}
 800977e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009780:	bf00      	nop
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d0fc      	beq.n	8009782 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	20000010 	.word	0x20000010
 800979c:	00000000 	.word	0x00000000

080097a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097a0:	4b07      	ldr	r3, [pc, #28]	@ (80097c0 <pxCurrentTCBConst2>)
 80097a2:	6819      	ldr	r1, [r3, #0]
 80097a4:	6808      	ldr	r0, [r1, #0]
 80097a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097aa:	f380 8809 	msr	PSP, r0
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f04f 0000 	mov.w	r0, #0
 80097b6:	f380 8811 	msr	BASEPRI, r0
 80097ba:	4770      	bx	lr
 80097bc:	f3af 8000 	nop.w

080097c0 <pxCurrentTCBConst2>:
 80097c0:	20000be8 	.word	0x20000be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097c4:	bf00      	nop
 80097c6:	bf00      	nop

080097c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097c8:	4808      	ldr	r0, [pc, #32]	@ (80097ec <prvPortStartFirstTask+0x24>)
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f380 8808 	msr	MSP, r0
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8814 	msr	CONTROL, r0
 80097da:	b662      	cpsie	i
 80097dc:	b661      	cpsie	f
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	df00      	svc	0
 80097e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ea:	bf00      	nop
 80097ec:	e000ed08 	.word	0xe000ed08

080097f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097f6:	4b47      	ldr	r3, [pc, #284]	@ (8009914 <xPortStartScheduler+0x124>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a47      	ldr	r2, [pc, #284]	@ (8009918 <xPortStartScheduler+0x128>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d10b      	bne.n	8009818 <xPortStartScheduler+0x28>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	60fb      	str	r3, [r7, #12]
}
 8009812:	bf00      	nop
 8009814:	bf00      	nop
 8009816:	e7fd      	b.n	8009814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009818:	4b3e      	ldr	r3, [pc, #248]	@ (8009914 <xPortStartScheduler+0x124>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a3f      	ldr	r2, [pc, #252]	@ (800991c <xPortStartScheduler+0x12c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d10b      	bne.n	800983a <xPortStartScheduler+0x4a>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	613b      	str	r3, [r7, #16]
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop
 8009838:	e7fd      	b.n	8009836 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800983a:	4b39      	ldr	r3, [pc, #228]	@ (8009920 <xPortStartScheduler+0x130>)
 800983c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b2db      	uxtb	r3, r3
 8009844:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	22ff      	movs	r2, #255	@ 0xff
 800984a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800985c:	b2da      	uxtb	r2, r3
 800985e:	4b31      	ldr	r3, [pc, #196]	@ (8009924 <xPortStartScheduler+0x134>)
 8009860:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009862:	4b31      	ldr	r3, [pc, #196]	@ (8009928 <xPortStartScheduler+0x138>)
 8009864:	2207      	movs	r2, #7
 8009866:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009868:	e009      	b.n	800987e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800986a:	4b2f      	ldr	r3, [pc, #188]	@ (8009928 <xPortStartScheduler+0x138>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3b01      	subs	r3, #1
 8009870:	4a2d      	ldr	r2, [pc, #180]	@ (8009928 <xPortStartScheduler+0x138>)
 8009872:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	b2db      	uxtb	r3, r3
 800987c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	b2db      	uxtb	r3, r3
 8009882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009886:	2b80      	cmp	r3, #128	@ 0x80
 8009888:	d0ef      	beq.n	800986a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800988a:	4b27      	ldr	r3, [pc, #156]	@ (8009928 <xPortStartScheduler+0x138>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f1c3 0307 	rsb	r3, r3, #7
 8009892:	2b04      	cmp	r3, #4
 8009894:	d00b      	beq.n	80098ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	60bb      	str	r3, [r7, #8]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009928 <xPortStartScheduler+0x138>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	021b      	lsls	r3, r3, #8
 80098b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009928 <xPortStartScheduler+0x138>)
 80098b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009928 <xPortStartScheduler+0x138>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098c0:	4a19      	ldr	r2, [pc, #100]	@ (8009928 <xPortStartScheduler+0x138>)
 80098c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098cc:	4b17      	ldr	r3, [pc, #92]	@ (800992c <xPortStartScheduler+0x13c>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a16      	ldr	r2, [pc, #88]	@ (800992c <xPortStartScheduler+0x13c>)
 80098d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098d8:	4b14      	ldr	r3, [pc, #80]	@ (800992c <xPortStartScheduler+0x13c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a13      	ldr	r2, [pc, #76]	@ (800992c <xPortStartScheduler+0x13c>)
 80098de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80098e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098e4:	f000 f8da 	bl	8009a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098e8:	4b11      	ldr	r3, [pc, #68]	@ (8009930 <xPortStartScheduler+0x140>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098ee:	f000 f8f9 	bl	8009ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098f2:	4b10      	ldr	r3, [pc, #64]	@ (8009934 <xPortStartScheduler+0x144>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009934 <xPortStartScheduler+0x144>)
 80098f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80098fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098fe:	f7ff ff63 	bl	80097c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009902:	f7fe ff1f 	bl	8008744 <vTaskSwitchContext>
	prvTaskExitError();
 8009906:	f7ff ff1b 	bl	8009740 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	e000ed00 	.word	0xe000ed00
 8009918:	410fc271 	.word	0x410fc271
 800991c:	410fc270 	.word	0x410fc270
 8009920:	e000e400 	.word	0xe000e400
 8009924:	20001214 	.word	0x20001214
 8009928:	20001218 	.word	0x20001218
 800992c:	e000ed20 	.word	0xe000ed20
 8009930:	20000010 	.word	0x20000010
 8009934:	e000ef34 	.word	0xe000ef34

08009938 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	607b      	str	r3, [r7, #4]
}
 8009950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009952:	4b10      	ldr	r3, [pc, #64]	@ (8009994 <vPortEnterCritical+0x5c>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3301      	adds	r3, #1
 8009958:	4a0e      	ldr	r2, [pc, #56]	@ (8009994 <vPortEnterCritical+0x5c>)
 800995a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800995c:	4b0d      	ldr	r3, [pc, #52]	@ (8009994 <vPortEnterCritical+0x5c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d110      	bne.n	8009986 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009964:	4b0c      	ldr	r3, [pc, #48]	@ (8009998 <vPortEnterCritical+0x60>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	b2db      	uxtb	r3, r3
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00b      	beq.n	8009986 <vPortEnterCritical+0x4e>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	603b      	str	r3, [r7, #0]
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	e7fd      	b.n	8009982 <vPortEnterCritical+0x4a>
	}
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000010 	.word	0x20000010
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099a2:	4b12      	ldr	r3, [pc, #72]	@ (80099ec <vPortExitCritical+0x50>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10b      	bne.n	80099c2 <vPortExitCritical+0x26>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	607b      	str	r3, [r7, #4]
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	e7fd      	b.n	80099be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099c2:	4b0a      	ldr	r3, [pc, #40]	@ (80099ec <vPortExitCritical+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3b01      	subs	r3, #1
 80099c8:	4a08      	ldr	r2, [pc, #32]	@ (80099ec <vPortExitCritical+0x50>)
 80099ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099cc:	4b07      	ldr	r3, [pc, #28]	@ (80099ec <vPortExitCritical+0x50>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <vPortExitCritical+0x44>
 80099d4:	2300      	movs	r3, #0
 80099d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	f383 8811 	msr	BASEPRI, r3
}
 80099de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	20000010 	.word	0x20000010

080099f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099f0:	f3ef 8009 	mrs	r0, PSP
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	4b15      	ldr	r3, [pc, #84]	@ (8009a50 <pxCurrentTCBConst>)
 80099fa:	681a      	ldr	r2, [r3, #0]
 80099fc:	f01e 0f10 	tst.w	lr, #16
 8009a00:	bf08      	it	eq
 8009a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	6010      	str	r0, [r2, #0]
 8009a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a14:	f380 8811 	msr	BASEPRI, r0
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f7fe fe90 	bl	8008744 <vTaskSwitchContext>
 8009a24:	f04f 0000 	mov.w	r0, #0
 8009a28:	f380 8811 	msr	BASEPRI, r0
 8009a2c:	bc09      	pop	{r0, r3}
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	6808      	ldr	r0, [r1, #0]
 8009a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a36:	f01e 0f10 	tst.w	lr, #16
 8009a3a:	bf08      	it	eq
 8009a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a40:	f380 8809 	msr	PSP, r0
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	f3af 8000 	nop.w

08009a50 <pxCurrentTCBConst>:
 8009a50:	20000be8 	.word	0x20000be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop

08009a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	607b      	str	r3, [r7, #4]
}
 8009a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a72:	f7fe fdad 	bl	80085d0 <xTaskIncrementTick>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	@ (8009a98 <xPortSysTickHandler+0x40>)
 8009a7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a82:	601a      	str	r2, [r3, #0]
 8009a84:	2300      	movs	r3, #0
 8009a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	f383 8811 	msr	BASEPRI, r3
}
 8009a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a90:	bf00      	nop
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	e000ed04 	.word	0xe000ed04

08009a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad4 <vPortSetupTimerInterrupt+0x38>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009aac:	4b0a      	ldr	r3, [pc, #40]	@ (8009ad8 <vPortSetupTimerInterrupt+0x3c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a0a      	ldr	r2, [pc, #40]	@ (8009adc <vPortSetupTimerInterrupt+0x40>)
 8009ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ab6:	099b      	lsrs	r3, r3, #6
 8009ab8:	4a09      	ldr	r2, [pc, #36]	@ (8009ae0 <vPortSetupTimerInterrupt+0x44>)
 8009aba:	3b01      	subs	r3, #1
 8009abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009abe:	4b04      	ldr	r3, [pc, #16]	@ (8009ad0 <vPortSetupTimerInterrupt+0x34>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	e000e010 	.word	0xe000e010
 8009ad4:	e000e018 	.word	0xe000e018
 8009ad8:	20000004 	.word	0x20000004
 8009adc:	10624dd3 	.word	0x10624dd3
 8009ae0:	e000e014 	.word	0xe000e014

08009ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009af4 <vPortEnableVFP+0x10>
 8009ae8:	6801      	ldr	r1, [r0, #0]
 8009aea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009aee:	6001      	str	r1, [r0, #0]
 8009af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009af2:	bf00      	nop
 8009af4:	e000ed88 	.word	0xe000ed88

08009af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009af8:	b480      	push	{r7}
 8009afa:	b085      	sub	sp, #20
 8009afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009afe:	f3ef 8305 	mrs	r3, IPSR
 8009b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2b0f      	cmp	r3, #15
 8009b08:	d915      	bls.n	8009b36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b0a:	4a18      	ldr	r2, [pc, #96]	@ (8009b6c <vPortValidateInterruptPriority+0x74>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b14:	4b16      	ldr	r3, [pc, #88]	@ (8009b70 <vPortValidateInterruptPriority+0x78>)
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	7afa      	ldrb	r2, [r7, #11]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d20b      	bcs.n	8009b36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
}
 8009b30:	bf00      	nop
 8009b32:	bf00      	nop
 8009b34:	e7fd      	b.n	8009b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b36:	4b0f      	ldr	r3, [pc, #60]	@ (8009b74 <vPortValidateInterruptPriority+0x7c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b78 <vPortValidateInterruptPriority+0x80>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d90b      	bls.n	8009b5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b4a:	f383 8811 	msr	BASEPRI, r3
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f3bf 8f4f 	dsb	sy
 8009b56:	603b      	str	r3, [r7, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	bf00      	nop
 8009b5c:	e7fd      	b.n	8009b5a <vPortValidateInterruptPriority+0x62>
	}
 8009b5e:	bf00      	nop
 8009b60:	3714      	adds	r7, #20
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop
 8009b6c:	e000e3f0 	.word	0xe000e3f0
 8009b70:	20001214 	.word	0x20001214
 8009b74:	e000ed0c 	.word	0xe000ed0c
 8009b78:	20001218 	.word	0x20001218

08009b7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	@ 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b84:	2300      	movs	r3, #0
 8009b86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b88:	f7fe fc54 	bl	8008434 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8009d00 <pvPortMalloc+0x184>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b94:	f000 f924 	bl	8009de0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b98:	4b5a      	ldr	r3, [pc, #360]	@ (8009d04 <pvPortMalloc+0x188>)
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f040 8095 	bne.w	8009cd0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01e      	beq.n	8009bea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bac:	2208      	movs	r2, #8
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f003 0307 	and.w	r3, r3, #7
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d015      	beq.n	8009bea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00b      	beq.n	8009bea <pvPortMalloc+0x6e>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	617b      	str	r3, [r7, #20]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d06f      	beq.n	8009cd0 <pvPortMalloc+0x154>
 8009bf0:	4b45      	ldr	r3, [pc, #276]	@ (8009d08 <pvPortMalloc+0x18c>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d86a      	bhi.n	8009cd0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bfa:	4b44      	ldr	r3, [pc, #272]	@ (8009d0c <pvPortMalloc+0x190>)
 8009bfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bfe:	4b43      	ldr	r3, [pc, #268]	@ (8009d0c <pvPortMalloc+0x190>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c04:	e004      	b.n	8009c10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d903      	bls.n	8009c22 <pvPortMalloc+0xa6>
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1f1      	bne.n	8009c06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c22:	4b37      	ldr	r3, [pc, #220]	@ (8009d00 <pvPortMalloc+0x184>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d051      	beq.n	8009cd0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	2208      	movs	r2, #8
 8009c32:	4413      	add	r3, r2
 8009c34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	685a      	ldr	r2, [r3, #4]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	1ad2      	subs	r2, r2, r3
 8009c46:	2308      	movs	r3, #8
 8009c48:	005b      	lsls	r3, r3, #1
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d920      	bls.n	8009c90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4413      	add	r3, r2
 8009c54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	f003 0307 	and.w	r3, r3, #7
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <pvPortMalloc+0xfc>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	f383 8811 	msr	BASEPRI, r3
 8009c68:	f3bf 8f6f 	isb	sy
 8009c6c:	f3bf 8f4f 	dsb	sy
 8009c70:	613b      	str	r3, [r7, #16]
}
 8009c72:	bf00      	nop
 8009c74:	bf00      	nop
 8009c76:	e7fd      	b.n	8009c74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	1ad2      	subs	r2, r2, r3
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c8a:	69b8      	ldr	r0, [r7, #24]
 8009c8c:	f000 f90a 	bl	8009ea4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c90:	4b1d      	ldr	r3, [pc, #116]	@ (8009d08 <pvPortMalloc+0x18c>)
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8009d08 <pvPortMalloc+0x18c>)
 8009c9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8009d08 <pvPortMalloc+0x18c>)
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d10 <pvPortMalloc+0x194>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d203      	bcs.n	8009cb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009caa:	4b17      	ldr	r3, [pc, #92]	@ (8009d08 <pvPortMalloc+0x18c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a18      	ldr	r2, [pc, #96]	@ (8009d10 <pvPortMalloc+0x194>)
 8009cb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb4:	685a      	ldr	r2, [r3, #4]
 8009cb6:	4b13      	ldr	r3, [pc, #76]	@ (8009d04 <pvPortMalloc+0x188>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009cc6:	4b13      	ldr	r3, [pc, #76]	@ (8009d14 <pvPortMalloc+0x198>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	4a11      	ldr	r2, [pc, #68]	@ (8009d14 <pvPortMalloc+0x198>)
 8009cce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cd0:	f7fe fbbe 	bl	8008450 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <pvPortMalloc+0x17a>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	60fb      	str	r3, [r7, #12]
}
 8009cf0:	bf00      	nop
 8009cf2:	bf00      	nop
 8009cf4:	e7fd      	b.n	8009cf2 <pvPortMalloc+0x176>
	return pvReturn;
 8009cf6:	69fb      	ldr	r3, [r7, #28]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3728      	adds	r7, #40	@ 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20004e24 	.word	0x20004e24
 8009d04:	20004e38 	.word	0x20004e38
 8009d08:	20004e28 	.word	0x20004e28
 8009d0c:	20004e1c 	.word	0x20004e1c
 8009d10:	20004e2c 	.word	0x20004e2c
 8009d14:	20004e30 	.word	0x20004e30

08009d18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d04f      	beq.n	8009dca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	425b      	negs	r3, r3
 8009d2e:	697a      	ldr	r2, [r7, #20]
 8009d30:	4413      	add	r3, r2
 8009d32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	685a      	ldr	r2, [r3, #4]
 8009d3c:	4b25      	ldr	r3, [pc, #148]	@ (8009dd4 <vPortFree+0xbc>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4013      	ands	r3, r2
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d10b      	bne.n	8009d5e <vPortFree+0x46>
	__asm volatile
 8009d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4a:	f383 8811 	msr	BASEPRI, r3
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f3bf 8f4f 	dsb	sy
 8009d56:	60fb      	str	r3, [r7, #12]
}
 8009d58:	bf00      	nop
 8009d5a:	bf00      	nop
 8009d5c:	e7fd      	b.n	8009d5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00b      	beq.n	8009d7e <vPortFree+0x66>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	60bb      	str	r3, [r7, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
 8009d7c:	e7fd      	b.n	8009d7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	685a      	ldr	r2, [r3, #4]
 8009d82:	4b14      	ldr	r3, [pc, #80]	@ (8009dd4 <vPortFree+0xbc>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4013      	ands	r3, r2
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d01e      	beq.n	8009dca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d11a      	bne.n	8009dca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	4b0e      	ldr	r3, [pc, #56]	@ (8009dd4 <vPortFree+0xbc>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	401a      	ands	r2, r3
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009da4:	f7fe fb46 	bl	8008434 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd8 <vPortFree+0xc0>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4413      	add	r3, r2
 8009db2:	4a09      	ldr	r2, [pc, #36]	@ (8009dd8 <vPortFree+0xc0>)
 8009db4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009db6:	6938      	ldr	r0, [r7, #16]
 8009db8:	f000 f874 	bl	8009ea4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009dbc:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <vPortFree+0xc4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	4a06      	ldr	r2, [pc, #24]	@ (8009ddc <vPortFree+0xc4>)
 8009dc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009dc6:	f7fe fb43 	bl	8008450 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dca:	bf00      	nop
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20004e38 	.word	0x20004e38
 8009dd8:	20004e28 	.word	0x20004e28
 8009ddc:	20004e34 	.word	0x20004e34

08009de0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009de6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009dea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dec:	4b27      	ldr	r3, [pc, #156]	@ (8009e8c <prvHeapInit+0xac>)
 8009dee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f003 0307 	and.w	r3, r3, #7
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00c      	beq.n	8009e14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3307      	adds	r3, #7
 8009dfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f023 0307 	bic.w	r3, r3, #7
 8009e06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	1ad3      	subs	r3, r2, r3
 8009e0e:	4a1f      	ldr	r2, [pc, #124]	@ (8009e8c <prvHeapInit+0xac>)
 8009e10:	4413      	add	r3, r2
 8009e12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e18:	4a1d      	ldr	r2, [pc, #116]	@ (8009e90 <prvHeapInit+0xb0>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8009e90 <prvHeapInit+0xb0>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	4413      	add	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e2c:	2208      	movs	r2, #8
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	1a9b      	subs	r3, r3, r2
 8009e32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f023 0307 	bic.w	r3, r3, #7
 8009e3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	4a15      	ldr	r2, [pc, #84]	@ (8009e94 <prvHeapInit+0xb4>)
 8009e40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e42:	4b14      	ldr	r3, [pc, #80]	@ (8009e94 <prvHeapInit+0xb4>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2200      	movs	r2, #0
 8009e48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e4a:	4b12      	ldr	r3, [pc, #72]	@ (8009e94 <prvHeapInit+0xb4>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	1ad2      	subs	r2, r2, r3
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e60:	4b0c      	ldr	r3, [pc, #48]	@ (8009e94 <prvHeapInit+0xb4>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e98 <prvHeapInit+0xb8>)
 8009e6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	4a09      	ldr	r2, [pc, #36]	@ (8009e9c <prvHeapInit+0xbc>)
 8009e76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e78:	4b09      	ldr	r3, [pc, #36]	@ (8009ea0 <prvHeapInit+0xc0>)
 8009e7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e7e:	601a      	str	r2, [r3, #0]
}
 8009e80:	bf00      	nop
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	2000121c 	.word	0x2000121c
 8009e90:	20004e1c 	.word	0x20004e1c
 8009e94:	20004e24 	.word	0x20004e24
 8009e98:	20004e2c 	.word	0x20004e2c
 8009e9c:	20004e28 	.word	0x20004e28
 8009ea0:	20004e38 	.word	0x20004e38

08009ea4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b085      	sub	sp, #20
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009eac:	4b28      	ldr	r3, [pc, #160]	@ (8009f50 <prvInsertBlockIntoFreeList+0xac>)
 8009eae:	60fb      	str	r3, [r7, #12]
 8009eb0:	e002      	b.n	8009eb8 <prvInsertBlockIntoFreeList+0x14>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	60fb      	str	r3, [r7, #12]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d8f7      	bhi.n	8009eb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	685b      	ldr	r3, [r3, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4413      	add	r3, r2
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d108      	bne.n	8009ee6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	441a      	add	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	441a      	add	r2, r3
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d118      	bne.n	8009f2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b15      	ldr	r3, [pc, #84]	@ (8009f54 <prvInsertBlockIntoFreeList+0xb0>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d00d      	beq.n	8009f22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685a      	ldr	r2, [r3, #4]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	441a      	add	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	e008      	b.n	8009f34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f22:	4b0c      	ldr	r3, [pc, #48]	@ (8009f54 <prvInsertBlockIntoFreeList+0xb0>)
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	e003      	b.n	8009f34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d002      	beq.n	8009f42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f42:	bf00      	nop
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	20004e1c 	.word	0x20004e1c
 8009f54:	20004e24 	.word	0x20004e24

08009f58 <__cvt>:
 8009f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f5c:	ec57 6b10 	vmov	r6, r7, d0
 8009f60:	2f00      	cmp	r7, #0
 8009f62:	460c      	mov	r4, r1
 8009f64:	4619      	mov	r1, r3
 8009f66:	463b      	mov	r3, r7
 8009f68:	bfbb      	ittet	lt
 8009f6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f6e:	461f      	movlt	r7, r3
 8009f70:	2300      	movge	r3, #0
 8009f72:	232d      	movlt	r3, #45	@ 0x2d
 8009f74:	700b      	strb	r3, [r1, #0]
 8009f76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f7c:	4691      	mov	r9, r2
 8009f7e:	f023 0820 	bic.w	r8, r3, #32
 8009f82:	bfbc      	itt	lt
 8009f84:	4632      	movlt	r2, r6
 8009f86:	4616      	movlt	r6, r2
 8009f88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f8c:	d005      	beq.n	8009f9a <__cvt+0x42>
 8009f8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f92:	d100      	bne.n	8009f96 <__cvt+0x3e>
 8009f94:	3401      	adds	r4, #1
 8009f96:	2102      	movs	r1, #2
 8009f98:	e000      	b.n	8009f9c <__cvt+0x44>
 8009f9a:	2103      	movs	r1, #3
 8009f9c:	ab03      	add	r3, sp, #12
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	ab02      	add	r3, sp, #8
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	ec47 6b10 	vmov	d0, r6, r7
 8009fa8:	4653      	mov	r3, sl
 8009faa:	4622      	mov	r2, r4
 8009fac:	f001 f910 	bl	800b1d0 <_dtoa_r>
 8009fb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009fb4:	4605      	mov	r5, r0
 8009fb6:	d119      	bne.n	8009fec <__cvt+0x94>
 8009fb8:	f019 0f01 	tst.w	r9, #1
 8009fbc:	d00e      	beq.n	8009fdc <__cvt+0x84>
 8009fbe:	eb00 0904 	add.w	r9, r0, r4
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	4639      	mov	r1, r7
 8009fca:	f7f6 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fce:	b108      	cbz	r0, 8009fd4 <__cvt+0x7c>
 8009fd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8009fd4:	2230      	movs	r2, #48	@ 0x30
 8009fd6:	9b03      	ldr	r3, [sp, #12]
 8009fd8:	454b      	cmp	r3, r9
 8009fda:	d31e      	bcc.n	800a01a <__cvt+0xc2>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fe0:	1b5b      	subs	r3, r3, r5
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	6013      	str	r3, [r2, #0]
 8009fe6:	b004      	add	sp, #16
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ff0:	eb00 0904 	add.w	r9, r0, r4
 8009ff4:	d1e5      	bne.n	8009fc2 <__cvt+0x6a>
 8009ff6:	7803      	ldrb	r3, [r0, #0]
 8009ff8:	2b30      	cmp	r3, #48	@ 0x30
 8009ffa:	d10a      	bne.n	800a012 <__cvt+0xba>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2300      	movs	r3, #0
 800a000:	4630      	mov	r0, r6
 800a002:	4639      	mov	r1, r7
 800a004:	f7f6 fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 800a008:	b918      	cbnz	r0, 800a012 <__cvt+0xba>
 800a00a:	f1c4 0401 	rsb	r4, r4, #1
 800a00e:	f8ca 4000 	str.w	r4, [sl]
 800a012:	f8da 3000 	ldr.w	r3, [sl]
 800a016:	4499      	add	r9, r3
 800a018:	e7d3      	b.n	8009fc2 <__cvt+0x6a>
 800a01a:	1c59      	adds	r1, r3, #1
 800a01c:	9103      	str	r1, [sp, #12]
 800a01e:	701a      	strb	r2, [r3, #0]
 800a020:	e7d9      	b.n	8009fd6 <__cvt+0x7e>

0800a022 <__exponent>:
 800a022:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a024:	2900      	cmp	r1, #0
 800a026:	bfba      	itte	lt
 800a028:	4249      	neglt	r1, r1
 800a02a:	232d      	movlt	r3, #45	@ 0x2d
 800a02c:	232b      	movge	r3, #43	@ 0x2b
 800a02e:	2909      	cmp	r1, #9
 800a030:	7002      	strb	r2, [r0, #0]
 800a032:	7043      	strb	r3, [r0, #1]
 800a034:	dd29      	ble.n	800a08a <__exponent+0x68>
 800a036:	f10d 0307 	add.w	r3, sp, #7
 800a03a:	461d      	mov	r5, r3
 800a03c:	270a      	movs	r7, #10
 800a03e:	461a      	mov	r2, r3
 800a040:	fbb1 f6f7 	udiv	r6, r1, r7
 800a044:	fb07 1416 	mls	r4, r7, r6, r1
 800a048:	3430      	adds	r4, #48	@ 0x30
 800a04a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a04e:	460c      	mov	r4, r1
 800a050:	2c63      	cmp	r4, #99	@ 0x63
 800a052:	f103 33ff 	add.w	r3, r3, #4294967295
 800a056:	4631      	mov	r1, r6
 800a058:	dcf1      	bgt.n	800a03e <__exponent+0x1c>
 800a05a:	3130      	adds	r1, #48	@ 0x30
 800a05c:	1e94      	subs	r4, r2, #2
 800a05e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a062:	1c41      	adds	r1, r0, #1
 800a064:	4623      	mov	r3, r4
 800a066:	42ab      	cmp	r3, r5
 800a068:	d30a      	bcc.n	800a080 <__exponent+0x5e>
 800a06a:	f10d 0309 	add.w	r3, sp, #9
 800a06e:	1a9b      	subs	r3, r3, r2
 800a070:	42ac      	cmp	r4, r5
 800a072:	bf88      	it	hi
 800a074:	2300      	movhi	r3, #0
 800a076:	3302      	adds	r3, #2
 800a078:	4403      	add	r3, r0
 800a07a:	1a18      	subs	r0, r3, r0
 800a07c:	b003      	add	sp, #12
 800a07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a080:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a084:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a088:	e7ed      	b.n	800a066 <__exponent+0x44>
 800a08a:	2330      	movs	r3, #48	@ 0x30
 800a08c:	3130      	adds	r1, #48	@ 0x30
 800a08e:	7083      	strb	r3, [r0, #2]
 800a090:	70c1      	strb	r1, [r0, #3]
 800a092:	1d03      	adds	r3, r0, #4
 800a094:	e7f1      	b.n	800a07a <__exponent+0x58>
	...

0800a098 <_printf_float>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	b08d      	sub	sp, #52	@ 0x34
 800a09e:	460c      	mov	r4, r1
 800a0a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a0a4:	4616      	mov	r6, r2
 800a0a6:	461f      	mov	r7, r3
 800a0a8:	4605      	mov	r5, r0
 800a0aa:	f000 ff1f 	bl	800aeec <_localeconv_r>
 800a0ae:	6803      	ldr	r3, [r0, #0]
 800a0b0:	9304      	str	r3, [sp, #16]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7f6 f8dc 	bl	8000270 <strlen>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800a0c0:	9005      	str	r0, [sp, #20]
 800a0c2:	3307      	adds	r3, #7
 800a0c4:	f023 0307 	bic.w	r3, r3, #7
 800a0c8:	f103 0208 	add.w	r2, r3, #8
 800a0cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a0d0:	f8d4 b000 	ldr.w	fp, [r4]
 800a0d4:	f8c8 2000 	str.w	r2, [r8]
 800a0d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a0e0:	9307      	str	r3, [sp, #28]
 800a0e2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a0e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a0ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0ee:	4b9c      	ldr	r3, [pc, #624]	@ (800a360 <_printf_float+0x2c8>)
 800a0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f4:	f7f6 fd1a 	bl	8000b2c <__aeabi_dcmpun>
 800a0f8:	bb70      	cbnz	r0, 800a158 <_printf_float+0xc0>
 800a0fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a0fe:	4b98      	ldr	r3, [pc, #608]	@ (800a360 <_printf_float+0x2c8>)
 800a100:	f04f 32ff 	mov.w	r2, #4294967295
 800a104:	f7f6 fcf4 	bl	8000af0 <__aeabi_dcmple>
 800a108:	bb30      	cbnz	r0, 800a158 <_printf_float+0xc0>
 800a10a:	2200      	movs	r2, #0
 800a10c:	2300      	movs	r3, #0
 800a10e:	4640      	mov	r0, r8
 800a110:	4649      	mov	r1, r9
 800a112:	f7f6 fce3 	bl	8000adc <__aeabi_dcmplt>
 800a116:	b110      	cbz	r0, 800a11e <_printf_float+0x86>
 800a118:	232d      	movs	r3, #45	@ 0x2d
 800a11a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a11e:	4a91      	ldr	r2, [pc, #580]	@ (800a364 <_printf_float+0x2cc>)
 800a120:	4b91      	ldr	r3, [pc, #580]	@ (800a368 <_printf_float+0x2d0>)
 800a122:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a126:	bf8c      	ite	hi
 800a128:	4690      	movhi	r8, r2
 800a12a:	4698      	movls	r8, r3
 800a12c:	2303      	movs	r3, #3
 800a12e:	6123      	str	r3, [r4, #16]
 800a130:	f02b 0304 	bic.w	r3, fp, #4
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	f04f 0900 	mov.w	r9, #0
 800a13a:	9700      	str	r7, [sp, #0]
 800a13c:	4633      	mov	r3, r6
 800a13e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a140:	4621      	mov	r1, r4
 800a142:	4628      	mov	r0, r5
 800a144:	f000 f9d2 	bl	800a4ec <_printf_common>
 800a148:	3001      	adds	r0, #1
 800a14a:	f040 808d 	bne.w	800a268 <_printf_float+0x1d0>
 800a14e:	f04f 30ff 	mov.w	r0, #4294967295
 800a152:	b00d      	add	sp, #52	@ 0x34
 800a154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	4642      	mov	r2, r8
 800a15a:	464b      	mov	r3, r9
 800a15c:	4640      	mov	r0, r8
 800a15e:	4649      	mov	r1, r9
 800a160:	f7f6 fce4 	bl	8000b2c <__aeabi_dcmpun>
 800a164:	b140      	cbz	r0, 800a178 <_printf_float+0xe0>
 800a166:	464b      	mov	r3, r9
 800a168:	2b00      	cmp	r3, #0
 800a16a:	bfbc      	itt	lt
 800a16c:	232d      	movlt	r3, #45	@ 0x2d
 800a16e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a172:	4a7e      	ldr	r2, [pc, #504]	@ (800a36c <_printf_float+0x2d4>)
 800a174:	4b7e      	ldr	r3, [pc, #504]	@ (800a370 <_printf_float+0x2d8>)
 800a176:	e7d4      	b.n	800a122 <_printf_float+0x8a>
 800a178:	6863      	ldr	r3, [r4, #4]
 800a17a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a17e:	9206      	str	r2, [sp, #24]
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	d13b      	bne.n	800a1fc <_printf_float+0x164>
 800a184:	2306      	movs	r3, #6
 800a186:	6063      	str	r3, [r4, #4]
 800a188:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a18c:	2300      	movs	r3, #0
 800a18e:	6022      	str	r2, [r4, #0]
 800a190:	9303      	str	r3, [sp, #12]
 800a192:	ab0a      	add	r3, sp, #40	@ 0x28
 800a194:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a198:	ab09      	add	r3, sp, #36	@ 0x24
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	6861      	ldr	r1, [r4, #4]
 800a19e:	ec49 8b10 	vmov	d0, r8, r9
 800a1a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f7ff fed6 	bl	8009f58 <__cvt>
 800a1ac:	9b06      	ldr	r3, [sp, #24]
 800a1ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a1b0:	2b47      	cmp	r3, #71	@ 0x47
 800a1b2:	4680      	mov	r8, r0
 800a1b4:	d129      	bne.n	800a20a <_printf_float+0x172>
 800a1b6:	1cc8      	adds	r0, r1, #3
 800a1b8:	db02      	blt.n	800a1c0 <_printf_float+0x128>
 800a1ba:	6863      	ldr	r3, [r4, #4]
 800a1bc:	4299      	cmp	r1, r3
 800a1be:	dd41      	ble.n	800a244 <_printf_float+0x1ac>
 800a1c0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a1c4:	fa5f fa8a 	uxtb.w	sl, sl
 800a1c8:	3901      	subs	r1, #1
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a1d0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1d2:	f7ff ff26 	bl	800a022 <__exponent>
 800a1d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1d8:	1813      	adds	r3, r2, r0
 800a1da:	2a01      	cmp	r2, #1
 800a1dc:	4681      	mov	r9, r0
 800a1de:	6123      	str	r3, [r4, #16]
 800a1e0:	dc02      	bgt.n	800a1e8 <_printf_float+0x150>
 800a1e2:	6822      	ldr	r2, [r4, #0]
 800a1e4:	07d2      	lsls	r2, r2, #31
 800a1e6:	d501      	bpl.n	800a1ec <_printf_float+0x154>
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	6123      	str	r3, [r4, #16]
 800a1ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0a2      	beq.n	800a13a <_printf_float+0xa2>
 800a1f4:	232d      	movs	r3, #45	@ 0x2d
 800a1f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1fa:	e79e      	b.n	800a13a <_printf_float+0xa2>
 800a1fc:	9a06      	ldr	r2, [sp, #24]
 800a1fe:	2a47      	cmp	r2, #71	@ 0x47
 800a200:	d1c2      	bne.n	800a188 <_printf_float+0xf0>
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1c0      	bne.n	800a188 <_printf_float+0xf0>
 800a206:	2301      	movs	r3, #1
 800a208:	e7bd      	b.n	800a186 <_printf_float+0xee>
 800a20a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a20e:	d9db      	bls.n	800a1c8 <_printf_float+0x130>
 800a210:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a214:	d118      	bne.n	800a248 <_printf_float+0x1b0>
 800a216:	2900      	cmp	r1, #0
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	dd0b      	ble.n	800a234 <_printf_float+0x19c>
 800a21c:	6121      	str	r1, [r4, #16]
 800a21e:	b913      	cbnz	r3, 800a226 <_printf_float+0x18e>
 800a220:	6822      	ldr	r2, [r4, #0]
 800a222:	07d0      	lsls	r0, r2, #31
 800a224:	d502      	bpl.n	800a22c <_printf_float+0x194>
 800a226:	3301      	adds	r3, #1
 800a228:	440b      	add	r3, r1
 800a22a:	6123      	str	r3, [r4, #16]
 800a22c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a22e:	f04f 0900 	mov.w	r9, #0
 800a232:	e7db      	b.n	800a1ec <_printf_float+0x154>
 800a234:	b913      	cbnz	r3, 800a23c <_printf_float+0x1a4>
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	07d2      	lsls	r2, r2, #31
 800a23a:	d501      	bpl.n	800a240 <_printf_float+0x1a8>
 800a23c:	3302      	adds	r3, #2
 800a23e:	e7f4      	b.n	800a22a <_printf_float+0x192>
 800a240:	2301      	movs	r3, #1
 800a242:	e7f2      	b.n	800a22a <_printf_float+0x192>
 800a244:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a24a:	4299      	cmp	r1, r3
 800a24c:	db05      	blt.n	800a25a <_printf_float+0x1c2>
 800a24e:	6823      	ldr	r3, [r4, #0]
 800a250:	6121      	str	r1, [r4, #16]
 800a252:	07d8      	lsls	r0, r3, #31
 800a254:	d5ea      	bpl.n	800a22c <_printf_float+0x194>
 800a256:	1c4b      	adds	r3, r1, #1
 800a258:	e7e7      	b.n	800a22a <_printf_float+0x192>
 800a25a:	2900      	cmp	r1, #0
 800a25c:	bfd4      	ite	le
 800a25e:	f1c1 0202 	rsble	r2, r1, #2
 800a262:	2201      	movgt	r2, #1
 800a264:	4413      	add	r3, r2
 800a266:	e7e0      	b.n	800a22a <_printf_float+0x192>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	055a      	lsls	r2, r3, #21
 800a26c:	d407      	bmi.n	800a27e <_printf_float+0x1e6>
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	4642      	mov	r2, r8
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	d12b      	bne.n	800a2d4 <_printf_float+0x23c>
 800a27c:	e767      	b.n	800a14e <_printf_float+0xb6>
 800a27e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a282:	f240 80dd 	bls.w	800a440 <_printf_float+0x3a8>
 800a286:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a28a:	2200      	movs	r2, #0
 800a28c:	2300      	movs	r3, #0
 800a28e:	f7f6 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a292:	2800      	cmp	r0, #0
 800a294:	d033      	beq.n	800a2fe <_printf_float+0x266>
 800a296:	4a37      	ldr	r2, [pc, #220]	@ (800a374 <_printf_float+0x2dc>)
 800a298:	2301      	movs	r3, #1
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	f43f af54 	beq.w	800a14e <_printf_float+0xb6>
 800a2a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a2aa:	4543      	cmp	r3, r8
 800a2ac:	db02      	blt.n	800a2b4 <_printf_float+0x21c>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07d8      	lsls	r0, r3, #31
 800a2b2:	d50f      	bpl.n	800a2d4 <_printf_float+0x23c>
 800a2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f af45 	beq.w	800a14e <_printf_float+0xb6>
 800a2c4:	f04f 0900 	mov.w	r9, #0
 800a2c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800a2cc:	f104 0a1a 	add.w	sl, r4, #26
 800a2d0:	45c8      	cmp	r8, r9
 800a2d2:	dc09      	bgt.n	800a2e8 <_printf_float+0x250>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	079b      	lsls	r3, r3, #30
 800a2d8:	f100 8103 	bmi.w	800a4e2 <_printf_float+0x44a>
 800a2dc:	68e0      	ldr	r0, [r4, #12]
 800a2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2e0:	4298      	cmp	r0, r3
 800a2e2:	bfb8      	it	lt
 800a2e4:	4618      	movlt	r0, r3
 800a2e6:	e734      	b.n	800a152 <_printf_float+0xba>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4652      	mov	r2, sl
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	f43f af2b 	beq.w	800a14e <_printf_float+0xb6>
 800a2f8:	f109 0901 	add.w	r9, r9, #1
 800a2fc:	e7e8      	b.n	800a2d0 <_printf_float+0x238>
 800a2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	dc39      	bgt.n	800a378 <_printf_float+0x2e0>
 800a304:	4a1b      	ldr	r2, [pc, #108]	@ (800a374 <_printf_float+0x2dc>)
 800a306:	2301      	movs	r3, #1
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	f43f af1d 	beq.w	800a14e <_printf_float+0xb6>
 800a314:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a318:	ea59 0303 	orrs.w	r3, r9, r3
 800a31c:	d102      	bne.n	800a324 <_printf_float+0x28c>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	07d9      	lsls	r1, r3, #31
 800a322:	d5d7      	bpl.n	800a2d4 <_printf_float+0x23c>
 800a324:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a328:	4631      	mov	r1, r6
 800a32a:	4628      	mov	r0, r5
 800a32c:	47b8      	blx	r7
 800a32e:	3001      	adds	r0, #1
 800a330:	f43f af0d 	beq.w	800a14e <_printf_float+0xb6>
 800a334:	f04f 0a00 	mov.w	sl, #0
 800a338:	f104 0b1a 	add.w	fp, r4, #26
 800a33c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a33e:	425b      	negs	r3, r3
 800a340:	4553      	cmp	r3, sl
 800a342:	dc01      	bgt.n	800a348 <_printf_float+0x2b0>
 800a344:	464b      	mov	r3, r9
 800a346:	e793      	b.n	800a270 <_printf_float+0x1d8>
 800a348:	2301      	movs	r3, #1
 800a34a:	465a      	mov	r2, fp
 800a34c:	4631      	mov	r1, r6
 800a34e:	4628      	mov	r0, r5
 800a350:	47b8      	blx	r7
 800a352:	3001      	adds	r0, #1
 800a354:	f43f aefb 	beq.w	800a14e <_printf_float+0xb6>
 800a358:	f10a 0a01 	add.w	sl, sl, #1
 800a35c:	e7ee      	b.n	800a33c <_printf_float+0x2a4>
 800a35e:	bf00      	nop
 800a360:	7fefffff 	.word	0x7fefffff
 800a364:	0800eb10 	.word	0x0800eb10
 800a368:	0800eb0c 	.word	0x0800eb0c
 800a36c:	0800eb18 	.word	0x0800eb18
 800a370:	0800eb14 	.word	0x0800eb14
 800a374:	0800eb1c 	.word	0x0800eb1c
 800a378:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a37a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a37e:	4553      	cmp	r3, sl
 800a380:	bfa8      	it	ge
 800a382:	4653      	movge	r3, sl
 800a384:	2b00      	cmp	r3, #0
 800a386:	4699      	mov	r9, r3
 800a388:	dc36      	bgt.n	800a3f8 <_printf_float+0x360>
 800a38a:	f04f 0b00 	mov.w	fp, #0
 800a38e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a392:	f104 021a 	add.w	r2, r4, #26
 800a396:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a398:	9306      	str	r3, [sp, #24]
 800a39a:	eba3 0309 	sub.w	r3, r3, r9
 800a39e:	455b      	cmp	r3, fp
 800a3a0:	dc31      	bgt.n	800a406 <_printf_float+0x36e>
 800a3a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a4:	459a      	cmp	sl, r3
 800a3a6:	dc3a      	bgt.n	800a41e <_printf_float+0x386>
 800a3a8:	6823      	ldr	r3, [r4, #0]
 800a3aa:	07da      	lsls	r2, r3, #31
 800a3ac:	d437      	bmi.n	800a41e <_printf_float+0x386>
 800a3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b0:	ebaa 0903 	sub.w	r9, sl, r3
 800a3b4:	9b06      	ldr	r3, [sp, #24]
 800a3b6:	ebaa 0303 	sub.w	r3, sl, r3
 800a3ba:	4599      	cmp	r9, r3
 800a3bc:	bfa8      	it	ge
 800a3be:	4699      	movge	r9, r3
 800a3c0:	f1b9 0f00 	cmp.w	r9, #0
 800a3c4:	dc33      	bgt.n	800a42e <_printf_float+0x396>
 800a3c6:	f04f 0800 	mov.w	r8, #0
 800a3ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3ce:	f104 0b1a 	add.w	fp, r4, #26
 800a3d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d4:	ebaa 0303 	sub.w	r3, sl, r3
 800a3d8:	eba3 0309 	sub.w	r3, r3, r9
 800a3dc:	4543      	cmp	r3, r8
 800a3de:	f77f af79 	ble.w	800a2d4 <_printf_float+0x23c>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	465a      	mov	r2, fp
 800a3e6:	4631      	mov	r1, r6
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b8      	blx	r7
 800a3ec:	3001      	adds	r0, #1
 800a3ee:	f43f aeae 	beq.w	800a14e <_printf_float+0xb6>
 800a3f2:	f108 0801 	add.w	r8, r8, #1
 800a3f6:	e7ec      	b.n	800a3d2 <_printf_float+0x33a>
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	d1c2      	bne.n	800a38a <_printf_float+0x2f2>
 800a404:	e6a3      	b.n	800a14e <_printf_float+0xb6>
 800a406:	2301      	movs	r3, #1
 800a408:	4631      	mov	r1, r6
 800a40a:	4628      	mov	r0, r5
 800a40c:	9206      	str	r2, [sp, #24]
 800a40e:	47b8      	blx	r7
 800a410:	3001      	adds	r0, #1
 800a412:	f43f ae9c 	beq.w	800a14e <_printf_float+0xb6>
 800a416:	9a06      	ldr	r2, [sp, #24]
 800a418:	f10b 0b01 	add.w	fp, fp, #1
 800a41c:	e7bb      	b.n	800a396 <_printf_float+0x2fe>
 800a41e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	d1c0      	bne.n	800a3ae <_printf_float+0x316>
 800a42c:	e68f      	b.n	800a14e <_printf_float+0xb6>
 800a42e:	9a06      	ldr	r2, [sp, #24]
 800a430:	464b      	mov	r3, r9
 800a432:	4442      	add	r2, r8
 800a434:	4631      	mov	r1, r6
 800a436:	4628      	mov	r0, r5
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	d1c3      	bne.n	800a3c6 <_printf_float+0x32e>
 800a43e:	e686      	b.n	800a14e <_printf_float+0xb6>
 800a440:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a444:	f1ba 0f01 	cmp.w	sl, #1
 800a448:	dc01      	bgt.n	800a44e <_printf_float+0x3b6>
 800a44a:	07db      	lsls	r3, r3, #31
 800a44c:	d536      	bpl.n	800a4bc <_printf_float+0x424>
 800a44e:	2301      	movs	r3, #1
 800a450:	4642      	mov	r2, r8
 800a452:	4631      	mov	r1, r6
 800a454:	4628      	mov	r0, r5
 800a456:	47b8      	blx	r7
 800a458:	3001      	adds	r0, #1
 800a45a:	f43f ae78 	beq.w	800a14e <_printf_float+0xb6>
 800a45e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a462:	4631      	mov	r1, r6
 800a464:	4628      	mov	r0, r5
 800a466:	47b8      	blx	r7
 800a468:	3001      	adds	r0, #1
 800a46a:	f43f ae70 	beq.w	800a14e <_printf_float+0xb6>
 800a46e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a472:	2200      	movs	r2, #0
 800a474:	2300      	movs	r3, #0
 800a476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a47a:	f7f6 fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800a47e:	b9c0      	cbnz	r0, 800a4b2 <_printf_float+0x41a>
 800a480:	4653      	mov	r3, sl
 800a482:	f108 0201 	add.w	r2, r8, #1
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	47b8      	blx	r7
 800a48c:	3001      	adds	r0, #1
 800a48e:	d10c      	bne.n	800a4aa <_printf_float+0x412>
 800a490:	e65d      	b.n	800a14e <_printf_float+0xb6>
 800a492:	2301      	movs	r3, #1
 800a494:	465a      	mov	r2, fp
 800a496:	4631      	mov	r1, r6
 800a498:	4628      	mov	r0, r5
 800a49a:	47b8      	blx	r7
 800a49c:	3001      	adds	r0, #1
 800a49e:	f43f ae56 	beq.w	800a14e <_printf_float+0xb6>
 800a4a2:	f108 0801 	add.w	r8, r8, #1
 800a4a6:	45d0      	cmp	r8, sl
 800a4a8:	dbf3      	blt.n	800a492 <_printf_float+0x3fa>
 800a4aa:	464b      	mov	r3, r9
 800a4ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a4b0:	e6df      	b.n	800a272 <_printf_float+0x1da>
 800a4b2:	f04f 0800 	mov.w	r8, #0
 800a4b6:	f104 0b1a 	add.w	fp, r4, #26
 800a4ba:	e7f4      	b.n	800a4a6 <_printf_float+0x40e>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	4642      	mov	r2, r8
 800a4c0:	e7e1      	b.n	800a486 <_printf_float+0x3ee>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	464a      	mov	r2, r9
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f ae3e 	beq.w	800a14e <_printf_float+0xb6>
 800a4d2:	f108 0801 	add.w	r8, r8, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4da:	1a5b      	subs	r3, r3, r1
 800a4dc:	4543      	cmp	r3, r8
 800a4de:	dcf0      	bgt.n	800a4c2 <_printf_float+0x42a>
 800a4e0:	e6fc      	b.n	800a2dc <_printf_float+0x244>
 800a4e2:	f04f 0800 	mov.w	r8, #0
 800a4e6:	f104 0919 	add.w	r9, r4, #25
 800a4ea:	e7f4      	b.n	800a4d6 <_printf_float+0x43e>

0800a4ec <_printf_common>:
 800a4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f0:	4616      	mov	r6, r2
 800a4f2:	4698      	mov	r8, r3
 800a4f4:	688a      	ldr	r2, [r1, #8]
 800a4f6:	690b      	ldr	r3, [r1, #16]
 800a4f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	bfb8      	it	lt
 800a500:	4613      	movlt	r3, r2
 800a502:	6033      	str	r3, [r6, #0]
 800a504:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a508:	4607      	mov	r7, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	b10a      	cbz	r2, 800a512 <_printf_common+0x26>
 800a50e:	3301      	adds	r3, #1
 800a510:	6033      	str	r3, [r6, #0]
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	0699      	lsls	r1, r3, #26
 800a516:	bf42      	ittt	mi
 800a518:	6833      	ldrmi	r3, [r6, #0]
 800a51a:	3302      	addmi	r3, #2
 800a51c:	6033      	strmi	r3, [r6, #0]
 800a51e:	6825      	ldr	r5, [r4, #0]
 800a520:	f015 0506 	ands.w	r5, r5, #6
 800a524:	d106      	bne.n	800a534 <_printf_common+0x48>
 800a526:	f104 0a19 	add.w	sl, r4, #25
 800a52a:	68e3      	ldr	r3, [r4, #12]
 800a52c:	6832      	ldr	r2, [r6, #0]
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	42ab      	cmp	r3, r5
 800a532:	dc26      	bgt.n	800a582 <_printf_common+0x96>
 800a534:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a538:	6822      	ldr	r2, [r4, #0]
 800a53a:	3b00      	subs	r3, #0
 800a53c:	bf18      	it	ne
 800a53e:	2301      	movne	r3, #1
 800a540:	0692      	lsls	r2, r2, #26
 800a542:	d42b      	bmi.n	800a59c <_printf_common+0xb0>
 800a544:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a548:	4641      	mov	r1, r8
 800a54a:	4638      	mov	r0, r7
 800a54c:	47c8      	blx	r9
 800a54e:	3001      	adds	r0, #1
 800a550:	d01e      	beq.n	800a590 <_printf_common+0xa4>
 800a552:	6823      	ldr	r3, [r4, #0]
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	f003 0306 	and.w	r3, r3, #6
 800a55a:	2b04      	cmp	r3, #4
 800a55c:	bf02      	ittt	eq
 800a55e:	68e5      	ldreq	r5, [r4, #12]
 800a560:	6833      	ldreq	r3, [r6, #0]
 800a562:	1aed      	subeq	r5, r5, r3
 800a564:	68a3      	ldr	r3, [r4, #8]
 800a566:	bf0c      	ite	eq
 800a568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a56c:	2500      	movne	r5, #0
 800a56e:	4293      	cmp	r3, r2
 800a570:	bfc4      	itt	gt
 800a572:	1a9b      	subgt	r3, r3, r2
 800a574:	18ed      	addgt	r5, r5, r3
 800a576:	2600      	movs	r6, #0
 800a578:	341a      	adds	r4, #26
 800a57a:	42b5      	cmp	r5, r6
 800a57c:	d11a      	bne.n	800a5b4 <_printf_common+0xc8>
 800a57e:	2000      	movs	r0, #0
 800a580:	e008      	b.n	800a594 <_printf_common+0xa8>
 800a582:	2301      	movs	r3, #1
 800a584:	4652      	mov	r2, sl
 800a586:	4641      	mov	r1, r8
 800a588:	4638      	mov	r0, r7
 800a58a:	47c8      	blx	r9
 800a58c:	3001      	adds	r0, #1
 800a58e:	d103      	bne.n	800a598 <_printf_common+0xac>
 800a590:	f04f 30ff 	mov.w	r0, #4294967295
 800a594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a598:	3501      	adds	r5, #1
 800a59a:	e7c6      	b.n	800a52a <_printf_common+0x3e>
 800a59c:	18e1      	adds	r1, r4, r3
 800a59e:	1c5a      	adds	r2, r3, #1
 800a5a0:	2030      	movs	r0, #48	@ 0x30
 800a5a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5a6:	4422      	add	r2, r4
 800a5a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5b0:	3302      	adds	r3, #2
 800a5b2:	e7c7      	b.n	800a544 <_printf_common+0x58>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	4622      	mov	r2, r4
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	47c8      	blx	r9
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d0e6      	beq.n	800a590 <_printf_common+0xa4>
 800a5c2:	3601      	adds	r6, #1
 800a5c4:	e7d9      	b.n	800a57a <_printf_common+0x8e>
	...

0800a5c8 <_printf_i>:
 800a5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5cc:	7e0f      	ldrb	r7, [r1, #24]
 800a5ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5d0:	2f78      	cmp	r7, #120	@ 0x78
 800a5d2:	4691      	mov	r9, r2
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	469a      	mov	sl, r3
 800a5da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5de:	d807      	bhi.n	800a5f0 <_printf_i+0x28>
 800a5e0:	2f62      	cmp	r7, #98	@ 0x62
 800a5e2:	d80a      	bhi.n	800a5fa <_printf_i+0x32>
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	f000 80d1 	beq.w	800a78c <_printf_i+0x1c4>
 800a5ea:	2f58      	cmp	r7, #88	@ 0x58
 800a5ec:	f000 80b8 	beq.w	800a760 <_printf_i+0x198>
 800a5f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5f8:	e03a      	b.n	800a670 <_printf_i+0xa8>
 800a5fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5fe:	2b15      	cmp	r3, #21
 800a600:	d8f6      	bhi.n	800a5f0 <_printf_i+0x28>
 800a602:	a101      	add	r1, pc, #4	@ (adr r1, 800a608 <_printf_i+0x40>)
 800a604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a608:	0800a661 	.word	0x0800a661
 800a60c:	0800a675 	.word	0x0800a675
 800a610:	0800a5f1 	.word	0x0800a5f1
 800a614:	0800a5f1 	.word	0x0800a5f1
 800a618:	0800a5f1 	.word	0x0800a5f1
 800a61c:	0800a5f1 	.word	0x0800a5f1
 800a620:	0800a675 	.word	0x0800a675
 800a624:	0800a5f1 	.word	0x0800a5f1
 800a628:	0800a5f1 	.word	0x0800a5f1
 800a62c:	0800a5f1 	.word	0x0800a5f1
 800a630:	0800a5f1 	.word	0x0800a5f1
 800a634:	0800a773 	.word	0x0800a773
 800a638:	0800a69f 	.word	0x0800a69f
 800a63c:	0800a72d 	.word	0x0800a72d
 800a640:	0800a5f1 	.word	0x0800a5f1
 800a644:	0800a5f1 	.word	0x0800a5f1
 800a648:	0800a795 	.word	0x0800a795
 800a64c:	0800a5f1 	.word	0x0800a5f1
 800a650:	0800a69f 	.word	0x0800a69f
 800a654:	0800a5f1 	.word	0x0800a5f1
 800a658:	0800a5f1 	.word	0x0800a5f1
 800a65c:	0800a735 	.word	0x0800a735
 800a660:	6833      	ldr	r3, [r6, #0]
 800a662:	1d1a      	adds	r2, r3, #4
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	6032      	str	r2, [r6, #0]
 800a668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a66c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a670:	2301      	movs	r3, #1
 800a672:	e09c      	b.n	800a7ae <_printf_i+0x1e6>
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	6820      	ldr	r0, [r4, #0]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	6031      	str	r1, [r6, #0]
 800a67c:	0606      	lsls	r6, r0, #24
 800a67e:	d501      	bpl.n	800a684 <_printf_i+0xbc>
 800a680:	681d      	ldr	r5, [r3, #0]
 800a682:	e003      	b.n	800a68c <_printf_i+0xc4>
 800a684:	0645      	lsls	r5, r0, #25
 800a686:	d5fb      	bpl.n	800a680 <_printf_i+0xb8>
 800a688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a68c:	2d00      	cmp	r5, #0
 800a68e:	da03      	bge.n	800a698 <_printf_i+0xd0>
 800a690:	232d      	movs	r3, #45	@ 0x2d
 800a692:	426d      	negs	r5, r5
 800a694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a698:	4858      	ldr	r0, [pc, #352]	@ (800a7fc <_printf_i+0x234>)
 800a69a:	230a      	movs	r3, #10
 800a69c:	e011      	b.n	800a6c2 <_printf_i+0xfa>
 800a69e:	6821      	ldr	r1, [r4, #0]
 800a6a0:	6833      	ldr	r3, [r6, #0]
 800a6a2:	0608      	lsls	r0, r1, #24
 800a6a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6a8:	d402      	bmi.n	800a6b0 <_printf_i+0xe8>
 800a6aa:	0649      	lsls	r1, r1, #25
 800a6ac:	bf48      	it	mi
 800a6ae:	b2ad      	uxthmi	r5, r5
 800a6b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6b2:	4852      	ldr	r0, [pc, #328]	@ (800a7fc <_printf_i+0x234>)
 800a6b4:	6033      	str	r3, [r6, #0]
 800a6b6:	bf14      	ite	ne
 800a6b8:	230a      	movne	r3, #10
 800a6ba:	2308      	moveq	r3, #8
 800a6bc:	2100      	movs	r1, #0
 800a6be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6c2:	6866      	ldr	r6, [r4, #4]
 800a6c4:	60a6      	str	r6, [r4, #8]
 800a6c6:	2e00      	cmp	r6, #0
 800a6c8:	db05      	blt.n	800a6d6 <_printf_i+0x10e>
 800a6ca:	6821      	ldr	r1, [r4, #0]
 800a6cc:	432e      	orrs	r6, r5
 800a6ce:	f021 0104 	bic.w	r1, r1, #4
 800a6d2:	6021      	str	r1, [r4, #0]
 800a6d4:	d04b      	beq.n	800a76e <_printf_i+0x1a6>
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6dc:	fb03 5711 	mls	r7, r3, r1, r5
 800a6e0:	5dc7      	ldrb	r7, [r0, r7]
 800a6e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6e6:	462f      	mov	r7, r5
 800a6e8:	42bb      	cmp	r3, r7
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	d9f4      	bls.n	800a6d8 <_printf_i+0x110>
 800a6ee:	2b08      	cmp	r3, #8
 800a6f0:	d10b      	bne.n	800a70a <_printf_i+0x142>
 800a6f2:	6823      	ldr	r3, [r4, #0]
 800a6f4:	07df      	lsls	r7, r3, #31
 800a6f6:	d508      	bpl.n	800a70a <_printf_i+0x142>
 800a6f8:	6923      	ldr	r3, [r4, #16]
 800a6fa:	6861      	ldr	r1, [r4, #4]
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	bfde      	ittt	le
 800a700:	2330      	movle	r3, #48	@ 0x30
 800a702:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a706:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a70a:	1b92      	subs	r2, r2, r6
 800a70c:	6122      	str	r2, [r4, #16]
 800a70e:	f8cd a000 	str.w	sl, [sp]
 800a712:	464b      	mov	r3, r9
 800a714:	aa03      	add	r2, sp, #12
 800a716:	4621      	mov	r1, r4
 800a718:	4640      	mov	r0, r8
 800a71a:	f7ff fee7 	bl	800a4ec <_printf_common>
 800a71e:	3001      	adds	r0, #1
 800a720:	d14a      	bne.n	800a7b8 <_printf_i+0x1f0>
 800a722:	f04f 30ff 	mov.w	r0, #4294967295
 800a726:	b004      	add	sp, #16
 800a728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	f043 0320 	orr.w	r3, r3, #32
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	4832      	ldr	r0, [pc, #200]	@ (800a800 <_printf_i+0x238>)
 800a736:	2778      	movs	r7, #120	@ 0x78
 800a738:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a73c:	6823      	ldr	r3, [r4, #0]
 800a73e:	6831      	ldr	r1, [r6, #0]
 800a740:	061f      	lsls	r7, r3, #24
 800a742:	f851 5b04 	ldr.w	r5, [r1], #4
 800a746:	d402      	bmi.n	800a74e <_printf_i+0x186>
 800a748:	065f      	lsls	r7, r3, #25
 800a74a:	bf48      	it	mi
 800a74c:	b2ad      	uxthmi	r5, r5
 800a74e:	6031      	str	r1, [r6, #0]
 800a750:	07d9      	lsls	r1, r3, #31
 800a752:	bf44      	itt	mi
 800a754:	f043 0320 	orrmi.w	r3, r3, #32
 800a758:	6023      	strmi	r3, [r4, #0]
 800a75a:	b11d      	cbz	r5, 800a764 <_printf_i+0x19c>
 800a75c:	2310      	movs	r3, #16
 800a75e:	e7ad      	b.n	800a6bc <_printf_i+0xf4>
 800a760:	4826      	ldr	r0, [pc, #152]	@ (800a7fc <_printf_i+0x234>)
 800a762:	e7e9      	b.n	800a738 <_printf_i+0x170>
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	f023 0320 	bic.w	r3, r3, #32
 800a76a:	6023      	str	r3, [r4, #0]
 800a76c:	e7f6      	b.n	800a75c <_printf_i+0x194>
 800a76e:	4616      	mov	r6, r2
 800a770:	e7bd      	b.n	800a6ee <_printf_i+0x126>
 800a772:	6833      	ldr	r3, [r6, #0]
 800a774:	6825      	ldr	r5, [r4, #0]
 800a776:	6961      	ldr	r1, [r4, #20]
 800a778:	1d18      	adds	r0, r3, #4
 800a77a:	6030      	str	r0, [r6, #0]
 800a77c:	062e      	lsls	r6, r5, #24
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	d501      	bpl.n	800a786 <_printf_i+0x1be>
 800a782:	6019      	str	r1, [r3, #0]
 800a784:	e002      	b.n	800a78c <_printf_i+0x1c4>
 800a786:	0668      	lsls	r0, r5, #25
 800a788:	d5fb      	bpl.n	800a782 <_printf_i+0x1ba>
 800a78a:	8019      	strh	r1, [r3, #0]
 800a78c:	2300      	movs	r3, #0
 800a78e:	6123      	str	r3, [r4, #16]
 800a790:	4616      	mov	r6, r2
 800a792:	e7bc      	b.n	800a70e <_printf_i+0x146>
 800a794:	6833      	ldr	r3, [r6, #0]
 800a796:	1d1a      	adds	r2, r3, #4
 800a798:	6032      	str	r2, [r6, #0]
 800a79a:	681e      	ldr	r6, [r3, #0]
 800a79c:	6862      	ldr	r2, [r4, #4]
 800a79e:	2100      	movs	r1, #0
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f7f5 fd15 	bl	80001d0 <memchr>
 800a7a6:	b108      	cbz	r0, 800a7ac <_printf_i+0x1e4>
 800a7a8:	1b80      	subs	r0, r0, r6
 800a7aa:	6060      	str	r0, [r4, #4]
 800a7ac:	6863      	ldr	r3, [r4, #4]
 800a7ae:	6123      	str	r3, [r4, #16]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7b6:	e7aa      	b.n	800a70e <_printf_i+0x146>
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	4632      	mov	r2, r6
 800a7bc:	4649      	mov	r1, r9
 800a7be:	4640      	mov	r0, r8
 800a7c0:	47d0      	blx	sl
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d0ad      	beq.n	800a722 <_printf_i+0x15a>
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	079b      	lsls	r3, r3, #30
 800a7ca:	d413      	bmi.n	800a7f4 <_printf_i+0x22c>
 800a7cc:	68e0      	ldr	r0, [r4, #12]
 800a7ce:	9b03      	ldr	r3, [sp, #12]
 800a7d0:	4298      	cmp	r0, r3
 800a7d2:	bfb8      	it	lt
 800a7d4:	4618      	movlt	r0, r3
 800a7d6:	e7a6      	b.n	800a726 <_printf_i+0x15e>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	4632      	mov	r2, r6
 800a7dc:	4649      	mov	r1, r9
 800a7de:	4640      	mov	r0, r8
 800a7e0:	47d0      	blx	sl
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	d09d      	beq.n	800a722 <_printf_i+0x15a>
 800a7e6:	3501      	adds	r5, #1
 800a7e8:	68e3      	ldr	r3, [r4, #12]
 800a7ea:	9903      	ldr	r1, [sp, #12]
 800a7ec:	1a5b      	subs	r3, r3, r1
 800a7ee:	42ab      	cmp	r3, r5
 800a7f0:	dcf2      	bgt.n	800a7d8 <_printf_i+0x210>
 800a7f2:	e7eb      	b.n	800a7cc <_printf_i+0x204>
 800a7f4:	2500      	movs	r5, #0
 800a7f6:	f104 0619 	add.w	r6, r4, #25
 800a7fa:	e7f5      	b.n	800a7e8 <_printf_i+0x220>
 800a7fc:	0800eb1e 	.word	0x0800eb1e
 800a800:	0800eb2f 	.word	0x0800eb2f

0800a804 <_scanf_float>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	b087      	sub	sp, #28
 800a80a:	4691      	mov	r9, r2
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	688b      	ldr	r3, [r1, #8]
 800a810:	1e5a      	subs	r2, r3, #1
 800a812:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a816:	bf81      	itttt	hi
 800a818:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a81c:	eb03 0b05 	addhi.w	fp, r3, r5
 800a820:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a824:	608b      	strhi	r3, [r1, #8]
 800a826:	680b      	ldr	r3, [r1, #0]
 800a828:	460a      	mov	r2, r1
 800a82a:	f04f 0500 	mov.w	r5, #0
 800a82e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a832:	f842 3b1c 	str.w	r3, [r2], #28
 800a836:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a83a:	4680      	mov	r8, r0
 800a83c:	460c      	mov	r4, r1
 800a83e:	bf98      	it	ls
 800a840:	f04f 0b00 	movls.w	fp, #0
 800a844:	9201      	str	r2, [sp, #4]
 800a846:	4616      	mov	r6, r2
 800a848:	46aa      	mov	sl, r5
 800a84a:	462f      	mov	r7, r5
 800a84c:	9502      	str	r5, [sp, #8]
 800a84e:	68a2      	ldr	r2, [r4, #8]
 800a850:	b15a      	cbz	r2, 800a86a <_scanf_float+0x66>
 800a852:	f8d9 3000 	ldr.w	r3, [r9]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b4e      	cmp	r3, #78	@ 0x4e
 800a85a:	d863      	bhi.n	800a924 <_scanf_float+0x120>
 800a85c:	2b40      	cmp	r3, #64	@ 0x40
 800a85e:	d83b      	bhi.n	800a8d8 <_scanf_float+0xd4>
 800a860:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a864:	b2c8      	uxtb	r0, r1
 800a866:	280e      	cmp	r0, #14
 800a868:	d939      	bls.n	800a8de <_scanf_float+0xda>
 800a86a:	b11f      	cbz	r7, 800a874 <_scanf_float+0x70>
 800a86c:	6823      	ldr	r3, [r4, #0]
 800a86e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a878:	f1ba 0f01 	cmp.w	sl, #1
 800a87c:	f200 8114 	bhi.w	800aaa8 <_scanf_float+0x2a4>
 800a880:	9b01      	ldr	r3, [sp, #4]
 800a882:	429e      	cmp	r6, r3
 800a884:	f200 8105 	bhi.w	800aa92 <_scanf_float+0x28e>
 800a888:	2001      	movs	r0, #1
 800a88a:	b007      	add	sp, #28
 800a88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a890:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a894:	2a0d      	cmp	r2, #13
 800a896:	d8e8      	bhi.n	800a86a <_scanf_float+0x66>
 800a898:	a101      	add	r1, pc, #4	@ (adr r1, 800a8a0 <_scanf_float+0x9c>)
 800a89a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a89e:	bf00      	nop
 800a8a0:	0800a9e9 	.word	0x0800a9e9
 800a8a4:	0800a86b 	.word	0x0800a86b
 800a8a8:	0800a86b 	.word	0x0800a86b
 800a8ac:	0800a86b 	.word	0x0800a86b
 800a8b0:	0800aa45 	.word	0x0800aa45
 800a8b4:	0800aa1f 	.word	0x0800aa1f
 800a8b8:	0800a86b 	.word	0x0800a86b
 800a8bc:	0800a86b 	.word	0x0800a86b
 800a8c0:	0800a9f7 	.word	0x0800a9f7
 800a8c4:	0800a86b 	.word	0x0800a86b
 800a8c8:	0800a86b 	.word	0x0800a86b
 800a8cc:	0800a86b 	.word	0x0800a86b
 800a8d0:	0800a86b 	.word	0x0800a86b
 800a8d4:	0800a9b3 	.word	0x0800a9b3
 800a8d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a8dc:	e7da      	b.n	800a894 <_scanf_float+0x90>
 800a8de:	290e      	cmp	r1, #14
 800a8e0:	d8c3      	bhi.n	800a86a <_scanf_float+0x66>
 800a8e2:	a001      	add	r0, pc, #4	@ (adr r0, 800a8e8 <_scanf_float+0xe4>)
 800a8e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8e8:	0800a9a3 	.word	0x0800a9a3
 800a8ec:	0800a86b 	.word	0x0800a86b
 800a8f0:	0800a9a3 	.word	0x0800a9a3
 800a8f4:	0800aa33 	.word	0x0800aa33
 800a8f8:	0800a86b 	.word	0x0800a86b
 800a8fc:	0800a945 	.word	0x0800a945
 800a900:	0800a989 	.word	0x0800a989
 800a904:	0800a989 	.word	0x0800a989
 800a908:	0800a989 	.word	0x0800a989
 800a90c:	0800a989 	.word	0x0800a989
 800a910:	0800a989 	.word	0x0800a989
 800a914:	0800a989 	.word	0x0800a989
 800a918:	0800a989 	.word	0x0800a989
 800a91c:	0800a989 	.word	0x0800a989
 800a920:	0800a989 	.word	0x0800a989
 800a924:	2b6e      	cmp	r3, #110	@ 0x6e
 800a926:	d809      	bhi.n	800a93c <_scanf_float+0x138>
 800a928:	2b60      	cmp	r3, #96	@ 0x60
 800a92a:	d8b1      	bhi.n	800a890 <_scanf_float+0x8c>
 800a92c:	2b54      	cmp	r3, #84	@ 0x54
 800a92e:	d07b      	beq.n	800aa28 <_scanf_float+0x224>
 800a930:	2b59      	cmp	r3, #89	@ 0x59
 800a932:	d19a      	bne.n	800a86a <_scanf_float+0x66>
 800a934:	2d07      	cmp	r5, #7
 800a936:	d198      	bne.n	800a86a <_scanf_float+0x66>
 800a938:	2508      	movs	r5, #8
 800a93a:	e02f      	b.n	800a99c <_scanf_float+0x198>
 800a93c:	2b74      	cmp	r3, #116	@ 0x74
 800a93e:	d073      	beq.n	800aa28 <_scanf_float+0x224>
 800a940:	2b79      	cmp	r3, #121	@ 0x79
 800a942:	e7f6      	b.n	800a932 <_scanf_float+0x12e>
 800a944:	6821      	ldr	r1, [r4, #0]
 800a946:	05c8      	lsls	r0, r1, #23
 800a948:	d51e      	bpl.n	800a988 <_scanf_float+0x184>
 800a94a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a94e:	6021      	str	r1, [r4, #0]
 800a950:	3701      	adds	r7, #1
 800a952:	f1bb 0f00 	cmp.w	fp, #0
 800a956:	d003      	beq.n	800a960 <_scanf_float+0x15c>
 800a958:	3201      	adds	r2, #1
 800a95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a95e:	60a2      	str	r2, [r4, #8]
 800a960:	68a3      	ldr	r3, [r4, #8]
 800a962:	3b01      	subs	r3, #1
 800a964:	60a3      	str	r3, [r4, #8]
 800a966:	6923      	ldr	r3, [r4, #16]
 800a968:	3301      	adds	r3, #1
 800a96a:	6123      	str	r3, [r4, #16]
 800a96c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a970:	3b01      	subs	r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	f8c9 3004 	str.w	r3, [r9, #4]
 800a978:	f340 8082 	ble.w	800aa80 <_scanf_float+0x27c>
 800a97c:	f8d9 3000 	ldr.w	r3, [r9]
 800a980:	3301      	adds	r3, #1
 800a982:	f8c9 3000 	str.w	r3, [r9]
 800a986:	e762      	b.n	800a84e <_scanf_float+0x4a>
 800a988:	eb1a 0105 	adds.w	r1, sl, r5
 800a98c:	f47f af6d 	bne.w	800a86a <_scanf_float+0x66>
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	460d      	mov	r5, r1
 800a99a:	468a      	mov	sl, r1
 800a99c:	f806 3b01 	strb.w	r3, [r6], #1
 800a9a0:	e7de      	b.n	800a960 <_scanf_float+0x15c>
 800a9a2:	6822      	ldr	r2, [r4, #0]
 800a9a4:	0610      	lsls	r0, r2, #24
 800a9a6:	f57f af60 	bpl.w	800a86a <_scanf_float+0x66>
 800a9aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a9ae:	6022      	str	r2, [r4, #0]
 800a9b0:	e7f4      	b.n	800a99c <_scanf_float+0x198>
 800a9b2:	f1ba 0f00 	cmp.w	sl, #0
 800a9b6:	d10c      	bne.n	800a9d2 <_scanf_float+0x1ce>
 800a9b8:	b977      	cbnz	r7, 800a9d8 <_scanf_float+0x1d4>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a9c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a9c4:	d108      	bne.n	800a9d8 <_scanf_float+0x1d4>
 800a9c6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9ca:	6022      	str	r2, [r4, #0]
 800a9cc:	f04f 0a01 	mov.w	sl, #1
 800a9d0:	e7e4      	b.n	800a99c <_scanf_float+0x198>
 800a9d2:	f1ba 0f02 	cmp.w	sl, #2
 800a9d6:	d050      	beq.n	800aa7a <_scanf_float+0x276>
 800a9d8:	2d01      	cmp	r5, #1
 800a9da:	d002      	beq.n	800a9e2 <_scanf_float+0x1de>
 800a9dc:	2d04      	cmp	r5, #4
 800a9de:	f47f af44 	bne.w	800a86a <_scanf_float+0x66>
 800a9e2:	3501      	adds	r5, #1
 800a9e4:	b2ed      	uxtb	r5, r5
 800a9e6:	e7d9      	b.n	800a99c <_scanf_float+0x198>
 800a9e8:	f1ba 0f01 	cmp.w	sl, #1
 800a9ec:	f47f af3d 	bne.w	800a86a <_scanf_float+0x66>
 800a9f0:	f04f 0a02 	mov.w	sl, #2
 800a9f4:	e7d2      	b.n	800a99c <_scanf_float+0x198>
 800a9f6:	b975      	cbnz	r5, 800aa16 <_scanf_float+0x212>
 800a9f8:	2f00      	cmp	r7, #0
 800a9fa:	f47f af37 	bne.w	800a86c <_scanf_float+0x68>
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800aa04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800aa08:	f040 8103 	bne.w	800ac12 <_scanf_float+0x40e>
 800aa0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa10:	6022      	str	r2, [r4, #0]
 800aa12:	2501      	movs	r5, #1
 800aa14:	e7c2      	b.n	800a99c <_scanf_float+0x198>
 800aa16:	2d03      	cmp	r5, #3
 800aa18:	d0e3      	beq.n	800a9e2 <_scanf_float+0x1de>
 800aa1a:	2d05      	cmp	r5, #5
 800aa1c:	e7df      	b.n	800a9de <_scanf_float+0x1da>
 800aa1e:	2d02      	cmp	r5, #2
 800aa20:	f47f af23 	bne.w	800a86a <_scanf_float+0x66>
 800aa24:	2503      	movs	r5, #3
 800aa26:	e7b9      	b.n	800a99c <_scanf_float+0x198>
 800aa28:	2d06      	cmp	r5, #6
 800aa2a:	f47f af1e 	bne.w	800a86a <_scanf_float+0x66>
 800aa2e:	2507      	movs	r5, #7
 800aa30:	e7b4      	b.n	800a99c <_scanf_float+0x198>
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	0591      	lsls	r1, r2, #22
 800aa36:	f57f af18 	bpl.w	800a86a <_scanf_float+0x66>
 800aa3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800aa3e:	6022      	str	r2, [r4, #0]
 800aa40:	9702      	str	r7, [sp, #8]
 800aa42:	e7ab      	b.n	800a99c <_scanf_float+0x198>
 800aa44:	6822      	ldr	r2, [r4, #0]
 800aa46:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800aa4a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800aa4e:	d005      	beq.n	800aa5c <_scanf_float+0x258>
 800aa50:	0550      	lsls	r0, r2, #21
 800aa52:	f57f af0a 	bpl.w	800a86a <_scanf_float+0x66>
 800aa56:	2f00      	cmp	r7, #0
 800aa58:	f000 80db 	beq.w	800ac12 <_scanf_float+0x40e>
 800aa5c:	0591      	lsls	r1, r2, #22
 800aa5e:	bf58      	it	pl
 800aa60:	9902      	ldrpl	r1, [sp, #8]
 800aa62:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800aa66:	bf58      	it	pl
 800aa68:	1a79      	subpl	r1, r7, r1
 800aa6a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa6e:	bf58      	it	pl
 800aa70:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	2700      	movs	r7, #0
 800aa78:	e790      	b.n	800a99c <_scanf_float+0x198>
 800aa7a:	f04f 0a03 	mov.w	sl, #3
 800aa7e:	e78d      	b.n	800a99c <_scanf_float+0x198>
 800aa80:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa84:	4649      	mov	r1, r9
 800aa86:	4640      	mov	r0, r8
 800aa88:	4798      	blx	r3
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	f43f aedf 	beq.w	800a84e <_scanf_float+0x4a>
 800aa90:	e6eb      	b.n	800a86a <_scanf_float+0x66>
 800aa92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa9a:	464a      	mov	r2, r9
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4798      	blx	r3
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	6123      	str	r3, [r4, #16]
 800aaa6:	e6eb      	b.n	800a880 <_scanf_float+0x7c>
 800aaa8:	1e6b      	subs	r3, r5, #1
 800aaaa:	2b06      	cmp	r3, #6
 800aaac:	d824      	bhi.n	800aaf8 <_scanf_float+0x2f4>
 800aaae:	2d02      	cmp	r5, #2
 800aab0:	d836      	bhi.n	800ab20 <_scanf_float+0x31c>
 800aab2:	9b01      	ldr	r3, [sp, #4]
 800aab4:	429e      	cmp	r6, r3
 800aab6:	f67f aee7 	bls.w	800a888 <_scanf_float+0x84>
 800aaba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aabe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aac2:	464a      	mov	r2, r9
 800aac4:	4640      	mov	r0, r8
 800aac6:	4798      	blx	r3
 800aac8:	6923      	ldr	r3, [r4, #16]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	6123      	str	r3, [r4, #16]
 800aace:	e7f0      	b.n	800aab2 <_scanf_float+0x2ae>
 800aad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aad4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aad8:	464a      	mov	r2, r9
 800aada:	4640      	mov	r0, r8
 800aadc:	4798      	blx	r3
 800aade:	6923      	ldr	r3, [r4, #16]
 800aae0:	3b01      	subs	r3, #1
 800aae2:	6123      	str	r3, [r4, #16]
 800aae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aae8:	fa5f fa8a 	uxtb.w	sl, sl
 800aaec:	f1ba 0f02 	cmp.w	sl, #2
 800aaf0:	d1ee      	bne.n	800aad0 <_scanf_float+0x2cc>
 800aaf2:	3d03      	subs	r5, #3
 800aaf4:	b2ed      	uxtb	r5, r5
 800aaf6:	1b76      	subs	r6, r6, r5
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	05da      	lsls	r2, r3, #23
 800aafc:	d530      	bpl.n	800ab60 <_scanf_float+0x35c>
 800aafe:	055b      	lsls	r3, r3, #21
 800ab00:	d511      	bpl.n	800ab26 <_scanf_float+0x322>
 800ab02:	9b01      	ldr	r3, [sp, #4]
 800ab04:	429e      	cmp	r6, r3
 800ab06:	f67f aebf 	bls.w	800a888 <_scanf_float+0x84>
 800ab0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab12:	464a      	mov	r2, r9
 800ab14:	4640      	mov	r0, r8
 800ab16:	4798      	blx	r3
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	6123      	str	r3, [r4, #16]
 800ab1e:	e7f0      	b.n	800ab02 <_scanf_float+0x2fe>
 800ab20:	46aa      	mov	sl, r5
 800ab22:	46b3      	mov	fp, r6
 800ab24:	e7de      	b.n	800aae4 <_scanf_float+0x2e0>
 800ab26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab2a:	6923      	ldr	r3, [r4, #16]
 800ab2c:	2965      	cmp	r1, #101	@ 0x65
 800ab2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab32:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	d00c      	beq.n	800ab54 <_scanf_float+0x350>
 800ab3a:	2945      	cmp	r1, #69	@ 0x45
 800ab3c:	d00a      	beq.n	800ab54 <_scanf_float+0x350>
 800ab3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab42:	464a      	mov	r2, r9
 800ab44:	4640      	mov	r0, r8
 800ab46:	4798      	blx	r3
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab4e:	3b01      	subs	r3, #1
 800ab50:	1eb5      	subs	r5, r6, #2
 800ab52:	6123      	str	r3, [r4, #16]
 800ab54:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab58:	464a      	mov	r2, r9
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	4798      	blx	r3
 800ab5e:	462e      	mov	r6, r5
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	f012 0210 	ands.w	r2, r2, #16
 800ab66:	d001      	beq.n	800ab6c <_scanf_float+0x368>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	e68e      	b.n	800a88a <_scanf_float+0x86>
 800ab6c:	7032      	strb	r2, [r6, #0]
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab78:	d125      	bne.n	800abc6 <_scanf_float+0x3c2>
 800ab7a:	9b02      	ldr	r3, [sp, #8]
 800ab7c:	429f      	cmp	r7, r3
 800ab7e:	d00a      	beq.n	800ab96 <_scanf_float+0x392>
 800ab80:	1bda      	subs	r2, r3, r7
 800ab82:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab86:	429e      	cmp	r6, r3
 800ab88:	bf28      	it	cs
 800ab8a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab8e:	4922      	ldr	r1, [pc, #136]	@ (800ac18 <_scanf_float+0x414>)
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f93d 	bl	800ae10 <siprintf>
 800ab96:	9901      	ldr	r1, [sp, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f002 fc94 	bl	800d4c8 <_strtod_r>
 800aba0:	9b03      	ldr	r3, [sp, #12]
 800aba2:	6821      	ldr	r1, [r4, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f011 0f02 	tst.w	r1, #2
 800abaa:	ec57 6b10 	vmov	r6, r7, d0
 800abae:	f103 0204 	add.w	r2, r3, #4
 800abb2:	d015      	beq.n	800abe0 <_scanf_float+0x3dc>
 800abb4:	9903      	ldr	r1, [sp, #12]
 800abb6:	600a      	str	r2, [r1, #0]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	e9c3 6700 	strd	r6, r7, [r3]
 800abbe:	68e3      	ldr	r3, [r4, #12]
 800abc0:	3301      	adds	r3, #1
 800abc2:	60e3      	str	r3, [r4, #12]
 800abc4:	e7d0      	b.n	800ab68 <_scanf_float+0x364>
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d0e4      	beq.n	800ab96 <_scanf_float+0x392>
 800abcc:	9905      	ldr	r1, [sp, #20]
 800abce:	230a      	movs	r3, #10
 800abd0:	3101      	adds	r1, #1
 800abd2:	4640      	mov	r0, r8
 800abd4:	f002 fcf8 	bl	800d5c8 <_strtol_r>
 800abd8:	9b04      	ldr	r3, [sp, #16]
 800abda:	9e05      	ldr	r6, [sp, #20]
 800abdc:	1ac2      	subs	r2, r0, r3
 800abde:	e7d0      	b.n	800ab82 <_scanf_float+0x37e>
 800abe0:	f011 0f04 	tst.w	r1, #4
 800abe4:	9903      	ldr	r1, [sp, #12]
 800abe6:	600a      	str	r2, [r1, #0]
 800abe8:	d1e6      	bne.n	800abb8 <_scanf_float+0x3b4>
 800abea:	681d      	ldr	r5, [r3, #0]
 800abec:	4632      	mov	r2, r6
 800abee:	463b      	mov	r3, r7
 800abf0:	4630      	mov	r0, r6
 800abf2:	4639      	mov	r1, r7
 800abf4:	f7f5 ff9a 	bl	8000b2c <__aeabi_dcmpun>
 800abf8:	b128      	cbz	r0, 800ac06 <_scanf_float+0x402>
 800abfa:	4808      	ldr	r0, [pc, #32]	@ (800ac1c <_scanf_float+0x418>)
 800abfc:	f000 fa5a 	bl	800b0b4 <nanf>
 800ac00:	ed85 0a00 	vstr	s0, [r5]
 800ac04:	e7db      	b.n	800abbe <_scanf_float+0x3ba>
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f5 ffed 	bl	8000be8 <__aeabi_d2f>
 800ac0e:	6028      	str	r0, [r5, #0]
 800ac10:	e7d5      	b.n	800abbe <_scanf_float+0x3ba>
 800ac12:	2700      	movs	r7, #0
 800ac14:	e62e      	b.n	800a874 <_scanf_float+0x70>
 800ac16:	bf00      	nop
 800ac18:	0800eb40 	.word	0x0800eb40
 800ac1c:	0800ec81 	.word	0x0800ec81

0800ac20 <std>:
 800ac20:	2300      	movs	r3, #0
 800ac22:	b510      	push	{r4, lr}
 800ac24:	4604      	mov	r4, r0
 800ac26:	e9c0 3300 	strd	r3, r3, [r0]
 800ac2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac2e:	6083      	str	r3, [r0, #8]
 800ac30:	8181      	strh	r1, [r0, #12]
 800ac32:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac34:	81c2      	strh	r2, [r0, #14]
 800ac36:	6183      	str	r3, [r0, #24]
 800ac38:	4619      	mov	r1, r3
 800ac3a:	2208      	movs	r2, #8
 800ac3c:	305c      	adds	r0, #92	@ 0x5c
 800ac3e:	f000 f94c 	bl	800aeda <memset>
 800ac42:	4b0d      	ldr	r3, [pc, #52]	@ (800ac78 <std+0x58>)
 800ac44:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac46:	4b0d      	ldr	r3, [pc, #52]	@ (800ac7c <std+0x5c>)
 800ac48:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac4a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac80 <std+0x60>)
 800ac4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac84 <std+0x64>)
 800ac50:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac52:	4b0d      	ldr	r3, [pc, #52]	@ (800ac88 <std+0x68>)
 800ac54:	6224      	str	r4, [r4, #32]
 800ac56:	429c      	cmp	r4, r3
 800ac58:	d006      	beq.n	800ac68 <std+0x48>
 800ac5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac5e:	4294      	cmp	r4, r2
 800ac60:	d002      	beq.n	800ac68 <std+0x48>
 800ac62:	33d0      	adds	r3, #208	@ 0xd0
 800ac64:	429c      	cmp	r4, r3
 800ac66:	d105      	bne.n	800ac74 <std+0x54>
 800ac68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f000 ba0e 	b.w	800b090 <__retarget_lock_init_recursive>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	0800ae55 	.word	0x0800ae55
 800ac7c:	0800ae77 	.word	0x0800ae77
 800ac80:	0800aeaf 	.word	0x0800aeaf
 800ac84:	0800aed3 	.word	0x0800aed3
 800ac88:	20004e3c 	.word	0x20004e3c

0800ac8c <stdio_exit_handler>:
 800ac8c:	4a02      	ldr	r2, [pc, #8]	@ (800ac98 <stdio_exit_handler+0xc>)
 800ac8e:	4903      	ldr	r1, [pc, #12]	@ (800ac9c <stdio_exit_handler+0x10>)
 800ac90:	4803      	ldr	r0, [pc, #12]	@ (800aca0 <stdio_exit_handler+0x14>)
 800ac92:	f000 b869 	b.w	800ad68 <_fwalk_sglue>
 800ac96:	bf00      	nop
 800ac98:	20000014 	.word	0x20000014
 800ac9c:	0800dc09 	.word	0x0800dc09
 800aca0:	20000024 	.word	0x20000024

0800aca4 <cleanup_stdio>:
 800aca4:	6841      	ldr	r1, [r0, #4]
 800aca6:	4b0c      	ldr	r3, [pc, #48]	@ (800acd8 <cleanup_stdio+0x34>)
 800aca8:	4299      	cmp	r1, r3
 800acaa:	b510      	push	{r4, lr}
 800acac:	4604      	mov	r4, r0
 800acae:	d001      	beq.n	800acb4 <cleanup_stdio+0x10>
 800acb0:	f002 ffaa 	bl	800dc08 <_fflush_r>
 800acb4:	68a1      	ldr	r1, [r4, #8]
 800acb6:	4b09      	ldr	r3, [pc, #36]	@ (800acdc <cleanup_stdio+0x38>)
 800acb8:	4299      	cmp	r1, r3
 800acba:	d002      	beq.n	800acc2 <cleanup_stdio+0x1e>
 800acbc:	4620      	mov	r0, r4
 800acbe:	f002 ffa3 	bl	800dc08 <_fflush_r>
 800acc2:	68e1      	ldr	r1, [r4, #12]
 800acc4:	4b06      	ldr	r3, [pc, #24]	@ (800ace0 <cleanup_stdio+0x3c>)
 800acc6:	4299      	cmp	r1, r3
 800acc8:	d004      	beq.n	800acd4 <cleanup_stdio+0x30>
 800acca:	4620      	mov	r0, r4
 800accc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acd0:	f002 bf9a 	b.w	800dc08 <_fflush_r>
 800acd4:	bd10      	pop	{r4, pc}
 800acd6:	bf00      	nop
 800acd8:	20004e3c 	.word	0x20004e3c
 800acdc:	20004ea4 	.word	0x20004ea4
 800ace0:	20004f0c 	.word	0x20004f0c

0800ace4 <global_stdio_init.part.0>:
 800ace4:	b510      	push	{r4, lr}
 800ace6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad14 <global_stdio_init.part.0+0x30>)
 800ace8:	4c0b      	ldr	r4, [pc, #44]	@ (800ad18 <global_stdio_init.part.0+0x34>)
 800acea:	4a0c      	ldr	r2, [pc, #48]	@ (800ad1c <global_stdio_init.part.0+0x38>)
 800acec:	601a      	str	r2, [r3, #0]
 800acee:	4620      	mov	r0, r4
 800acf0:	2200      	movs	r2, #0
 800acf2:	2104      	movs	r1, #4
 800acf4:	f7ff ff94 	bl	800ac20 <std>
 800acf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800acfc:	2201      	movs	r2, #1
 800acfe:	2109      	movs	r1, #9
 800ad00:	f7ff ff8e 	bl	800ac20 <std>
 800ad04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad08:	2202      	movs	r2, #2
 800ad0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0e:	2112      	movs	r1, #18
 800ad10:	f7ff bf86 	b.w	800ac20 <std>
 800ad14:	20004f74 	.word	0x20004f74
 800ad18:	20004e3c 	.word	0x20004e3c
 800ad1c:	0800ac8d 	.word	0x0800ac8d

0800ad20 <__sfp_lock_acquire>:
 800ad20:	4801      	ldr	r0, [pc, #4]	@ (800ad28 <__sfp_lock_acquire+0x8>)
 800ad22:	f000 b9b6 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	20004f7d 	.word	0x20004f7d

0800ad2c <__sfp_lock_release>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	@ (800ad34 <__sfp_lock_release+0x8>)
 800ad2e:	f000 b9b1 	b.w	800b094 <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	20004f7d 	.word	0x20004f7d

0800ad38 <__sinit>:
 800ad38:	b510      	push	{r4, lr}
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	f7ff fff0 	bl	800ad20 <__sfp_lock_acquire>
 800ad40:	6a23      	ldr	r3, [r4, #32]
 800ad42:	b11b      	cbz	r3, 800ad4c <__sinit+0x14>
 800ad44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad48:	f7ff bff0 	b.w	800ad2c <__sfp_lock_release>
 800ad4c:	4b04      	ldr	r3, [pc, #16]	@ (800ad60 <__sinit+0x28>)
 800ad4e:	6223      	str	r3, [r4, #32]
 800ad50:	4b04      	ldr	r3, [pc, #16]	@ (800ad64 <__sinit+0x2c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1f5      	bne.n	800ad44 <__sinit+0xc>
 800ad58:	f7ff ffc4 	bl	800ace4 <global_stdio_init.part.0>
 800ad5c:	e7f2      	b.n	800ad44 <__sinit+0xc>
 800ad5e:	bf00      	nop
 800ad60:	0800aca5 	.word	0x0800aca5
 800ad64:	20004f74 	.word	0x20004f74

0800ad68 <_fwalk_sglue>:
 800ad68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4688      	mov	r8, r1
 800ad70:	4614      	mov	r4, r2
 800ad72:	2600      	movs	r6, #0
 800ad74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad78:	f1b9 0901 	subs.w	r9, r9, #1
 800ad7c:	d505      	bpl.n	800ad8a <_fwalk_sglue+0x22>
 800ad7e:	6824      	ldr	r4, [r4, #0]
 800ad80:	2c00      	cmp	r4, #0
 800ad82:	d1f7      	bne.n	800ad74 <_fwalk_sglue+0xc>
 800ad84:	4630      	mov	r0, r6
 800ad86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad8a:	89ab      	ldrh	r3, [r5, #12]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d907      	bls.n	800ada0 <_fwalk_sglue+0x38>
 800ad90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad94:	3301      	adds	r3, #1
 800ad96:	d003      	beq.n	800ada0 <_fwalk_sglue+0x38>
 800ad98:	4629      	mov	r1, r5
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	47c0      	blx	r8
 800ad9e:	4306      	orrs	r6, r0
 800ada0:	3568      	adds	r5, #104	@ 0x68
 800ada2:	e7e9      	b.n	800ad78 <_fwalk_sglue+0x10>

0800ada4 <sniprintf>:
 800ada4:	b40c      	push	{r2, r3}
 800ada6:	b530      	push	{r4, r5, lr}
 800ada8:	4b18      	ldr	r3, [pc, #96]	@ (800ae0c <sniprintf+0x68>)
 800adaa:	1e0c      	subs	r4, r1, #0
 800adac:	681d      	ldr	r5, [r3, #0]
 800adae:	b09d      	sub	sp, #116	@ 0x74
 800adb0:	da08      	bge.n	800adc4 <sniprintf+0x20>
 800adb2:	238b      	movs	r3, #139	@ 0x8b
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	f04f 30ff 	mov.w	r0, #4294967295
 800adba:	b01d      	add	sp, #116	@ 0x74
 800adbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adc0:	b002      	add	sp, #8
 800adc2:	4770      	bx	lr
 800adc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800adc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800adcc:	f04f 0300 	mov.w	r3, #0
 800add0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800add2:	bf14      	ite	ne
 800add4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800add8:	4623      	moveq	r3, r4
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	9307      	str	r3, [sp, #28]
 800adde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ade2:	9002      	str	r0, [sp, #8]
 800ade4:	9006      	str	r0, [sp, #24]
 800ade6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adec:	ab21      	add	r3, sp, #132	@ 0x84
 800adee:	a902      	add	r1, sp, #8
 800adf0:	4628      	mov	r0, r5
 800adf2:	9301      	str	r3, [sp, #4]
 800adf4:	f002 fc46 	bl	800d684 <_svfiprintf_r>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	bfbc      	itt	lt
 800adfc:	238b      	movlt	r3, #139	@ 0x8b
 800adfe:	602b      	strlt	r3, [r5, #0]
 800ae00:	2c00      	cmp	r4, #0
 800ae02:	d0da      	beq.n	800adba <sniprintf+0x16>
 800ae04:	9b02      	ldr	r3, [sp, #8]
 800ae06:	2200      	movs	r2, #0
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	e7d6      	b.n	800adba <sniprintf+0x16>
 800ae0c:	20000020 	.word	0x20000020

0800ae10 <siprintf>:
 800ae10:	b40e      	push	{r1, r2, r3}
 800ae12:	b510      	push	{r4, lr}
 800ae14:	b09d      	sub	sp, #116	@ 0x74
 800ae16:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ae18:	9002      	str	r0, [sp, #8]
 800ae1a:	9006      	str	r0, [sp, #24]
 800ae1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae20:	480a      	ldr	r0, [pc, #40]	@ (800ae4c <siprintf+0x3c>)
 800ae22:	9107      	str	r1, [sp, #28]
 800ae24:	9104      	str	r1, [sp, #16]
 800ae26:	490a      	ldr	r1, [pc, #40]	@ (800ae50 <siprintf+0x40>)
 800ae28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae2c:	9105      	str	r1, [sp, #20]
 800ae2e:	2400      	movs	r4, #0
 800ae30:	a902      	add	r1, sp, #8
 800ae32:	6800      	ldr	r0, [r0, #0]
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ae38:	f002 fc24 	bl	800d684 <_svfiprintf_r>
 800ae3c:	9b02      	ldr	r3, [sp, #8]
 800ae3e:	701c      	strb	r4, [r3, #0]
 800ae40:	b01d      	add	sp, #116	@ 0x74
 800ae42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae46:	b003      	add	sp, #12
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	20000020 	.word	0x20000020
 800ae50:	ffff0208 	.word	0xffff0208

0800ae54 <__sread>:
 800ae54:	b510      	push	{r4, lr}
 800ae56:	460c      	mov	r4, r1
 800ae58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5c:	f000 f8ca 	bl	800aff4 <_read_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	bfab      	itete	ge
 800ae64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae66:	89a3      	ldrhlt	r3, [r4, #12]
 800ae68:	181b      	addge	r3, r3, r0
 800ae6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae6e:	bfac      	ite	ge
 800ae70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae72:	81a3      	strhlt	r3, [r4, #12]
 800ae74:	bd10      	pop	{r4, pc}

0800ae76 <__swrite>:
 800ae76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7a:	461f      	mov	r7, r3
 800ae7c:	898b      	ldrh	r3, [r1, #12]
 800ae7e:	05db      	lsls	r3, r3, #23
 800ae80:	4605      	mov	r5, r0
 800ae82:	460c      	mov	r4, r1
 800ae84:	4616      	mov	r6, r2
 800ae86:	d505      	bpl.n	800ae94 <__swrite+0x1e>
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f000 f89e 	bl	800afd0 <_lseek_r>
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	4632      	mov	r2, r6
 800aea2:	463b      	mov	r3, r7
 800aea4:	4628      	mov	r0, r5
 800aea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeaa:	f000 b8b5 	b.w	800b018 <_write_r>

0800aeae <__sseek>:
 800aeae:	b510      	push	{r4, lr}
 800aeb0:	460c      	mov	r4, r1
 800aeb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeb6:	f000 f88b 	bl	800afd0 <_lseek_r>
 800aeba:	1c43      	adds	r3, r0, #1
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	bf15      	itete	ne
 800aec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aeca:	81a3      	strheq	r3, [r4, #12]
 800aecc:	bf18      	it	ne
 800aece:	81a3      	strhne	r3, [r4, #12]
 800aed0:	bd10      	pop	{r4, pc}

0800aed2 <__sclose>:
 800aed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed6:	f000 b80d 	b.w	800aef4 <_close_r>

0800aeda <memset>:
 800aeda:	4402      	add	r2, r0
 800aedc:	4603      	mov	r3, r0
 800aede:	4293      	cmp	r3, r2
 800aee0:	d100      	bne.n	800aee4 <memset+0xa>
 800aee2:	4770      	bx	lr
 800aee4:	f803 1b01 	strb.w	r1, [r3], #1
 800aee8:	e7f9      	b.n	800aede <memset+0x4>
	...

0800aeec <_localeconv_r>:
 800aeec:	4800      	ldr	r0, [pc, #0]	@ (800aef0 <_localeconv_r+0x4>)
 800aeee:	4770      	bx	lr
 800aef0:	20000160 	.word	0x20000160

0800aef4 <_close_r>:
 800aef4:	b538      	push	{r3, r4, r5, lr}
 800aef6:	4d06      	ldr	r5, [pc, #24]	@ (800af10 <_close_r+0x1c>)
 800aef8:	2300      	movs	r3, #0
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	602b      	str	r3, [r5, #0]
 800af00:	f7f7 fe6c 	bl	8002bdc <_close>
 800af04:	1c43      	adds	r3, r0, #1
 800af06:	d102      	bne.n	800af0e <_close_r+0x1a>
 800af08:	682b      	ldr	r3, [r5, #0]
 800af0a:	b103      	cbz	r3, 800af0e <_close_r+0x1a>
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	bd38      	pop	{r3, r4, r5, pc}
 800af10:	20004f78 	.word	0x20004f78

0800af14 <_reclaim_reent>:
 800af14:	4b2d      	ldr	r3, [pc, #180]	@ (800afcc <_reclaim_reent+0xb8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4283      	cmp	r3, r0
 800af1a:	b570      	push	{r4, r5, r6, lr}
 800af1c:	4604      	mov	r4, r0
 800af1e:	d053      	beq.n	800afc8 <_reclaim_reent+0xb4>
 800af20:	69c3      	ldr	r3, [r0, #28]
 800af22:	b31b      	cbz	r3, 800af6c <_reclaim_reent+0x58>
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	b163      	cbz	r3, 800af42 <_reclaim_reent+0x2e>
 800af28:	2500      	movs	r5, #0
 800af2a:	69e3      	ldr	r3, [r4, #28]
 800af2c:	68db      	ldr	r3, [r3, #12]
 800af2e:	5959      	ldr	r1, [r3, r5]
 800af30:	b9b1      	cbnz	r1, 800af60 <_reclaim_reent+0x4c>
 800af32:	3504      	adds	r5, #4
 800af34:	2d80      	cmp	r5, #128	@ 0x80
 800af36:	d1f8      	bne.n	800af2a <_reclaim_reent+0x16>
 800af38:	69e3      	ldr	r3, [r4, #28]
 800af3a:	4620      	mov	r0, r4
 800af3c:	68d9      	ldr	r1, [r3, #12]
 800af3e:	f000 ff17 	bl	800bd70 <_free_r>
 800af42:	69e3      	ldr	r3, [r4, #28]
 800af44:	6819      	ldr	r1, [r3, #0]
 800af46:	b111      	cbz	r1, 800af4e <_reclaim_reent+0x3a>
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 ff11 	bl	800bd70 <_free_r>
 800af4e:	69e3      	ldr	r3, [r4, #28]
 800af50:	689d      	ldr	r5, [r3, #8]
 800af52:	b15d      	cbz	r5, 800af6c <_reclaim_reent+0x58>
 800af54:	4629      	mov	r1, r5
 800af56:	4620      	mov	r0, r4
 800af58:	682d      	ldr	r5, [r5, #0]
 800af5a:	f000 ff09 	bl	800bd70 <_free_r>
 800af5e:	e7f8      	b.n	800af52 <_reclaim_reent+0x3e>
 800af60:	680e      	ldr	r6, [r1, #0]
 800af62:	4620      	mov	r0, r4
 800af64:	f000 ff04 	bl	800bd70 <_free_r>
 800af68:	4631      	mov	r1, r6
 800af6a:	e7e1      	b.n	800af30 <_reclaim_reent+0x1c>
 800af6c:	6961      	ldr	r1, [r4, #20]
 800af6e:	b111      	cbz	r1, 800af76 <_reclaim_reent+0x62>
 800af70:	4620      	mov	r0, r4
 800af72:	f000 fefd 	bl	800bd70 <_free_r>
 800af76:	69e1      	ldr	r1, [r4, #28]
 800af78:	b111      	cbz	r1, 800af80 <_reclaim_reent+0x6c>
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fef8 	bl	800bd70 <_free_r>
 800af80:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800af82:	b111      	cbz	r1, 800af8a <_reclaim_reent+0x76>
 800af84:	4620      	mov	r0, r4
 800af86:	f000 fef3 	bl	800bd70 <_free_r>
 800af8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af8c:	b111      	cbz	r1, 800af94 <_reclaim_reent+0x80>
 800af8e:	4620      	mov	r0, r4
 800af90:	f000 feee 	bl	800bd70 <_free_r>
 800af94:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800af96:	b111      	cbz	r1, 800af9e <_reclaim_reent+0x8a>
 800af98:	4620      	mov	r0, r4
 800af9a:	f000 fee9 	bl	800bd70 <_free_r>
 800af9e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800afa0:	b111      	cbz	r1, 800afa8 <_reclaim_reent+0x94>
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fee4 	bl	800bd70 <_free_r>
 800afa8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800afaa:	b111      	cbz	r1, 800afb2 <_reclaim_reent+0x9e>
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fedf 	bl	800bd70 <_free_r>
 800afb2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800afb4:	b111      	cbz	r1, 800afbc <_reclaim_reent+0xa8>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 feda 	bl	800bd70 <_free_r>
 800afbc:	6a23      	ldr	r3, [r4, #32]
 800afbe:	b11b      	cbz	r3, 800afc8 <_reclaim_reent+0xb4>
 800afc0:	4620      	mov	r0, r4
 800afc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800afc6:	4718      	bx	r3
 800afc8:	bd70      	pop	{r4, r5, r6, pc}
 800afca:	bf00      	nop
 800afcc:	20000020 	.word	0x20000020

0800afd0 <_lseek_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d07      	ldr	r5, [pc, #28]	@ (800aff0 <_lseek_r+0x20>)
 800afd4:	4604      	mov	r4, r0
 800afd6:	4608      	mov	r0, r1
 800afd8:	4611      	mov	r1, r2
 800afda:	2200      	movs	r2, #0
 800afdc:	602a      	str	r2, [r5, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	f7f7 fe23 	bl	8002c2a <_lseek>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_lseek_r+0x1e>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_lseek_r+0x1e>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	20004f78 	.word	0x20004f78

0800aff4 <_read_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	4d07      	ldr	r5, [pc, #28]	@ (800b014 <_read_r+0x20>)
 800aff8:	4604      	mov	r4, r0
 800affa:	4608      	mov	r0, r1
 800affc:	4611      	mov	r1, r2
 800affe:	2200      	movs	r2, #0
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	461a      	mov	r2, r3
 800b004:	f7f7 fdb1 	bl	8002b6a <_read>
 800b008:	1c43      	adds	r3, r0, #1
 800b00a:	d102      	bne.n	800b012 <_read_r+0x1e>
 800b00c:	682b      	ldr	r3, [r5, #0]
 800b00e:	b103      	cbz	r3, 800b012 <_read_r+0x1e>
 800b010:	6023      	str	r3, [r4, #0]
 800b012:	bd38      	pop	{r3, r4, r5, pc}
 800b014:	20004f78 	.word	0x20004f78

0800b018 <_write_r>:
 800b018:	b538      	push	{r3, r4, r5, lr}
 800b01a:	4d07      	ldr	r5, [pc, #28]	@ (800b038 <_write_r+0x20>)
 800b01c:	4604      	mov	r4, r0
 800b01e:	4608      	mov	r0, r1
 800b020:	4611      	mov	r1, r2
 800b022:	2200      	movs	r2, #0
 800b024:	602a      	str	r2, [r5, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	f7f7 fdbc 	bl	8002ba4 <_write>
 800b02c:	1c43      	adds	r3, r0, #1
 800b02e:	d102      	bne.n	800b036 <_write_r+0x1e>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	b103      	cbz	r3, 800b036 <_write_r+0x1e>
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	bd38      	pop	{r3, r4, r5, pc}
 800b038:	20004f78 	.word	0x20004f78

0800b03c <__errno>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	@ (800b044 <__errno+0x8>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	20000020 	.word	0x20000020

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4d0d      	ldr	r5, [pc, #52]	@ (800b080 <__libc_init_array+0x38>)
 800b04c:	4c0d      	ldr	r4, [pc, #52]	@ (800b084 <__libc_init_array+0x3c>)
 800b04e:	1b64      	subs	r4, r4, r5
 800b050:	10a4      	asrs	r4, r4, #2
 800b052:	2600      	movs	r6, #0
 800b054:	42a6      	cmp	r6, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	4d0b      	ldr	r5, [pc, #44]	@ (800b088 <__libc_init_array+0x40>)
 800b05a:	4c0c      	ldr	r4, [pc, #48]	@ (800b08c <__libc_init_array+0x44>)
 800b05c:	f003 fb76 	bl	800e74c <_init>
 800b060:	1b64      	subs	r4, r4, r5
 800b062:	10a4      	asrs	r4, r4, #2
 800b064:	2600      	movs	r6, #0
 800b066:	42a6      	cmp	r6, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b070:	4798      	blx	r3
 800b072:	3601      	adds	r6, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07a:	4798      	blx	r3
 800b07c:	3601      	adds	r6, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800ef3c 	.word	0x0800ef3c
 800b084:	0800ef3c 	.word	0x0800ef3c
 800b088:	0800ef3c 	.word	0x0800ef3c
 800b08c:	0800ef40 	.word	0x0800ef40

0800b090 <__retarget_lock_init_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_acquire_recursive>:
 800b092:	4770      	bx	lr

0800b094 <__retarget_lock_release_recursive>:
 800b094:	4770      	bx	lr

0800b096 <memcpy>:
 800b096:	440a      	add	r2, r1
 800b098:	4291      	cmp	r1, r2
 800b09a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b09e:	d100      	bne.n	800b0a2 <memcpy+0xc>
 800b0a0:	4770      	bx	lr
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0ac:	4291      	cmp	r1, r2
 800b0ae:	d1f9      	bne.n	800b0a4 <memcpy+0xe>
 800b0b0:	bd10      	pop	{r4, pc}
	...

0800b0b4 <nanf>:
 800b0b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b0bc <nanf+0x8>
 800b0b8:	4770      	bx	lr
 800b0ba:	bf00      	nop
 800b0bc:	7fc00000 	.word	0x7fc00000

0800b0c0 <quorem>:
 800b0c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	6903      	ldr	r3, [r0, #16]
 800b0c6:	690c      	ldr	r4, [r1, #16]
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	4607      	mov	r7, r0
 800b0cc:	db7e      	blt.n	800b1cc <quorem+0x10c>
 800b0ce:	3c01      	subs	r4, #1
 800b0d0:	f101 0814 	add.w	r8, r1, #20
 800b0d4:	00a3      	lsls	r3, r4, #2
 800b0d6:	f100 0514 	add.w	r5, r0, #20
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0e0:	9301      	str	r3, [sp, #4]
 800b0e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800b0f6:	d32e      	bcc.n	800b156 <quorem+0x96>
 800b0f8:	f04f 0a00 	mov.w	sl, #0
 800b0fc:	46c4      	mov	ip, r8
 800b0fe:	46ae      	mov	lr, r5
 800b100:	46d3      	mov	fp, sl
 800b102:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b106:	b298      	uxth	r0, r3
 800b108:	fb06 a000 	mla	r0, r6, r0, sl
 800b10c:	0c02      	lsrs	r2, r0, #16
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	fb06 2303 	mla	r3, r6, r3, r2
 800b114:	f8de 2000 	ldr.w	r2, [lr]
 800b118:	b280      	uxth	r0, r0
 800b11a:	b292      	uxth	r2, r2
 800b11c:	1a12      	subs	r2, r2, r0
 800b11e:	445a      	add	r2, fp
 800b120:	f8de 0000 	ldr.w	r0, [lr]
 800b124:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b128:	b29b      	uxth	r3, r3
 800b12a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b12e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b132:	b292      	uxth	r2, r2
 800b134:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b138:	45e1      	cmp	r9, ip
 800b13a:	f84e 2b04 	str.w	r2, [lr], #4
 800b13e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b142:	d2de      	bcs.n	800b102 <quorem+0x42>
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	58eb      	ldr	r3, [r5, r3]
 800b148:	b92b      	cbnz	r3, 800b156 <quorem+0x96>
 800b14a:	9b01      	ldr	r3, [sp, #4]
 800b14c:	3b04      	subs	r3, #4
 800b14e:	429d      	cmp	r5, r3
 800b150:	461a      	mov	r2, r3
 800b152:	d32f      	bcc.n	800b1b4 <quorem+0xf4>
 800b154:	613c      	str	r4, [r7, #16]
 800b156:	4638      	mov	r0, r7
 800b158:	f001 f9c6 	bl	800c4e8 <__mcmp>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	db25      	blt.n	800b1ac <quorem+0xec>
 800b160:	4629      	mov	r1, r5
 800b162:	2000      	movs	r0, #0
 800b164:	f858 2b04 	ldr.w	r2, [r8], #4
 800b168:	f8d1 c000 	ldr.w	ip, [r1]
 800b16c:	fa1f fe82 	uxth.w	lr, r2
 800b170:	fa1f f38c 	uxth.w	r3, ip
 800b174:	eba3 030e 	sub.w	r3, r3, lr
 800b178:	4403      	add	r3, r0
 800b17a:	0c12      	lsrs	r2, r2, #16
 800b17c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b180:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b184:	b29b      	uxth	r3, r3
 800b186:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b18a:	45c1      	cmp	r9, r8
 800b18c:	f841 3b04 	str.w	r3, [r1], #4
 800b190:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b194:	d2e6      	bcs.n	800b164 <quorem+0xa4>
 800b196:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b19a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b19e:	b922      	cbnz	r2, 800b1aa <quorem+0xea>
 800b1a0:	3b04      	subs	r3, #4
 800b1a2:	429d      	cmp	r5, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	d30b      	bcc.n	800b1c0 <quorem+0x100>
 800b1a8:	613c      	str	r4, [r7, #16]
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	b003      	add	sp, #12
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	6812      	ldr	r2, [r2, #0]
 800b1b6:	3b04      	subs	r3, #4
 800b1b8:	2a00      	cmp	r2, #0
 800b1ba:	d1cb      	bne.n	800b154 <quorem+0x94>
 800b1bc:	3c01      	subs	r4, #1
 800b1be:	e7c6      	b.n	800b14e <quorem+0x8e>
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	3b04      	subs	r3, #4
 800b1c4:	2a00      	cmp	r2, #0
 800b1c6:	d1ef      	bne.n	800b1a8 <quorem+0xe8>
 800b1c8:	3c01      	subs	r4, #1
 800b1ca:	e7ea      	b.n	800b1a2 <quorem+0xe2>
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	e7ee      	b.n	800b1ae <quorem+0xee>

0800b1d0 <_dtoa_r>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	69c7      	ldr	r7, [r0, #28]
 800b1d6:	b097      	sub	sp, #92	@ 0x5c
 800b1d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b1dc:	ec55 4b10 	vmov	r4, r5, d0
 800b1e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b1e2:	9107      	str	r1, [sp, #28]
 800b1e4:	4681      	mov	r9, r0
 800b1e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b1e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b1ea:	b97f      	cbnz	r7, 800b20c <_dtoa_r+0x3c>
 800b1ec:	2010      	movs	r0, #16
 800b1ee:	f000 fe09 	bl	800be04 <malloc>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	f8c9 001c 	str.w	r0, [r9, #28]
 800b1f8:	b920      	cbnz	r0, 800b204 <_dtoa_r+0x34>
 800b1fa:	4ba9      	ldr	r3, [pc, #676]	@ (800b4a0 <_dtoa_r+0x2d0>)
 800b1fc:	21ef      	movs	r1, #239	@ 0xef
 800b1fe:	48a9      	ldr	r0, [pc, #676]	@ (800b4a4 <_dtoa_r+0x2d4>)
 800b200:	f002 fe02 	bl	800de08 <__assert_func>
 800b204:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b208:	6007      	str	r7, [r0, #0]
 800b20a:	60c7      	str	r7, [r0, #12]
 800b20c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b210:	6819      	ldr	r1, [r3, #0]
 800b212:	b159      	cbz	r1, 800b22c <_dtoa_r+0x5c>
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	604a      	str	r2, [r1, #4]
 800b218:	2301      	movs	r3, #1
 800b21a:	4093      	lsls	r3, r2
 800b21c:	608b      	str	r3, [r1, #8]
 800b21e:	4648      	mov	r0, r9
 800b220:	f000 fee6 	bl	800bff0 <_Bfree>
 800b224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b228:	2200      	movs	r2, #0
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	1e2b      	subs	r3, r5, #0
 800b22e:	bfb9      	ittee	lt
 800b230:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b234:	9305      	strlt	r3, [sp, #20]
 800b236:	2300      	movge	r3, #0
 800b238:	6033      	strge	r3, [r6, #0]
 800b23a:	9f05      	ldr	r7, [sp, #20]
 800b23c:	4b9a      	ldr	r3, [pc, #616]	@ (800b4a8 <_dtoa_r+0x2d8>)
 800b23e:	bfbc      	itt	lt
 800b240:	2201      	movlt	r2, #1
 800b242:	6032      	strlt	r2, [r6, #0]
 800b244:	43bb      	bics	r3, r7
 800b246:	d112      	bne.n	800b26e <_dtoa_r+0x9e>
 800b248:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b24a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b24e:	6013      	str	r3, [r2, #0]
 800b250:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b254:	4323      	orrs	r3, r4
 800b256:	f000 855a 	beq.w	800bd0e <_dtoa_r+0xb3e>
 800b25a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b25c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b4bc <_dtoa_r+0x2ec>
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 855c 	beq.w	800bd1e <_dtoa_r+0xb4e>
 800b266:	f10a 0303 	add.w	r3, sl, #3
 800b26a:	f000 bd56 	b.w	800bd1a <_dtoa_r+0xb4a>
 800b26e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b272:	2200      	movs	r2, #0
 800b274:	ec51 0b17 	vmov	r0, r1, d7
 800b278:	2300      	movs	r3, #0
 800b27a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b27e:	f7f5 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 800b282:	4680      	mov	r8, r0
 800b284:	b158      	cbz	r0, 800b29e <_dtoa_r+0xce>
 800b286:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b288:	2301      	movs	r3, #1
 800b28a:	6013      	str	r3, [r2, #0]
 800b28c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b28e:	b113      	cbz	r3, 800b296 <_dtoa_r+0xc6>
 800b290:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b292:	4b86      	ldr	r3, [pc, #536]	@ (800b4ac <_dtoa_r+0x2dc>)
 800b294:	6013      	str	r3, [r2, #0]
 800b296:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b4c0 <_dtoa_r+0x2f0>
 800b29a:	f000 bd40 	b.w	800bd1e <_dtoa_r+0xb4e>
 800b29e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b2a2:	aa14      	add	r2, sp, #80	@ 0x50
 800b2a4:	a915      	add	r1, sp, #84	@ 0x54
 800b2a6:	4648      	mov	r0, r9
 800b2a8:	f001 fa3e 	bl	800c728 <__d2b>
 800b2ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2b0:	9002      	str	r0, [sp, #8]
 800b2b2:	2e00      	cmp	r6, #0
 800b2b4:	d078      	beq.n	800b3a8 <_dtoa_r+0x1d8>
 800b2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b2bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4b76      	ldr	r3, [pc, #472]	@ (800b4b0 <_dtoa_r+0x2e0>)
 800b2d6:	f7f4 ffd7 	bl	8000288 <__aeabi_dsub>
 800b2da:	a36b      	add	r3, pc, #428	@ (adr r3, 800b488 <_dtoa_r+0x2b8>)
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	f7f5 f98a 	bl	80005f8 <__aeabi_dmul>
 800b2e4:	a36a      	add	r3, pc, #424	@ (adr r3, 800b490 <_dtoa_r+0x2c0>)
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f4 ffcf 	bl	800028c <__adddf3>
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	460d      	mov	r5, r1
 800b2f4:	f7f5 f916 	bl	8000524 <__aeabi_i2d>
 800b2f8:	a367      	add	r3, pc, #412	@ (adr r3, 800b498 <_dtoa_r+0x2c8>)
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	f7f5 f97b 	bl	80005f8 <__aeabi_dmul>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4620      	mov	r0, r4
 800b308:	4629      	mov	r1, r5
 800b30a:	f7f4 ffbf 	bl	800028c <__adddf3>
 800b30e:	4604      	mov	r4, r0
 800b310:	460d      	mov	r5, r1
 800b312:	f7f5 fc21 	bl	8000b58 <__aeabi_d2iz>
 800b316:	2200      	movs	r2, #0
 800b318:	4607      	mov	r7, r0
 800b31a:	2300      	movs	r3, #0
 800b31c:	4620      	mov	r0, r4
 800b31e:	4629      	mov	r1, r5
 800b320:	f7f5 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800b324:	b140      	cbz	r0, 800b338 <_dtoa_r+0x168>
 800b326:	4638      	mov	r0, r7
 800b328:	f7f5 f8fc 	bl	8000524 <__aeabi_i2d>
 800b32c:	4622      	mov	r2, r4
 800b32e:	462b      	mov	r3, r5
 800b330:	f7f5 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 800b334:	b900      	cbnz	r0, 800b338 <_dtoa_r+0x168>
 800b336:	3f01      	subs	r7, #1
 800b338:	2f16      	cmp	r7, #22
 800b33a:	d852      	bhi.n	800b3e2 <_dtoa_r+0x212>
 800b33c:	4b5d      	ldr	r3, [pc, #372]	@ (800b4b4 <_dtoa_r+0x2e4>)
 800b33e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b34a:	f7f5 fbc7 	bl	8000adc <__aeabi_dcmplt>
 800b34e:	2800      	cmp	r0, #0
 800b350:	d049      	beq.n	800b3e6 <_dtoa_r+0x216>
 800b352:	3f01      	subs	r7, #1
 800b354:	2300      	movs	r3, #0
 800b356:	9310      	str	r3, [sp, #64]	@ 0x40
 800b358:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b35a:	1b9b      	subs	r3, r3, r6
 800b35c:	1e5a      	subs	r2, r3, #1
 800b35e:	bf45      	ittet	mi
 800b360:	f1c3 0301 	rsbmi	r3, r3, #1
 800b364:	9300      	strmi	r3, [sp, #0]
 800b366:	2300      	movpl	r3, #0
 800b368:	2300      	movmi	r3, #0
 800b36a:	9206      	str	r2, [sp, #24]
 800b36c:	bf54      	ite	pl
 800b36e:	9300      	strpl	r3, [sp, #0]
 800b370:	9306      	strmi	r3, [sp, #24]
 800b372:	2f00      	cmp	r7, #0
 800b374:	db39      	blt.n	800b3ea <_dtoa_r+0x21a>
 800b376:	9b06      	ldr	r3, [sp, #24]
 800b378:	970d      	str	r7, [sp, #52]	@ 0x34
 800b37a:	443b      	add	r3, r7
 800b37c:	9306      	str	r3, [sp, #24]
 800b37e:	2300      	movs	r3, #0
 800b380:	9308      	str	r3, [sp, #32]
 800b382:	9b07      	ldr	r3, [sp, #28]
 800b384:	2b09      	cmp	r3, #9
 800b386:	d863      	bhi.n	800b450 <_dtoa_r+0x280>
 800b388:	2b05      	cmp	r3, #5
 800b38a:	bfc4      	itt	gt
 800b38c:	3b04      	subgt	r3, #4
 800b38e:	9307      	strgt	r3, [sp, #28]
 800b390:	9b07      	ldr	r3, [sp, #28]
 800b392:	f1a3 0302 	sub.w	r3, r3, #2
 800b396:	bfcc      	ite	gt
 800b398:	2400      	movgt	r4, #0
 800b39a:	2401      	movle	r4, #1
 800b39c:	2b03      	cmp	r3, #3
 800b39e:	d863      	bhi.n	800b468 <_dtoa_r+0x298>
 800b3a0:	e8df f003 	tbb	[pc, r3]
 800b3a4:	2b375452 	.word	0x2b375452
 800b3a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b3ac:	441e      	add	r6, r3
 800b3ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3b2:	2b20      	cmp	r3, #32
 800b3b4:	bfc1      	itttt	gt
 800b3b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3ba:	409f      	lslgt	r7, r3
 800b3bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3c4:	bfd6      	itet	le
 800b3c6:	f1c3 0320 	rsble	r3, r3, #32
 800b3ca:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3ce:	fa04 f003 	lslle.w	r0, r4, r3
 800b3d2:	f7f5 f897 	bl	8000504 <__aeabi_ui2d>
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3dc:	3e01      	subs	r6, #1
 800b3de:	9212      	str	r2, [sp, #72]	@ 0x48
 800b3e0:	e776      	b.n	800b2d0 <_dtoa_r+0x100>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e7b7      	b.n	800b356 <_dtoa_r+0x186>
 800b3e6:	9010      	str	r0, [sp, #64]	@ 0x40
 800b3e8:	e7b6      	b.n	800b358 <_dtoa_r+0x188>
 800b3ea:	9b00      	ldr	r3, [sp, #0]
 800b3ec:	1bdb      	subs	r3, r3, r7
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	427b      	negs	r3, r7
 800b3f2:	9308      	str	r3, [sp, #32]
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b3f8:	e7c3      	b.n	800b382 <_dtoa_r+0x1b2>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b400:	eb07 0b03 	add.w	fp, r7, r3
 800b404:	f10b 0301 	add.w	r3, fp, #1
 800b408:	2b01      	cmp	r3, #1
 800b40a:	9303      	str	r3, [sp, #12]
 800b40c:	bfb8      	it	lt
 800b40e:	2301      	movlt	r3, #1
 800b410:	e006      	b.n	800b420 <_dtoa_r+0x250>
 800b412:	2301      	movs	r3, #1
 800b414:	9309      	str	r3, [sp, #36]	@ 0x24
 800b416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dd28      	ble.n	800b46e <_dtoa_r+0x29e>
 800b41c:	469b      	mov	fp, r3
 800b41e:	9303      	str	r3, [sp, #12]
 800b420:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b424:	2100      	movs	r1, #0
 800b426:	2204      	movs	r2, #4
 800b428:	f102 0514 	add.w	r5, r2, #20
 800b42c:	429d      	cmp	r5, r3
 800b42e:	d926      	bls.n	800b47e <_dtoa_r+0x2ae>
 800b430:	6041      	str	r1, [r0, #4]
 800b432:	4648      	mov	r0, r9
 800b434:	f000 fd9c 	bl	800bf70 <_Balloc>
 800b438:	4682      	mov	sl, r0
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d142      	bne.n	800b4c4 <_dtoa_r+0x2f4>
 800b43e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4b8 <_dtoa_r+0x2e8>)
 800b440:	4602      	mov	r2, r0
 800b442:	f240 11af 	movw	r1, #431	@ 0x1af
 800b446:	e6da      	b.n	800b1fe <_dtoa_r+0x2e>
 800b448:	2300      	movs	r3, #0
 800b44a:	e7e3      	b.n	800b414 <_dtoa_r+0x244>
 800b44c:	2300      	movs	r3, #0
 800b44e:	e7d5      	b.n	800b3fc <_dtoa_r+0x22c>
 800b450:	2401      	movs	r4, #1
 800b452:	2300      	movs	r3, #0
 800b454:	9307      	str	r3, [sp, #28]
 800b456:	9409      	str	r4, [sp, #36]	@ 0x24
 800b458:	f04f 3bff 	mov.w	fp, #4294967295
 800b45c:	2200      	movs	r2, #0
 800b45e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b462:	2312      	movs	r3, #18
 800b464:	920c      	str	r2, [sp, #48]	@ 0x30
 800b466:	e7db      	b.n	800b420 <_dtoa_r+0x250>
 800b468:	2301      	movs	r3, #1
 800b46a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b46c:	e7f4      	b.n	800b458 <_dtoa_r+0x288>
 800b46e:	f04f 0b01 	mov.w	fp, #1
 800b472:	f8cd b00c 	str.w	fp, [sp, #12]
 800b476:	465b      	mov	r3, fp
 800b478:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b47c:	e7d0      	b.n	800b420 <_dtoa_r+0x250>
 800b47e:	3101      	adds	r1, #1
 800b480:	0052      	lsls	r2, r2, #1
 800b482:	e7d1      	b.n	800b428 <_dtoa_r+0x258>
 800b484:	f3af 8000 	nop.w
 800b488:	636f4361 	.word	0x636f4361
 800b48c:	3fd287a7 	.word	0x3fd287a7
 800b490:	8b60c8b3 	.word	0x8b60c8b3
 800b494:	3fc68a28 	.word	0x3fc68a28
 800b498:	509f79fb 	.word	0x509f79fb
 800b49c:	3fd34413 	.word	0x3fd34413
 800b4a0:	0800eb52 	.word	0x0800eb52
 800b4a4:	0800eb69 	.word	0x0800eb69
 800b4a8:	7ff00000 	.word	0x7ff00000
 800b4ac:	0800eb1d 	.word	0x0800eb1d
 800b4b0:	3ff80000 	.word	0x3ff80000
 800b4b4:	0800ed18 	.word	0x0800ed18
 800b4b8:	0800ebc1 	.word	0x0800ebc1
 800b4bc:	0800eb4e 	.word	0x0800eb4e
 800b4c0:	0800eb1c 	.word	0x0800eb1c
 800b4c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4c8:	6018      	str	r0, [r3, #0]
 800b4ca:	9b03      	ldr	r3, [sp, #12]
 800b4cc:	2b0e      	cmp	r3, #14
 800b4ce:	f200 80a1 	bhi.w	800b614 <_dtoa_r+0x444>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	f000 809e 	beq.w	800b614 <_dtoa_r+0x444>
 800b4d8:	2f00      	cmp	r7, #0
 800b4da:	dd33      	ble.n	800b544 <_dtoa_r+0x374>
 800b4dc:	4b9c      	ldr	r3, [pc, #624]	@ (800b750 <_dtoa_r+0x580>)
 800b4de:	f007 020f 	and.w	r2, r7, #15
 800b4e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4e6:	ed93 7b00 	vldr	d7, [r3]
 800b4ea:	05f8      	lsls	r0, r7, #23
 800b4ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b4f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4f4:	d516      	bpl.n	800b524 <_dtoa_r+0x354>
 800b4f6:	4b97      	ldr	r3, [pc, #604]	@ (800b754 <_dtoa_r+0x584>)
 800b4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b4fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b500:	f7f5 f9a4 	bl	800084c <__aeabi_ddiv>
 800b504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b508:	f004 040f 	and.w	r4, r4, #15
 800b50c:	2603      	movs	r6, #3
 800b50e:	4d91      	ldr	r5, [pc, #580]	@ (800b754 <_dtoa_r+0x584>)
 800b510:	b954      	cbnz	r4, 800b528 <_dtoa_r+0x358>
 800b512:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b51a:	f7f5 f997 	bl	800084c <__aeabi_ddiv>
 800b51e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b522:	e028      	b.n	800b576 <_dtoa_r+0x3a6>
 800b524:	2602      	movs	r6, #2
 800b526:	e7f2      	b.n	800b50e <_dtoa_r+0x33e>
 800b528:	07e1      	lsls	r1, r4, #31
 800b52a:	d508      	bpl.n	800b53e <_dtoa_r+0x36e>
 800b52c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b530:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b534:	f7f5 f860 	bl	80005f8 <__aeabi_dmul>
 800b538:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b53c:	3601      	adds	r6, #1
 800b53e:	1064      	asrs	r4, r4, #1
 800b540:	3508      	adds	r5, #8
 800b542:	e7e5      	b.n	800b510 <_dtoa_r+0x340>
 800b544:	f000 80af 	beq.w	800b6a6 <_dtoa_r+0x4d6>
 800b548:	427c      	negs	r4, r7
 800b54a:	4b81      	ldr	r3, [pc, #516]	@ (800b750 <_dtoa_r+0x580>)
 800b54c:	4d81      	ldr	r5, [pc, #516]	@ (800b754 <_dtoa_r+0x584>)
 800b54e:	f004 020f 	and.w	r2, r4, #15
 800b552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b55e:	f7f5 f84b 	bl	80005f8 <__aeabi_dmul>
 800b562:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b566:	1124      	asrs	r4, r4, #4
 800b568:	2300      	movs	r3, #0
 800b56a:	2602      	movs	r6, #2
 800b56c:	2c00      	cmp	r4, #0
 800b56e:	f040 808f 	bne.w	800b690 <_dtoa_r+0x4c0>
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1d3      	bne.n	800b51e <_dtoa_r+0x34e>
 800b576:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b578:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 8094 	beq.w	800b6aa <_dtoa_r+0x4da>
 800b582:	4b75      	ldr	r3, [pc, #468]	@ (800b758 <_dtoa_r+0x588>)
 800b584:	2200      	movs	r2, #0
 800b586:	4620      	mov	r0, r4
 800b588:	4629      	mov	r1, r5
 800b58a:	f7f5 faa7 	bl	8000adc <__aeabi_dcmplt>
 800b58e:	2800      	cmp	r0, #0
 800b590:	f000 808b 	beq.w	800b6aa <_dtoa_r+0x4da>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 8087 	beq.w	800b6aa <_dtoa_r+0x4da>
 800b59c:	f1bb 0f00 	cmp.w	fp, #0
 800b5a0:	dd34      	ble.n	800b60c <_dtoa_r+0x43c>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4b6d      	ldr	r3, [pc, #436]	@ (800b75c <_dtoa_r+0x58c>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	4629      	mov	r1, r5
 800b5aa:	f7f5 f825 	bl	80005f8 <__aeabi_dmul>
 800b5ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5b2:	f107 38ff 	add.w	r8, r7, #4294967295
 800b5b6:	3601      	adds	r6, #1
 800b5b8:	465c      	mov	r4, fp
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	f7f4 ffb2 	bl	8000524 <__aeabi_i2d>
 800b5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5c4:	f7f5 f818 	bl	80005f8 <__aeabi_dmul>
 800b5c8:	4b65      	ldr	r3, [pc, #404]	@ (800b760 <_dtoa_r+0x590>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f7f4 fe5e 	bl	800028c <__adddf3>
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5d6:	2c00      	cmp	r4, #0
 800b5d8:	d16a      	bne.n	800b6b0 <_dtoa_r+0x4e0>
 800b5da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5de:	4b61      	ldr	r3, [pc, #388]	@ (800b764 <_dtoa_r+0x594>)
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	f7f4 fe51 	bl	8000288 <__aeabi_dsub>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4633      	mov	r3, r6
 800b5f2:	f7f5 fa91 	bl	8000b18 <__aeabi_dcmpgt>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f040 8298 	bne.w	800bb2c <_dtoa_r+0x95c>
 800b5fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b600:	462a      	mov	r2, r5
 800b602:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b606:	f7f5 fa69 	bl	8000adc <__aeabi_dcmplt>
 800b60a:	bb38      	cbnz	r0, 800b65c <_dtoa_r+0x48c>
 800b60c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b610:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b614:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b616:	2b00      	cmp	r3, #0
 800b618:	f2c0 8157 	blt.w	800b8ca <_dtoa_r+0x6fa>
 800b61c:	2f0e      	cmp	r7, #14
 800b61e:	f300 8154 	bgt.w	800b8ca <_dtoa_r+0x6fa>
 800b622:	4b4b      	ldr	r3, [pc, #300]	@ (800b750 <_dtoa_r+0x580>)
 800b624:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b628:	ed93 7b00 	vldr	d7, [r3]
 800b62c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b62e:	2b00      	cmp	r3, #0
 800b630:	ed8d 7b00 	vstr	d7, [sp]
 800b634:	f280 80e5 	bge.w	800b802 <_dtoa_r+0x632>
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f300 80e1 	bgt.w	800b802 <_dtoa_r+0x632>
 800b640:	d10c      	bne.n	800b65c <_dtoa_r+0x48c>
 800b642:	4b48      	ldr	r3, [pc, #288]	@ (800b764 <_dtoa_r+0x594>)
 800b644:	2200      	movs	r2, #0
 800b646:	ec51 0b17 	vmov	r0, r1, d7
 800b64a:	f7f4 ffd5 	bl	80005f8 <__aeabi_dmul>
 800b64e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b652:	f7f5 fa57 	bl	8000b04 <__aeabi_dcmpge>
 800b656:	2800      	cmp	r0, #0
 800b658:	f000 8266 	beq.w	800bb28 <_dtoa_r+0x958>
 800b65c:	2400      	movs	r4, #0
 800b65e:	4625      	mov	r5, r4
 800b660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b662:	4656      	mov	r6, sl
 800b664:	ea6f 0803 	mvn.w	r8, r3
 800b668:	2700      	movs	r7, #0
 800b66a:	4621      	mov	r1, r4
 800b66c:	4648      	mov	r0, r9
 800b66e:	f000 fcbf 	bl	800bff0 <_Bfree>
 800b672:	2d00      	cmp	r5, #0
 800b674:	f000 80bd 	beq.w	800b7f2 <_dtoa_r+0x622>
 800b678:	b12f      	cbz	r7, 800b686 <_dtoa_r+0x4b6>
 800b67a:	42af      	cmp	r7, r5
 800b67c:	d003      	beq.n	800b686 <_dtoa_r+0x4b6>
 800b67e:	4639      	mov	r1, r7
 800b680:	4648      	mov	r0, r9
 800b682:	f000 fcb5 	bl	800bff0 <_Bfree>
 800b686:	4629      	mov	r1, r5
 800b688:	4648      	mov	r0, r9
 800b68a:	f000 fcb1 	bl	800bff0 <_Bfree>
 800b68e:	e0b0      	b.n	800b7f2 <_dtoa_r+0x622>
 800b690:	07e2      	lsls	r2, r4, #31
 800b692:	d505      	bpl.n	800b6a0 <_dtoa_r+0x4d0>
 800b694:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	3601      	adds	r6, #1
 800b69e:	2301      	movs	r3, #1
 800b6a0:	1064      	asrs	r4, r4, #1
 800b6a2:	3508      	adds	r5, #8
 800b6a4:	e762      	b.n	800b56c <_dtoa_r+0x39c>
 800b6a6:	2602      	movs	r6, #2
 800b6a8:	e765      	b.n	800b576 <_dtoa_r+0x3a6>
 800b6aa:	9c03      	ldr	r4, [sp, #12]
 800b6ac:	46b8      	mov	r8, r7
 800b6ae:	e784      	b.n	800b5ba <_dtoa_r+0x3ea>
 800b6b0:	4b27      	ldr	r3, [pc, #156]	@ (800b750 <_dtoa_r+0x580>)
 800b6b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6bc:	4454      	add	r4, sl
 800b6be:	2900      	cmp	r1, #0
 800b6c0:	d054      	beq.n	800b76c <_dtoa_r+0x59c>
 800b6c2:	4929      	ldr	r1, [pc, #164]	@ (800b768 <_dtoa_r+0x598>)
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f7f5 f8c1 	bl	800084c <__aeabi_ddiv>
 800b6ca:	4633      	mov	r3, r6
 800b6cc:	462a      	mov	r2, r5
 800b6ce:	f7f4 fddb 	bl	8000288 <__aeabi_dsub>
 800b6d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b6d6:	4656      	mov	r6, sl
 800b6d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6dc:	f7f5 fa3c 	bl	8000b58 <__aeabi_d2iz>
 800b6e0:	4605      	mov	r5, r0
 800b6e2:	f7f4 ff1f 	bl	8000524 <__aeabi_i2d>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6ee:	f7f4 fdcb 	bl	8000288 <__aeabi_dsub>
 800b6f2:	3530      	adds	r5, #48	@ 0x30
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b6fc:	f806 5b01 	strb.w	r5, [r6], #1
 800b700:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b704:	f7f5 f9ea 	bl	8000adc <__aeabi_dcmplt>
 800b708:	2800      	cmp	r0, #0
 800b70a:	d172      	bne.n	800b7f2 <_dtoa_r+0x622>
 800b70c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b710:	4911      	ldr	r1, [pc, #68]	@ (800b758 <_dtoa_r+0x588>)
 800b712:	2000      	movs	r0, #0
 800b714:	f7f4 fdb8 	bl	8000288 <__aeabi_dsub>
 800b718:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b71c:	f7f5 f9de 	bl	8000adc <__aeabi_dcmplt>
 800b720:	2800      	cmp	r0, #0
 800b722:	f040 80b4 	bne.w	800b88e <_dtoa_r+0x6be>
 800b726:	42a6      	cmp	r6, r4
 800b728:	f43f af70 	beq.w	800b60c <_dtoa_r+0x43c>
 800b72c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b730:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <_dtoa_r+0x58c>)
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 ff60 	bl	80005f8 <__aeabi_dmul>
 800b738:	4b08      	ldr	r3, [pc, #32]	@ (800b75c <_dtoa_r+0x58c>)
 800b73a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b73e:	2200      	movs	r2, #0
 800b740:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b744:	f7f4 ff58 	bl	80005f8 <__aeabi_dmul>
 800b748:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b74c:	e7c4      	b.n	800b6d8 <_dtoa_r+0x508>
 800b74e:	bf00      	nop
 800b750:	0800ed18 	.word	0x0800ed18
 800b754:	0800ecf0 	.word	0x0800ecf0
 800b758:	3ff00000 	.word	0x3ff00000
 800b75c:	40240000 	.word	0x40240000
 800b760:	401c0000 	.word	0x401c0000
 800b764:	40140000 	.word	0x40140000
 800b768:	3fe00000 	.word	0x3fe00000
 800b76c:	4631      	mov	r1, r6
 800b76e:	4628      	mov	r0, r5
 800b770:	f7f4 ff42 	bl	80005f8 <__aeabi_dmul>
 800b774:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b778:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b77a:	4656      	mov	r6, sl
 800b77c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b780:	f7f5 f9ea 	bl	8000b58 <__aeabi_d2iz>
 800b784:	4605      	mov	r5, r0
 800b786:	f7f4 fecd 	bl	8000524 <__aeabi_i2d>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b792:	f7f4 fd79 	bl	8000288 <__aeabi_dsub>
 800b796:	3530      	adds	r5, #48	@ 0x30
 800b798:	f806 5b01 	strb.w	r5, [r6], #1
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	42a6      	cmp	r6, r4
 800b7a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7a6:	f04f 0200 	mov.w	r2, #0
 800b7aa:	d124      	bne.n	800b7f6 <_dtoa_r+0x626>
 800b7ac:	4baf      	ldr	r3, [pc, #700]	@ (800ba6c <_dtoa_r+0x89c>)
 800b7ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7b2:	f7f4 fd6b 	bl	800028c <__adddf3>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7be:	f7f5 f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	d163      	bne.n	800b88e <_dtoa_r+0x6be>
 800b7c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7ca:	49a8      	ldr	r1, [pc, #672]	@ (800ba6c <_dtoa_r+0x89c>)
 800b7cc:	2000      	movs	r0, #0
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7da:	f7f5 f97f 	bl	8000adc <__aeabi_dcmplt>
 800b7de:	2800      	cmp	r0, #0
 800b7e0:	f43f af14 	beq.w	800b60c <_dtoa_r+0x43c>
 800b7e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b7e6:	1e73      	subs	r3, r6, #1
 800b7e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b7ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7ee:	2b30      	cmp	r3, #48	@ 0x30
 800b7f0:	d0f8      	beq.n	800b7e4 <_dtoa_r+0x614>
 800b7f2:	4647      	mov	r7, r8
 800b7f4:	e03b      	b.n	800b86e <_dtoa_r+0x69e>
 800b7f6:	4b9e      	ldr	r3, [pc, #632]	@ (800ba70 <_dtoa_r+0x8a0>)
 800b7f8:	f7f4 fefe 	bl	80005f8 <__aeabi_dmul>
 800b7fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b800:	e7bc      	b.n	800b77c <_dtoa_r+0x5ac>
 800b802:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b806:	4656      	mov	r6, sl
 800b808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b80c:	4620      	mov	r0, r4
 800b80e:	4629      	mov	r1, r5
 800b810:	f7f5 f81c 	bl	800084c <__aeabi_ddiv>
 800b814:	f7f5 f9a0 	bl	8000b58 <__aeabi_d2iz>
 800b818:	4680      	mov	r8, r0
 800b81a:	f7f4 fe83 	bl	8000524 <__aeabi_i2d>
 800b81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b822:	f7f4 fee9 	bl	80005f8 <__aeabi_dmul>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b832:	f7f4 fd29 	bl	8000288 <__aeabi_dsub>
 800b836:	f806 4b01 	strb.w	r4, [r6], #1
 800b83a:	9d03      	ldr	r5, [sp, #12]
 800b83c:	eba6 040a 	sub.w	r4, r6, sl
 800b840:	42a5      	cmp	r5, r4
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	d133      	bne.n	800b8b0 <_dtoa_r+0x6e0>
 800b848:	f7f4 fd20 	bl	800028c <__adddf3>
 800b84c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b850:	4604      	mov	r4, r0
 800b852:	460d      	mov	r5, r1
 800b854:	f7f5 f960 	bl	8000b18 <__aeabi_dcmpgt>
 800b858:	b9c0      	cbnz	r0, 800b88c <_dtoa_r+0x6bc>
 800b85a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b85e:	4620      	mov	r0, r4
 800b860:	4629      	mov	r1, r5
 800b862:	f7f5 f931 	bl	8000ac8 <__aeabi_dcmpeq>
 800b866:	b110      	cbz	r0, 800b86e <_dtoa_r+0x69e>
 800b868:	f018 0f01 	tst.w	r8, #1
 800b86c:	d10e      	bne.n	800b88c <_dtoa_r+0x6bc>
 800b86e:	9902      	ldr	r1, [sp, #8]
 800b870:	4648      	mov	r0, r9
 800b872:	f000 fbbd 	bl	800bff0 <_Bfree>
 800b876:	2300      	movs	r3, #0
 800b878:	7033      	strb	r3, [r6, #0]
 800b87a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b87c:	3701      	adds	r7, #1
 800b87e:	601f      	str	r7, [r3, #0]
 800b880:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 824b 	beq.w	800bd1e <_dtoa_r+0xb4e>
 800b888:	601e      	str	r6, [r3, #0]
 800b88a:	e248      	b.n	800bd1e <_dtoa_r+0xb4e>
 800b88c:	46b8      	mov	r8, r7
 800b88e:	4633      	mov	r3, r6
 800b890:	461e      	mov	r6, r3
 800b892:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b896:	2a39      	cmp	r2, #57	@ 0x39
 800b898:	d106      	bne.n	800b8a8 <_dtoa_r+0x6d8>
 800b89a:	459a      	cmp	sl, r3
 800b89c:	d1f8      	bne.n	800b890 <_dtoa_r+0x6c0>
 800b89e:	2230      	movs	r2, #48	@ 0x30
 800b8a0:	f108 0801 	add.w	r8, r8, #1
 800b8a4:	f88a 2000 	strb.w	r2, [sl]
 800b8a8:	781a      	ldrb	r2, [r3, #0]
 800b8aa:	3201      	adds	r2, #1
 800b8ac:	701a      	strb	r2, [r3, #0]
 800b8ae:	e7a0      	b.n	800b7f2 <_dtoa_r+0x622>
 800b8b0:	4b6f      	ldr	r3, [pc, #444]	@ (800ba70 <_dtoa_r+0x8a0>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 fea0 	bl	80005f8 <__aeabi_dmul>
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4604      	mov	r4, r0
 800b8be:	460d      	mov	r5, r1
 800b8c0:	f7f5 f902 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d09f      	beq.n	800b808 <_dtoa_r+0x638>
 800b8c8:	e7d1      	b.n	800b86e <_dtoa_r+0x69e>
 800b8ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8cc:	2a00      	cmp	r2, #0
 800b8ce:	f000 80ea 	beq.w	800baa6 <_dtoa_r+0x8d6>
 800b8d2:	9a07      	ldr	r2, [sp, #28]
 800b8d4:	2a01      	cmp	r2, #1
 800b8d6:	f300 80cd 	bgt.w	800ba74 <_dtoa_r+0x8a4>
 800b8da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b8dc:	2a00      	cmp	r2, #0
 800b8de:	f000 80c1 	beq.w	800ba64 <_dtoa_r+0x894>
 800b8e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8e6:	9c08      	ldr	r4, [sp, #32]
 800b8e8:	9e00      	ldr	r6, [sp, #0]
 800b8ea:	9a00      	ldr	r2, [sp, #0]
 800b8ec:	441a      	add	r2, r3
 800b8ee:	9200      	str	r2, [sp, #0]
 800b8f0:	9a06      	ldr	r2, [sp, #24]
 800b8f2:	2101      	movs	r1, #1
 800b8f4:	441a      	add	r2, r3
 800b8f6:	4648      	mov	r0, r9
 800b8f8:	9206      	str	r2, [sp, #24]
 800b8fa:	f000 fc77 	bl	800c1ec <__i2b>
 800b8fe:	4605      	mov	r5, r0
 800b900:	b166      	cbz	r6, 800b91c <_dtoa_r+0x74c>
 800b902:	9b06      	ldr	r3, [sp, #24]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd09      	ble.n	800b91c <_dtoa_r+0x74c>
 800b908:	42b3      	cmp	r3, r6
 800b90a:	9a00      	ldr	r2, [sp, #0]
 800b90c:	bfa8      	it	ge
 800b90e:	4633      	movge	r3, r6
 800b910:	1ad2      	subs	r2, r2, r3
 800b912:	9200      	str	r2, [sp, #0]
 800b914:	9a06      	ldr	r2, [sp, #24]
 800b916:	1af6      	subs	r6, r6, r3
 800b918:	1ad3      	subs	r3, r2, r3
 800b91a:	9306      	str	r3, [sp, #24]
 800b91c:	9b08      	ldr	r3, [sp, #32]
 800b91e:	b30b      	cbz	r3, 800b964 <_dtoa_r+0x794>
 800b920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 80c6 	beq.w	800bab4 <_dtoa_r+0x8e4>
 800b928:	2c00      	cmp	r4, #0
 800b92a:	f000 80c0 	beq.w	800baae <_dtoa_r+0x8de>
 800b92e:	4629      	mov	r1, r5
 800b930:	4622      	mov	r2, r4
 800b932:	4648      	mov	r0, r9
 800b934:	f000 fd12 	bl	800c35c <__pow5mult>
 800b938:	9a02      	ldr	r2, [sp, #8]
 800b93a:	4601      	mov	r1, r0
 800b93c:	4605      	mov	r5, r0
 800b93e:	4648      	mov	r0, r9
 800b940:	f000 fc6a 	bl	800c218 <__multiply>
 800b944:	9902      	ldr	r1, [sp, #8]
 800b946:	4680      	mov	r8, r0
 800b948:	4648      	mov	r0, r9
 800b94a:	f000 fb51 	bl	800bff0 <_Bfree>
 800b94e:	9b08      	ldr	r3, [sp, #32]
 800b950:	1b1b      	subs	r3, r3, r4
 800b952:	9308      	str	r3, [sp, #32]
 800b954:	f000 80b1 	beq.w	800baba <_dtoa_r+0x8ea>
 800b958:	9a08      	ldr	r2, [sp, #32]
 800b95a:	4641      	mov	r1, r8
 800b95c:	4648      	mov	r0, r9
 800b95e:	f000 fcfd 	bl	800c35c <__pow5mult>
 800b962:	9002      	str	r0, [sp, #8]
 800b964:	2101      	movs	r1, #1
 800b966:	4648      	mov	r0, r9
 800b968:	f000 fc40 	bl	800c1ec <__i2b>
 800b96c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b96e:	4604      	mov	r4, r0
 800b970:	2b00      	cmp	r3, #0
 800b972:	f000 81d8 	beq.w	800bd26 <_dtoa_r+0xb56>
 800b976:	461a      	mov	r2, r3
 800b978:	4601      	mov	r1, r0
 800b97a:	4648      	mov	r0, r9
 800b97c:	f000 fcee 	bl	800c35c <__pow5mult>
 800b980:	9b07      	ldr	r3, [sp, #28]
 800b982:	2b01      	cmp	r3, #1
 800b984:	4604      	mov	r4, r0
 800b986:	f300 809f 	bgt.w	800bac8 <_dtoa_r+0x8f8>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f040 8097 	bne.w	800bac0 <_dtoa_r+0x8f0>
 800b992:	9b05      	ldr	r3, [sp, #20]
 800b994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 8093 	bne.w	800bac4 <_dtoa_r+0x8f4>
 800b99e:	9b05      	ldr	r3, [sp, #20]
 800b9a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9a4:	0d1b      	lsrs	r3, r3, #20
 800b9a6:	051b      	lsls	r3, r3, #20
 800b9a8:	b133      	cbz	r3, 800b9b8 <_dtoa_r+0x7e8>
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	9b06      	ldr	r3, [sp, #24]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9306      	str	r3, [sp, #24]
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	9308      	str	r3, [sp, #32]
 800b9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 81b8 	beq.w	800bd32 <_dtoa_r+0xb62>
 800b9c2:	6923      	ldr	r3, [r4, #16]
 800b9c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9c8:	6918      	ldr	r0, [r3, #16]
 800b9ca:	f000 fbc3 	bl	800c154 <__hi0bits>
 800b9ce:	f1c0 0020 	rsb	r0, r0, #32
 800b9d2:	9b06      	ldr	r3, [sp, #24]
 800b9d4:	4418      	add	r0, r3
 800b9d6:	f010 001f 	ands.w	r0, r0, #31
 800b9da:	f000 8082 	beq.w	800bae2 <_dtoa_r+0x912>
 800b9de:	f1c0 0320 	rsb	r3, r0, #32
 800b9e2:	2b04      	cmp	r3, #4
 800b9e4:	dd73      	ble.n	800bace <_dtoa_r+0x8fe>
 800b9e6:	9b00      	ldr	r3, [sp, #0]
 800b9e8:	f1c0 001c 	rsb	r0, r0, #28
 800b9ec:	4403      	add	r3, r0
 800b9ee:	9300      	str	r3, [sp, #0]
 800b9f0:	9b06      	ldr	r3, [sp, #24]
 800b9f2:	4403      	add	r3, r0
 800b9f4:	4406      	add	r6, r0
 800b9f6:	9306      	str	r3, [sp, #24]
 800b9f8:	9b00      	ldr	r3, [sp, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	dd05      	ble.n	800ba0a <_dtoa_r+0x83a>
 800b9fe:	9902      	ldr	r1, [sp, #8]
 800ba00:	461a      	mov	r2, r3
 800ba02:	4648      	mov	r0, r9
 800ba04:	f000 fd04 	bl	800c410 <__lshift>
 800ba08:	9002      	str	r0, [sp, #8]
 800ba0a:	9b06      	ldr	r3, [sp, #24]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd05      	ble.n	800ba1c <_dtoa_r+0x84c>
 800ba10:	4621      	mov	r1, r4
 800ba12:	461a      	mov	r2, r3
 800ba14:	4648      	mov	r0, r9
 800ba16:	f000 fcfb 	bl	800c410 <__lshift>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d061      	beq.n	800bae6 <_dtoa_r+0x916>
 800ba22:	9802      	ldr	r0, [sp, #8]
 800ba24:	4621      	mov	r1, r4
 800ba26:	f000 fd5f 	bl	800c4e8 <__mcmp>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	da5b      	bge.n	800bae6 <_dtoa_r+0x916>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	9902      	ldr	r1, [sp, #8]
 800ba32:	220a      	movs	r2, #10
 800ba34:	4648      	mov	r0, r9
 800ba36:	f000 fafd 	bl	800c034 <__multadd>
 800ba3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba3c:	9002      	str	r0, [sp, #8]
 800ba3e:	f107 38ff 	add.w	r8, r7, #4294967295
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 8177 	beq.w	800bd36 <_dtoa_r+0xb66>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	4648      	mov	r0, r9
 800ba50:	f000 faf0 	bl	800c034 <__multadd>
 800ba54:	f1bb 0f00 	cmp.w	fp, #0
 800ba58:	4605      	mov	r5, r0
 800ba5a:	dc6f      	bgt.n	800bb3c <_dtoa_r+0x96c>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	dc49      	bgt.n	800baf6 <_dtoa_r+0x926>
 800ba62:	e06b      	b.n	800bb3c <_dtoa_r+0x96c>
 800ba64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba6a:	e73c      	b.n	800b8e6 <_dtoa_r+0x716>
 800ba6c:	3fe00000 	.word	0x3fe00000
 800ba70:	40240000 	.word	0x40240000
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	1e5c      	subs	r4, r3, #1
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	db09      	blt.n	800ba92 <_dtoa_r+0x8c2>
 800ba7e:	1b1c      	subs	r4, r3, r4
 800ba80:	9b03      	ldr	r3, [sp, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f6bf af30 	bge.w	800b8e8 <_dtoa_r+0x718>
 800ba88:	9b00      	ldr	r3, [sp, #0]
 800ba8a:	9a03      	ldr	r2, [sp, #12]
 800ba8c:	1a9e      	subs	r6, r3, r2
 800ba8e:	2300      	movs	r3, #0
 800ba90:	e72b      	b.n	800b8ea <_dtoa_r+0x71a>
 800ba92:	9b08      	ldr	r3, [sp, #32]
 800ba94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ba96:	9408      	str	r4, [sp, #32]
 800ba98:	1ae3      	subs	r3, r4, r3
 800ba9a:	441a      	add	r2, r3
 800ba9c:	9e00      	ldr	r6, [sp, #0]
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	920d      	str	r2, [sp, #52]	@ 0x34
 800baa2:	2400      	movs	r4, #0
 800baa4:	e721      	b.n	800b8ea <_dtoa_r+0x71a>
 800baa6:	9c08      	ldr	r4, [sp, #32]
 800baa8:	9e00      	ldr	r6, [sp, #0]
 800baaa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800baac:	e728      	b.n	800b900 <_dtoa_r+0x730>
 800baae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bab2:	e751      	b.n	800b958 <_dtoa_r+0x788>
 800bab4:	9a08      	ldr	r2, [sp, #32]
 800bab6:	9902      	ldr	r1, [sp, #8]
 800bab8:	e750      	b.n	800b95c <_dtoa_r+0x78c>
 800baba:	f8cd 8008 	str.w	r8, [sp, #8]
 800babe:	e751      	b.n	800b964 <_dtoa_r+0x794>
 800bac0:	2300      	movs	r3, #0
 800bac2:	e779      	b.n	800b9b8 <_dtoa_r+0x7e8>
 800bac4:	9b04      	ldr	r3, [sp, #16]
 800bac6:	e777      	b.n	800b9b8 <_dtoa_r+0x7e8>
 800bac8:	2300      	movs	r3, #0
 800baca:	9308      	str	r3, [sp, #32]
 800bacc:	e779      	b.n	800b9c2 <_dtoa_r+0x7f2>
 800bace:	d093      	beq.n	800b9f8 <_dtoa_r+0x828>
 800bad0:	9a00      	ldr	r2, [sp, #0]
 800bad2:	331c      	adds	r3, #28
 800bad4:	441a      	add	r2, r3
 800bad6:	9200      	str	r2, [sp, #0]
 800bad8:	9a06      	ldr	r2, [sp, #24]
 800bada:	441a      	add	r2, r3
 800badc:	441e      	add	r6, r3
 800bade:	9206      	str	r2, [sp, #24]
 800bae0:	e78a      	b.n	800b9f8 <_dtoa_r+0x828>
 800bae2:	4603      	mov	r3, r0
 800bae4:	e7f4      	b.n	800bad0 <_dtoa_r+0x900>
 800bae6:	9b03      	ldr	r3, [sp, #12]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	46b8      	mov	r8, r7
 800baec:	dc20      	bgt.n	800bb30 <_dtoa_r+0x960>
 800baee:	469b      	mov	fp, r3
 800baf0:	9b07      	ldr	r3, [sp, #28]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	dd1e      	ble.n	800bb34 <_dtoa_r+0x964>
 800baf6:	f1bb 0f00 	cmp.w	fp, #0
 800bafa:	f47f adb1 	bne.w	800b660 <_dtoa_r+0x490>
 800bafe:	4621      	mov	r1, r4
 800bb00:	465b      	mov	r3, fp
 800bb02:	2205      	movs	r2, #5
 800bb04:	4648      	mov	r0, r9
 800bb06:	f000 fa95 	bl	800c034 <__multadd>
 800bb0a:	4601      	mov	r1, r0
 800bb0c:	4604      	mov	r4, r0
 800bb0e:	9802      	ldr	r0, [sp, #8]
 800bb10:	f000 fcea 	bl	800c4e8 <__mcmp>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	f77f ada3 	ble.w	800b660 <_dtoa_r+0x490>
 800bb1a:	4656      	mov	r6, sl
 800bb1c:	2331      	movs	r3, #49	@ 0x31
 800bb1e:	f806 3b01 	strb.w	r3, [r6], #1
 800bb22:	f108 0801 	add.w	r8, r8, #1
 800bb26:	e59f      	b.n	800b668 <_dtoa_r+0x498>
 800bb28:	9c03      	ldr	r4, [sp, #12]
 800bb2a:	46b8      	mov	r8, r7
 800bb2c:	4625      	mov	r5, r4
 800bb2e:	e7f4      	b.n	800bb1a <_dtoa_r+0x94a>
 800bb30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	f000 8101 	beq.w	800bd3e <_dtoa_r+0xb6e>
 800bb3c:	2e00      	cmp	r6, #0
 800bb3e:	dd05      	ble.n	800bb4c <_dtoa_r+0x97c>
 800bb40:	4629      	mov	r1, r5
 800bb42:	4632      	mov	r2, r6
 800bb44:	4648      	mov	r0, r9
 800bb46:	f000 fc63 	bl	800c410 <__lshift>
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	9b08      	ldr	r3, [sp, #32]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d05c      	beq.n	800bc0c <_dtoa_r+0xa3c>
 800bb52:	6869      	ldr	r1, [r5, #4]
 800bb54:	4648      	mov	r0, r9
 800bb56:	f000 fa0b 	bl	800bf70 <_Balloc>
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	b928      	cbnz	r0, 800bb6a <_dtoa_r+0x99a>
 800bb5e:	4b82      	ldr	r3, [pc, #520]	@ (800bd68 <_dtoa_r+0xb98>)
 800bb60:	4602      	mov	r2, r0
 800bb62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb66:	f7ff bb4a 	b.w	800b1fe <_dtoa_r+0x2e>
 800bb6a:	692a      	ldr	r2, [r5, #16]
 800bb6c:	3202      	adds	r2, #2
 800bb6e:	0092      	lsls	r2, r2, #2
 800bb70:	f105 010c 	add.w	r1, r5, #12
 800bb74:	300c      	adds	r0, #12
 800bb76:	f7ff fa8e 	bl	800b096 <memcpy>
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4648      	mov	r0, r9
 800bb80:	f000 fc46 	bl	800c410 <__lshift>
 800bb84:	f10a 0301 	add.w	r3, sl, #1
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	eb0a 030b 	add.w	r3, sl, fp
 800bb8e:	9308      	str	r3, [sp, #32]
 800bb90:	9b04      	ldr	r3, [sp, #16]
 800bb92:	f003 0301 	and.w	r3, r3, #1
 800bb96:	462f      	mov	r7, r5
 800bb98:	9306      	str	r3, [sp, #24]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	9b00      	ldr	r3, [sp, #0]
 800bb9e:	9802      	ldr	r0, [sp, #8]
 800bba0:	4621      	mov	r1, r4
 800bba2:	f103 3bff 	add.w	fp, r3, #4294967295
 800bba6:	f7ff fa8b 	bl	800b0c0 <quorem>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	3330      	adds	r3, #48	@ 0x30
 800bbae:	9003      	str	r0, [sp, #12]
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	9802      	ldr	r0, [sp, #8]
 800bbb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbb6:	f000 fc97 	bl	800c4e8 <__mcmp>
 800bbba:	462a      	mov	r2, r5
 800bbbc:	9004      	str	r0, [sp, #16]
 800bbbe:	4621      	mov	r1, r4
 800bbc0:	4648      	mov	r0, r9
 800bbc2:	f000 fcad 	bl	800c520 <__mdiff>
 800bbc6:	68c2      	ldr	r2, [r0, #12]
 800bbc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbca:	4606      	mov	r6, r0
 800bbcc:	bb02      	cbnz	r2, 800bc10 <_dtoa_r+0xa40>
 800bbce:	4601      	mov	r1, r0
 800bbd0:	9802      	ldr	r0, [sp, #8]
 800bbd2:	f000 fc89 	bl	800c4e8 <__mcmp>
 800bbd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd8:	4602      	mov	r2, r0
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4648      	mov	r0, r9
 800bbde:	920c      	str	r2, [sp, #48]	@ 0x30
 800bbe0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe2:	f000 fa05 	bl	800bff0 <_Bfree>
 800bbe6:	9b07      	ldr	r3, [sp, #28]
 800bbe8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bbea:	9e00      	ldr	r6, [sp, #0]
 800bbec:	ea42 0103 	orr.w	r1, r2, r3
 800bbf0:	9b06      	ldr	r3, [sp, #24]
 800bbf2:	4319      	orrs	r1, r3
 800bbf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf6:	d10d      	bne.n	800bc14 <_dtoa_r+0xa44>
 800bbf8:	2b39      	cmp	r3, #57	@ 0x39
 800bbfa:	d027      	beq.n	800bc4c <_dtoa_r+0xa7c>
 800bbfc:	9a04      	ldr	r2, [sp, #16]
 800bbfe:	2a00      	cmp	r2, #0
 800bc00:	dd01      	ble.n	800bc06 <_dtoa_r+0xa36>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	3331      	adds	r3, #49	@ 0x31
 800bc06:	f88b 3000 	strb.w	r3, [fp]
 800bc0a:	e52e      	b.n	800b66a <_dtoa_r+0x49a>
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	e7b9      	b.n	800bb84 <_dtoa_r+0x9b4>
 800bc10:	2201      	movs	r2, #1
 800bc12:	e7e2      	b.n	800bbda <_dtoa_r+0xa0a>
 800bc14:	9904      	ldr	r1, [sp, #16]
 800bc16:	2900      	cmp	r1, #0
 800bc18:	db04      	blt.n	800bc24 <_dtoa_r+0xa54>
 800bc1a:	9807      	ldr	r0, [sp, #28]
 800bc1c:	4301      	orrs	r1, r0
 800bc1e:	9806      	ldr	r0, [sp, #24]
 800bc20:	4301      	orrs	r1, r0
 800bc22:	d120      	bne.n	800bc66 <_dtoa_r+0xa96>
 800bc24:	2a00      	cmp	r2, #0
 800bc26:	ddee      	ble.n	800bc06 <_dtoa_r+0xa36>
 800bc28:	9902      	ldr	r1, [sp, #8]
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	4648      	mov	r0, r9
 800bc30:	f000 fbee 	bl	800c410 <__lshift>
 800bc34:	4621      	mov	r1, r4
 800bc36:	9002      	str	r0, [sp, #8]
 800bc38:	f000 fc56 	bl	800c4e8 <__mcmp>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	9b00      	ldr	r3, [sp, #0]
 800bc40:	dc02      	bgt.n	800bc48 <_dtoa_r+0xa78>
 800bc42:	d1e0      	bne.n	800bc06 <_dtoa_r+0xa36>
 800bc44:	07da      	lsls	r2, r3, #31
 800bc46:	d5de      	bpl.n	800bc06 <_dtoa_r+0xa36>
 800bc48:	2b39      	cmp	r3, #57	@ 0x39
 800bc4a:	d1da      	bne.n	800bc02 <_dtoa_r+0xa32>
 800bc4c:	2339      	movs	r3, #57	@ 0x39
 800bc4e:	f88b 3000 	strb.w	r3, [fp]
 800bc52:	4633      	mov	r3, r6
 800bc54:	461e      	mov	r6, r3
 800bc56:	3b01      	subs	r3, #1
 800bc58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc5c:	2a39      	cmp	r2, #57	@ 0x39
 800bc5e:	d04e      	beq.n	800bcfe <_dtoa_r+0xb2e>
 800bc60:	3201      	adds	r2, #1
 800bc62:	701a      	strb	r2, [r3, #0]
 800bc64:	e501      	b.n	800b66a <_dtoa_r+0x49a>
 800bc66:	2a00      	cmp	r2, #0
 800bc68:	dd03      	ble.n	800bc72 <_dtoa_r+0xaa2>
 800bc6a:	2b39      	cmp	r3, #57	@ 0x39
 800bc6c:	d0ee      	beq.n	800bc4c <_dtoa_r+0xa7c>
 800bc6e:	3301      	adds	r3, #1
 800bc70:	e7c9      	b.n	800bc06 <_dtoa_r+0xa36>
 800bc72:	9a00      	ldr	r2, [sp, #0]
 800bc74:	9908      	ldr	r1, [sp, #32]
 800bc76:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bc7a:	428a      	cmp	r2, r1
 800bc7c:	d028      	beq.n	800bcd0 <_dtoa_r+0xb00>
 800bc7e:	9902      	ldr	r1, [sp, #8]
 800bc80:	2300      	movs	r3, #0
 800bc82:	220a      	movs	r2, #10
 800bc84:	4648      	mov	r0, r9
 800bc86:	f000 f9d5 	bl	800c034 <__multadd>
 800bc8a:	42af      	cmp	r7, r5
 800bc8c:	9002      	str	r0, [sp, #8]
 800bc8e:	f04f 0300 	mov.w	r3, #0
 800bc92:	f04f 020a 	mov.w	r2, #10
 800bc96:	4639      	mov	r1, r7
 800bc98:	4648      	mov	r0, r9
 800bc9a:	d107      	bne.n	800bcac <_dtoa_r+0xadc>
 800bc9c:	f000 f9ca 	bl	800c034 <__multadd>
 800bca0:	4607      	mov	r7, r0
 800bca2:	4605      	mov	r5, r0
 800bca4:	9b00      	ldr	r3, [sp, #0]
 800bca6:	3301      	adds	r3, #1
 800bca8:	9300      	str	r3, [sp, #0]
 800bcaa:	e777      	b.n	800bb9c <_dtoa_r+0x9cc>
 800bcac:	f000 f9c2 	bl	800c034 <__multadd>
 800bcb0:	4629      	mov	r1, r5
 800bcb2:	4607      	mov	r7, r0
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	220a      	movs	r2, #10
 800bcb8:	4648      	mov	r0, r9
 800bcba:	f000 f9bb 	bl	800c034 <__multadd>
 800bcbe:	4605      	mov	r5, r0
 800bcc0:	e7f0      	b.n	800bca4 <_dtoa_r+0xad4>
 800bcc2:	f1bb 0f00 	cmp.w	fp, #0
 800bcc6:	bfcc      	ite	gt
 800bcc8:	465e      	movgt	r6, fp
 800bcca:	2601      	movle	r6, #1
 800bccc:	4456      	add	r6, sl
 800bcce:	2700      	movs	r7, #0
 800bcd0:	9902      	ldr	r1, [sp, #8]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	4648      	mov	r0, r9
 800bcd8:	f000 fb9a 	bl	800c410 <__lshift>
 800bcdc:	4621      	mov	r1, r4
 800bcde:	9002      	str	r0, [sp, #8]
 800bce0:	f000 fc02 	bl	800c4e8 <__mcmp>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	dcb4      	bgt.n	800bc52 <_dtoa_r+0xa82>
 800bce8:	d102      	bne.n	800bcf0 <_dtoa_r+0xb20>
 800bcea:	9b00      	ldr	r3, [sp, #0]
 800bcec:	07db      	lsls	r3, r3, #31
 800bcee:	d4b0      	bmi.n	800bc52 <_dtoa_r+0xa82>
 800bcf0:	4633      	mov	r3, r6
 800bcf2:	461e      	mov	r6, r3
 800bcf4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcf8:	2a30      	cmp	r2, #48	@ 0x30
 800bcfa:	d0fa      	beq.n	800bcf2 <_dtoa_r+0xb22>
 800bcfc:	e4b5      	b.n	800b66a <_dtoa_r+0x49a>
 800bcfe:	459a      	cmp	sl, r3
 800bd00:	d1a8      	bne.n	800bc54 <_dtoa_r+0xa84>
 800bd02:	2331      	movs	r3, #49	@ 0x31
 800bd04:	f108 0801 	add.w	r8, r8, #1
 800bd08:	f88a 3000 	strb.w	r3, [sl]
 800bd0c:	e4ad      	b.n	800b66a <_dtoa_r+0x49a>
 800bd0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bd6c <_dtoa_r+0xb9c>
 800bd14:	b11b      	cbz	r3, 800bd1e <_dtoa_r+0xb4e>
 800bd16:	f10a 0308 	add.w	r3, sl, #8
 800bd1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd1c:	6013      	str	r3, [r2, #0]
 800bd1e:	4650      	mov	r0, sl
 800bd20:	b017      	add	sp, #92	@ 0x5c
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	9b07      	ldr	r3, [sp, #28]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	f77f ae2e 	ble.w	800b98a <_dtoa_r+0x7ba>
 800bd2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd30:	9308      	str	r3, [sp, #32]
 800bd32:	2001      	movs	r0, #1
 800bd34:	e64d      	b.n	800b9d2 <_dtoa_r+0x802>
 800bd36:	f1bb 0f00 	cmp.w	fp, #0
 800bd3a:	f77f aed9 	ble.w	800baf0 <_dtoa_r+0x920>
 800bd3e:	4656      	mov	r6, sl
 800bd40:	9802      	ldr	r0, [sp, #8]
 800bd42:	4621      	mov	r1, r4
 800bd44:	f7ff f9bc 	bl	800b0c0 <quorem>
 800bd48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bd4c:	f806 3b01 	strb.w	r3, [r6], #1
 800bd50:	eba6 020a 	sub.w	r2, r6, sl
 800bd54:	4593      	cmp	fp, r2
 800bd56:	ddb4      	ble.n	800bcc2 <_dtoa_r+0xaf2>
 800bd58:	9902      	ldr	r1, [sp, #8]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	220a      	movs	r2, #10
 800bd5e:	4648      	mov	r0, r9
 800bd60:	f000 f968 	bl	800c034 <__multadd>
 800bd64:	9002      	str	r0, [sp, #8]
 800bd66:	e7eb      	b.n	800bd40 <_dtoa_r+0xb70>
 800bd68:	0800ebc1 	.word	0x0800ebc1
 800bd6c:	0800eb45 	.word	0x0800eb45

0800bd70 <_free_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4605      	mov	r5, r0
 800bd74:	2900      	cmp	r1, #0
 800bd76:	d041      	beq.n	800bdfc <_free_r+0x8c>
 800bd78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd7c:	1f0c      	subs	r4, r1, #4
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	bfb8      	it	lt
 800bd82:	18e4      	addlt	r4, r4, r3
 800bd84:	f000 f8e8 	bl	800bf58 <__malloc_lock>
 800bd88:	4a1d      	ldr	r2, [pc, #116]	@ (800be00 <_free_r+0x90>)
 800bd8a:	6813      	ldr	r3, [r2, #0]
 800bd8c:	b933      	cbnz	r3, 800bd9c <_free_r+0x2c>
 800bd8e:	6063      	str	r3, [r4, #4]
 800bd90:	6014      	str	r4, [r2, #0]
 800bd92:	4628      	mov	r0, r5
 800bd94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd98:	f000 b8e4 	b.w	800bf64 <__malloc_unlock>
 800bd9c:	42a3      	cmp	r3, r4
 800bd9e:	d908      	bls.n	800bdb2 <_free_r+0x42>
 800bda0:	6820      	ldr	r0, [r4, #0]
 800bda2:	1821      	adds	r1, r4, r0
 800bda4:	428b      	cmp	r3, r1
 800bda6:	bf01      	itttt	eq
 800bda8:	6819      	ldreq	r1, [r3, #0]
 800bdaa:	685b      	ldreq	r3, [r3, #4]
 800bdac:	1809      	addeq	r1, r1, r0
 800bdae:	6021      	streq	r1, [r4, #0]
 800bdb0:	e7ed      	b.n	800bd8e <_free_r+0x1e>
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	b10b      	cbz	r3, 800bdbc <_free_r+0x4c>
 800bdb8:	42a3      	cmp	r3, r4
 800bdba:	d9fa      	bls.n	800bdb2 <_free_r+0x42>
 800bdbc:	6811      	ldr	r1, [r2, #0]
 800bdbe:	1850      	adds	r0, r2, r1
 800bdc0:	42a0      	cmp	r0, r4
 800bdc2:	d10b      	bne.n	800bddc <_free_r+0x6c>
 800bdc4:	6820      	ldr	r0, [r4, #0]
 800bdc6:	4401      	add	r1, r0
 800bdc8:	1850      	adds	r0, r2, r1
 800bdca:	4283      	cmp	r3, r0
 800bdcc:	6011      	str	r1, [r2, #0]
 800bdce:	d1e0      	bne.n	800bd92 <_free_r+0x22>
 800bdd0:	6818      	ldr	r0, [r3, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	6053      	str	r3, [r2, #4]
 800bdd6:	4408      	add	r0, r1
 800bdd8:	6010      	str	r0, [r2, #0]
 800bdda:	e7da      	b.n	800bd92 <_free_r+0x22>
 800bddc:	d902      	bls.n	800bde4 <_free_r+0x74>
 800bdde:	230c      	movs	r3, #12
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	e7d6      	b.n	800bd92 <_free_r+0x22>
 800bde4:	6820      	ldr	r0, [r4, #0]
 800bde6:	1821      	adds	r1, r4, r0
 800bde8:	428b      	cmp	r3, r1
 800bdea:	bf04      	itt	eq
 800bdec:	6819      	ldreq	r1, [r3, #0]
 800bdee:	685b      	ldreq	r3, [r3, #4]
 800bdf0:	6063      	str	r3, [r4, #4]
 800bdf2:	bf04      	itt	eq
 800bdf4:	1809      	addeq	r1, r1, r0
 800bdf6:	6021      	streq	r1, [r4, #0]
 800bdf8:	6054      	str	r4, [r2, #4]
 800bdfa:	e7ca      	b.n	800bd92 <_free_r+0x22>
 800bdfc:	bd38      	pop	{r3, r4, r5, pc}
 800bdfe:	bf00      	nop
 800be00:	20004f84 	.word	0x20004f84

0800be04 <malloc>:
 800be04:	4b02      	ldr	r3, [pc, #8]	@ (800be10 <malloc+0xc>)
 800be06:	4601      	mov	r1, r0
 800be08:	6818      	ldr	r0, [r3, #0]
 800be0a:	f000 b825 	b.w	800be58 <_malloc_r>
 800be0e:	bf00      	nop
 800be10:	20000020 	.word	0x20000020

0800be14 <sbrk_aligned>:
 800be14:	b570      	push	{r4, r5, r6, lr}
 800be16:	4e0f      	ldr	r6, [pc, #60]	@ (800be54 <sbrk_aligned+0x40>)
 800be18:	460c      	mov	r4, r1
 800be1a:	6831      	ldr	r1, [r6, #0]
 800be1c:	4605      	mov	r5, r0
 800be1e:	b911      	cbnz	r1, 800be26 <sbrk_aligned+0x12>
 800be20:	f001 ffda 	bl	800ddd8 <_sbrk_r>
 800be24:	6030      	str	r0, [r6, #0]
 800be26:	4621      	mov	r1, r4
 800be28:	4628      	mov	r0, r5
 800be2a:	f001 ffd5 	bl	800ddd8 <_sbrk_r>
 800be2e:	1c43      	adds	r3, r0, #1
 800be30:	d103      	bne.n	800be3a <sbrk_aligned+0x26>
 800be32:	f04f 34ff 	mov.w	r4, #4294967295
 800be36:	4620      	mov	r0, r4
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	1cc4      	adds	r4, r0, #3
 800be3c:	f024 0403 	bic.w	r4, r4, #3
 800be40:	42a0      	cmp	r0, r4
 800be42:	d0f8      	beq.n	800be36 <sbrk_aligned+0x22>
 800be44:	1a21      	subs	r1, r4, r0
 800be46:	4628      	mov	r0, r5
 800be48:	f001 ffc6 	bl	800ddd8 <_sbrk_r>
 800be4c:	3001      	adds	r0, #1
 800be4e:	d1f2      	bne.n	800be36 <sbrk_aligned+0x22>
 800be50:	e7ef      	b.n	800be32 <sbrk_aligned+0x1e>
 800be52:	bf00      	nop
 800be54:	20004f80 	.word	0x20004f80

0800be58 <_malloc_r>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	1ccd      	adds	r5, r1, #3
 800be5e:	f025 0503 	bic.w	r5, r5, #3
 800be62:	3508      	adds	r5, #8
 800be64:	2d0c      	cmp	r5, #12
 800be66:	bf38      	it	cc
 800be68:	250c      	movcc	r5, #12
 800be6a:	2d00      	cmp	r5, #0
 800be6c:	4606      	mov	r6, r0
 800be6e:	db01      	blt.n	800be74 <_malloc_r+0x1c>
 800be70:	42a9      	cmp	r1, r5
 800be72:	d904      	bls.n	800be7e <_malloc_r+0x26>
 800be74:	230c      	movs	r3, #12
 800be76:	6033      	str	r3, [r6, #0]
 800be78:	2000      	movs	r0, #0
 800be7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf54 <_malloc_r+0xfc>
 800be82:	f000 f869 	bl	800bf58 <__malloc_lock>
 800be86:	f8d8 3000 	ldr.w	r3, [r8]
 800be8a:	461c      	mov	r4, r3
 800be8c:	bb44      	cbnz	r4, 800bee0 <_malloc_r+0x88>
 800be8e:	4629      	mov	r1, r5
 800be90:	4630      	mov	r0, r6
 800be92:	f7ff ffbf 	bl	800be14 <sbrk_aligned>
 800be96:	1c43      	adds	r3, r0, #1
 800be98:	4604      	mov	r4, r0
 800be9a:	d158      	bne.n	800bf4e <_malloc_r+0xf6>
 800be9c:	f8d8 4000 	ldr.w	r4, [r8]
 800bea0:	4627      	mov	r7, r4
 800bea2:	2f00      	cmp	r7, #0
 800bea4:	d143      	bne.n	800bf2e <_malloc_r+0xd6>
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	d04b      	beq.n	800bf42 <_malloc_r+0xea>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	4639      	mov	r1, r7
 800beae:	4630      	mov	r0, r6
 800beb0:	eb04 0903 	add.w	r9, r4, r3
 800beb4:	f001 ff90 	bl	800ddd8 <_sbrk_r>
 800beb8:	4581      	cmp	r9, r0
 800beba:	d142      	bne.n	800bf42 <_malloc_r+0xea>
 800bebc:	6821      	ldr	r1, [r4, #0]
 800bebe:	1a6d      	subs	r5, r5, r1
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ffa6 	bl	800be14 <sbrk_aligned>
 800bec8:	3001      	adds	r0, #1
 800beca:	d03a      	beq.n	800bf42 <_malloc_r+0xea>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	442b      	add	r3, r5
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	f8d8 3000 	ldr.w	r3, [r8]
 800bed6:	685a      	ldr	r2, [r3, #4]
 800bed8:	bb62      	cbnz	r2, 800bf34 <_malloc_r+0xdc>
 800beda:	f8c8 7000 	str.w	r7, [r8]
 800bede:	e00f      	b.n	800bf00 <_malloc_r+0xa8>
 800bee0:	6822      	ldr	r2, [r4, #0]
 800bee2:	1b52      	subs	r2, r2, r5
 800bee4:	d420      	bmi.n	800bf28 <_malloc_r+0xd0>
 800bee6:	2a0b      	cmp	r2, #11
 800bee8:	d917      	bls.n	800bf1a <_malloc_r+0xc2>
 800beea:	1961      	adds	r1, r4, r5
 800beec:	42a3      	cmp	r3, r4
 800beee:	6025      	str	r5, [r4, #0]
 800bef0:	bf18      	it	ne
 800bef2:	6059      	strne	r1, [r3, #4]
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	bf08      	it	eq
 800bef8:	f8c8 1000 	streq.w	r1, [r8]
 800befc:	5162      	str	r2, [r4, r5]
 800befe:	604b      	str	r3, [r1, #4]
 800bf00:	4630      	mov	r0, r6
 800bf02:	f000 f82f 	bl	800bf64 <__malloc_unlock>
 800bf06:	f104 000b 	add.w	r0, r4, #11
 800bf0a:	1d23      	adds	r3, r4, #4
 800bf0c:	f020 0007 	bic.w	r0, r0, #7
 800bf10:	1ac2      	subs	r2, r0, r3
 800bf12:	bf1c      	itt	ne
 800bf14:	1a1b      	subne	r3, r3, r0
 800bf16:	50a3      	strne	r3, [r4, r2]
 800bf18:	e7af      	b.n	800be7a <_malloc_r+0x22>
 800bf1a:	6862      	ldr	r2, [r4, #4]
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	bf0c      	ite	eq
 800bf20:	f8c8 2000 	streq.w	r2, [r8]
 800bf24:	605a      	strne	r2, [r3, #4]
 800bf26:	e7eb      	b.n	800bf00 <_malloc_r+0xa8>
 800bf28:	4623      	mov	r3, r4
 800bf2a:	6864      	ldr	r4, [r4, #4]
 800bf2c:	e7ae      	b.n	800be8c <_malloc_r+0x34>
 800bf2e:	463c      	mov	r4, r7
 800bf30:	687f      	ldr	r7, [r7, #4]
 800bf32:	e7b6      	b.n	800bea2 <_malloc_r+0x4a>
 800bf34:	461a      	mov	r2, r3
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d1fb      	bne.n	800bf34 <_malloc_r+0xdc>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	6053      	str	r3, [r2, #4]
 800bf40:	e7de      	b.n	800bf00 <_malloc_r+0xa8>
 800bf42:	230c      	movs	r3, #12
 800bf44:	6033      	str	r3, [r6, #0]
 800bf46:	4630      	mov	r0, r6
 800bf48:	f000 f80c 	bl	800bf64 <__malloc_unlock>
 800bf4c:	e794      	b.n	800be78 <_malloc_r+0x20>
 800bf4e:	6005      	str	r5, [r0, #0]
 800bf50:	e7d6      	b.n	800bf00 <_malloc_r+0xa8>
 800bf52:	bf00      	nop
 800bf54:	20004f84 	.word	0x20004f84

0800bf58 <__malloc_lock>:
 800bf58:	4801      	ldr	r0, [pc, #4]	@ (800bf60 <__malloc_lock+0x8>)
 800bf5a:	f7ff b89a 	b.w	800b092 <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20004f7c 	.word	0x20004f7c

0800bf64 <__malloc_unlock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	@ (800bf6c <__malloc_unlock+0x8>)
 800bf66:	f7ff b895 	b.w	800b094 <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20004f7c 	.word	0x20004f7c

0800bf70 <_Balloc>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	69c6      	ldr	r6, [r0, #28]
 800bf74:	4604      	mov	r4, r0
 800bf76:	460d      	mov	r5, r1
 800bf78:	b976      	cbnz	r6, 800bf98 <_Balloc+0x28>
 800bf7a:	2010      	movs	r0, #16
 800bf7c:	f7ff ff42 	bl	800be04 <malloc>
 800bf80:	4602      	mov	r2, r0
 800bf82:	61e0      	str	r0, [r4, #28]
 800bf84:	b920      	cbnz	r0, 800bf90 <_Balloc+0x20>
 800bf86:	4b18      	ldr	r3, [pc, #96]	@ (800bfe8 <_Balloc+0x78>)
 800bf88:	4818      	ldr	r0, [pc, #96]	@ (800bfec <_Balloc+0x7c>)
 800bf8a:	216b      	movs	r1, #107	@ 0x6b
 800bf8c:	f001 ff3c 	bl	800de08 <__assert_func>
 800bf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf94:	6006      	str	r6, [r0, #0]
 800bf96:	60c6      	str	r6, [r0, #12]
 800bf98:	69e6      	ldr	r6, [r4, #28]
 800bf9a:	68f3      	ldr	r3, [r6, #12]
 800bf9c:	b183      	cbz	r3, 800bfc0 <_Balloc+0x50>
 800bf9e:	69e3      	ldr	r3, [r4, #28]
 800bfa0:	68db      	ldr	r3, [r3, #12]
 800bfa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfa6:	b9b8      	cbnz	r0, 800bfd8 <_Balloc+0x68>
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	fa01 f605 	lsl.w	r6, r1, r5
 800bfae:	1d72      	adds	r2, r6, #5
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f001 ff46 	bl	800de44 <_calloc_r>
 800bfb8:	b160      	cbz	r0, 800bfd4 <_Balloc+0x64>
 800bfba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfbe:	e00e      	b.n	800bfde <_Balloc+0x6e>
 800bfc0:	2221      	movs	r2, #33	@ 0x21
 800bfc2:	2104      	movs	r1, #4
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f001 ff3d 	bl	800de44 <_calloc_r>
 800bfca:	69e3      	ldr	r3, [r4, #28]
 800bfcc:	60f0      	str	r0, [r6, #12]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1e4      	bne.n	800bf9e <_Balloc+0x2e>
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}
 800bfd8:	6802      	ldr	r2, [r0, #0]
 800bfda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfe4:	e7f7      	b.n	800bfd6 <_Balloc+0x66>
 800bfe6:	bf00      	nop
 800bfe8:	0800eb52 	.word	0x0800eb52
 800bfec:	0800ebd2 	.word	0x0800ebd2

0800bff0 <_Bfree>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	69c6      	ldr	r6, [r0, #28]
 800bff4:	4605      	mov	r5, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b976      	cbnz	r6, 800c018 <_Bfree+0x28>
 800bffa:	2010      	movs	r0, #16
 800bffc:	f7ff ff02 	bl	800be04 <malloc>
 800c000:	4602      	mov	r2, r0
 800c002:	61e8      	str	r0, [r5, #28]
 800c004:	b920      	cbnz	r0, 800c010 <_Bfree+0x20>
 800c006:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <_Bfree+0x3c>)
 800c008:	4809      	ldr	r0, [pc, #36]	@ (800c030 <_Bfree+0x40>)
 800c00a:	218f      	movs	r1, #143	@ 0x8f
 800c00c:	f001 fefc 	bl	800de08 <__assert_func>
 800c010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c014:	6006      	str	r6, [r0, #0]
 800c016:	60c6      	str	r6, [r0, #12]
 800c018:	b13c      	cbz	r4, 800c02a <_Bfree+0x3a>
 800c01a:	69eb      	ldr	r3, [r5, #28]
 800c01c:	6862      	ldr	r2, [r4, #4]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c024:	6021      	str	r1, [r4, #0]
 800c026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	0800eb52 	.word	0x0800eb52
 800c030:	0800ebd2 	.word	0x0800ebd2

0800c034 <__multadd>:
 800c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c038:	690d      	ldr	r5, [r1, #16]
 800c03a:	4607      	mov	r7, r0
 800c03c:	460c      	mov	r4, r1
 800c03e:	461e      	mov	r6, r3
 800c040:	f101 0c14 	add.w	ip, r1, #20
 800c044:	2000      	movs	r0, #0
 800c046:	f8dc 3000 	ldr.w	r3, [ip]
 800c04a:	b299      	uxth	r1, r3
 800c04c:	fb02 6101 	mla	r1, r2, r1, r6
 800c050:	0c1e      	lsrs	r6, r3, #16
 800c052:	0c0b      	lsrs	r3, r1, #16
 800c054:	fb02 3306 	mla	r3, r2, r6, r3
 800c058:	b289      	uxth	r1, r1
 800c05a:	3001      	adds	r0, #1
 800c05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c060:	4285      	cmp	r5, r0
 800c062:	f84c 1b04 	str.w	r1, [ip], #4
 800c066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c06a:	dcec      	bgt.n	800c046 <__multadd+0x12>
 800c06c:	b30e      	cbz	r6, 800c0b2 <__multadd+0x7e>
 800c06e:	68a3      	ldr	r3, [r4, #8]
 800c070:	42ab      	cmp	r3, r5
 800c072:	dc19      	bgt.n	800c0a8 <__multadd+0x74>
 800c074:	6861      	ldr	r1, [r4, #4]
 800c076:	4638      	mov	r0, r7
 800c078:	3101      	adds	r1, #1
 800c07a:	f7ff ff79 	bl	800bf70 <_Balloc>
 800c07e:	4680      	mov	r8, r0
 800c080:	b928      	cbnz	r0, 800c08e <__multadd+0x5a>
 800c082:	4602      	mov	r2, r0
 800c084:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b8 <__multadd+0x84>)
 800c086:	480d      	ldr	r0, [pc, #52]	@ (800c0bc <__multadd+0x88>)
 800c088:	21ba      	movs	r1, #186	@ 0xba
 800c08a:	f001 febd 	bl	800de08 <__assert_func>
 800c08e:	6922      	ldr	r2, [r4, #16]
 800c090:	3202      	adds	r2, #2
 800c092:	f104 010c 	add.w	r1, r4, #12
 800c096:	0092      	lsls	r2, r2, #2
 800c098:	300c      	adds	r0, #12
 800c09a:	f7fe fffc 	bl	800b096 <memcpy>
 800c09e:	4621      	mov	r1, r4
 800c0a0:	4638      	mov	r0, r7
 800c0a2:	f7ff ffa5 	bl	800bff0 <_Bfree>
 800c0a6:	4644      	mov	r4, r8
 800c0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0ac:	3501      	adds	r5, #1
 800c0ae:	615e      	str	r6, [r3, #20]
 800c0b0:	6125      	str	r5, [r4, #16]
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b8:	0800ebc1 	.word	0x0800ebc1
 800c0bc:	0800ebd2 	.word	0x0800ebd2

0800c0c0 <__s2b>:
 800c0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	4615      	mov	r5, r2
 800c0c8:	461f      	mov	r7, r3
 800c0ca:	2209      	movs	r2, #9
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	db09      	blt.n	800c0f0 <__s2b+0x30>
 800c0dc:	4630      	mov	r0, r6
 800c0de:	f7ff ff47 	bl	800bf70 <_Balloc>
 800c0e2:	b940      	cbnz	r0, 800c0f6 <__s2b+0x36>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	4b19      	ldr	r3, [pc, #100]	@ (800c14c <__s2b+0x8c>)
 800c0e8:	4819      	ldr	r0, [pc, #100]	@ (800c150 <__s2b+0x90>)
 800c0ea:	21d3      	movs	r1, #211	@ 0xd3
 800c0ec:	f001 fe8c 	bl	800de08 <__assert_func>
 800c0f0:	0052      	lsls	r2, r2, #1
 800c0f2:	3101      	adds	r1, #1
 800c0f4:	e7f0      	b.n	800c0d8 <__s2b+0x18>
 800c0f6:	9b08      	ldr	r3, [sp, #32]
 800c0f8:	6143      	str	r3, [r0, #20]
 800c0fa:	2d09      	cmp	r5, #9
 800c0fc:	f04f 0301 	mov.w	r3, #1
 800c100:	6103      	str	r3, [r0, #16]
 800c102:	dd16      	ble.n	800c132 <__s2b+0x72>
 800c104:	f104 0909 	add.w	r9, r4, #9
 800c108:	46c8      	mov	r8, r9
 800c10a:	442c      	add	r4, r5
 800c10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c110:	4601      	mov	r1, r0
 800c112:	3b30      	subs	r3, #48	@ 0x30
 800c114:	220a      	movs	r2, #10
 800c116:	4630      	mov	r0, r6
 800c118:	f7ff ff8c 	bl	800c034 <__multadd>
 800c11c:	45a0      	cmp	r8, r4
 800c11e:	d1f5      	bne.n	800c10c <__s2b+0x4c>
 800c120:	f1a5 0408 	sub.w	r4, r5, #8
 800c124:	444c      	add	r4, r9
 800c126:	1b2d      	subs	r5, r5, r4
 800c128:	1963      	adds	r3, r4, r5
 800c12a:	42bb      	cmp	r3, r7
 800c12c:	db04      	blt.n	800c138 <__s2b+0x78>
 800c12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c132:	340a      	adds	r4, #10
 800c134:	2509      	movs	r5, #9
 800c136:	e7f6      	b.n	800c126 <__s2b+0x66>
 800c138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c13c:	4601      	mov	r1, r0
 800c13e:	3b30      	subs	r3, #48	@ 0x30
 800c140:	220a      	movs	r2, #10
 800c142:	4630      	mov	r0, r6
 800c144:	f7ff ff76 	bl	800c034 <__multadd>
 800c148:	e7ee      	b.n	800c128 <__s2b+0x68>
 800c14a:	bf00      	nop
 800c14c:	0800ebc1 	.word	0x0800ebc1
 800c150:	0800ebd2 	.word	0x0800ebd2

0800c154 <__hi0bits>:
 800c154:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c158:	4603      	mov	r3, r0
 800c15a:	bf36      	itet	cc
 800c15c:	0403      	lslcc	r3, r0, #16
 800c15e:	2000      	movcs	r0, #0
 800c160:	2010      	movcc	r0, #16
 800c162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c166:	bf3c      	itt	cc
 800c168:	021b      	lslcc	r3, r3, #8
 800c16a:	3008      	addcc	r0, #8
 800c16c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c170:	bf3c      	itt	cc
 800c172:	011b      	lslcc	r3, r3, #4
 800c174:	3004      	addcc	r0, #4
 800c176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c17a:	bf3c      	itt	cc
 800c17c:	009b      	lslcc	r3, r3, #2
 800c17e:	3002      	addcc	r0, #2
 800c180:	2b00      	cmp	r3, #0
 800c182:	db05      	blt.n	800c190 <__hi0bits+0x3c>
 800c184:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c188:	f100 0001 	add.w	r0, r0, #1
 800c18c:	bf08      	it	eq
 800c18e:	2020      	moveq	r0, #32
 800c190:	4770      	bx	lr

0800c192 <__lo0bits>:
 800c192:	6803      	ldr	r3, [r0, #0]
 800c194:	4602      	mov	r2, r0
 800c196:	f013 0007 	ands.w	r0, r3, #7
 800c19a:	d00b      	beq.n	800c1b4 <__lo0bits+0x22>
 800c19c:	07d9      	lsls	r1, r3, #31
 800c19e:	d421      	bmi.n	800c1e4 <__lo0bits+0x52>
 800c1a0:	0798      	lsls	r0, r3, #30
 800c1a2:	bf49      	itett	mi
 800c1a4:	085b      	lsrmi	r3, r3, #1
 800c1a6:	089b      	lsrpl	r3, r3, #2
 800c1a8:	2001      	movmi	r0, #1
 800c1aa:	6013      	strmi	r3, [r2, #0]
 800c1ac:	bf5c      	itt	pl
 800c1ae:	6013      	strpl	r3, [r2, #0]
 800c1b0:	2002      	movpl	r0, #2
 800c1b2:	4770      	bx	lr
 800c1b4:	b299      	uxth	r1, r3
 800c1b6:	b909      	cbnz	r1, 800c1bc <__lo0bits+0x2a>
 800c1b8:	0c1b      	lsrs	r3, r3, #16
 800c1ba:	2010      	movs	r0, #16
 800c1bc:	b2d9      	uxtb	r1, r3
 800c1be:	b909      	cbnz	r1, 800c1c4 <__lo0bits+0x32>
 800c1c0:	3008      	adds	r0, #8
 800c1c2:	0a1b      	lsrs	r3, r3, #8
 800c1c4:	0719      	lsls	r1, r3, #28
 800c1c6:	bf04      	itt	eq
 800c1c8:	091b      	lsreq	r3, r3, #4
 800c1ca:	3004      	addeq	r0, #4
 800c1cc:	0799      	lsls	r1, r3, #30
 800c1ce:	bf04      	itt	eq
 800c1d0:	089b      	lsreq	r3, r3, #2
 800c1d2:	3002      	addeq	r0, #2
 800c1d4:	07d9      	lsls	r1, r3, #31
 800c1d6:	d403      	bmi.n	800c1e0 <__lo0bits+0x4e>
 800c1d8:	085b      	lsrs	r3, r3, #1
 800c1da:	f100 0001 	add.w	r0, r0, #1
 800c1de:	d003      	beq.n	800c1e8 <__lo0bits+0x56>
 800c1e0:	6013      	str	r3, [r2, #0]
 800c1e2:	4770      	bx	lr
 800c1e4:	2000      	movs	r0, #0
 800c1e6:	4770      	bx	lr
 800c1e8:	2020      	movs	r0, #32
 800c1ea:	4770      	bx	lr

0800c1ec <__i2b>:
 800c1ec:	b510      	push	{r4, lr}
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	f7ff febd 	bl	800bf70 <_Balloc>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	b928      	cbnz	r0, 800c206 <__i2b+0x1a>
 800c1fa:	4b05      	ldr	r3, [pc, #20]	@ (800c210 <__i2b+0x24>)
 800c1fc:	4805      	ldr	r0, [pc, #20]	@ (800c214 <__i2b+0x28>)
 800c1fe:	f240 1145 	movw	r1, #325	@ 0x145
 800c202:	f001 fe01 	bl	800de08 <__assert_func>
 800c206:	2301      	movs	r3, #1
 800c208:	6144      	str	r4, [r0, #20]
 800c20a:	6103      	str	r3, [r0, #16]
 800c20c:	bd10      	pop	{r4, pc}
 800c20e:	bf00      	nop
 800c210:	0800ebc1 	.word	0x0800ebc1
 800c214:	0800ebd2 	.word	0x0800ebd2

0800c218 <__multiply>:
 800c218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21c:	4617      	mov	r7, r2
 800c21e:	690a      	ldr	r2, [r1, #16]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	429a      	cmp	r2, r3
 800c224:	bfa8      	it	ge
 800c226:	463b      	movge	r3, r7
 800c228:	4689      	mov	r9, r1
 800c22a:	bfa4      	itt	ge
 800c22c:	460f      	movge	r7, r1
 800c22e:	4699      	movge	r9, r3
 800c230:	693d      	ldr	r5, [r7, #16]
 800c232:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	eb05 060a 	add.w	r6, r5, sl
 800c23e:	42b3      	cmp	r3, r6
 800c240:	b085      	sub	sp, #20
 800c242:	bfb8      	it	lt
 800c244:	3101      	addlt	r1, #1
 800c246:	f7ff fe93 	bl	800bf70 <_Balloc>
 800c24a:	b930      	cbnz	r0, 800c25a <__multiply+0x42>
 800c24c:	4602      	mov	r2, r0
 800c24e:	4b41      	ldr	r3, [pc, #260]	@ (800c354 <__multiply+0x13c>)
 800c250:	4841      	ldr	r0, [pc, #260]	@ (800c358 <__multiply+0x140>)
 800c252:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c256:	f001 fdd7 	bl	800de08 <__assert_func>
 800c25a:	f100 0414 	add.w	r4, r0, #20
 800c25e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c262:	4623      	mov	r3, r4
 800c264:	2200      	movs	r2, #0
 800c266:	4573      	cmp	r3, lr
 800c268:	d320      	bcc.n	800c2ac <__multiply+0x94>
 800c26a:	f107 0814 	add.w	r8, r7, #20
 800c26e:	f109 0114 	add.w	r1, r9, #20
 800c272:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c276:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c27a:	9302      	str	r3, [sp, #8]
 800c27c:	1beb      	subs	r3, r5, r7
 800c27e:	3b15      	subs	r3, #21
 800c280:	f023 0303 	bic.w	r3, r3, #3
 800c284:	3304      	adds	r3, #4
 800c286:	3715      	adds	r7, #21
 800c288:	42bd      	cmp	r5, r7
 800c28a:	bf38      	it	cc
 800c28c:	2304      	movcc	r3, #4
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	9b02      	ldr	r3, [sp, #8]
 800c292:	9103      	str	r1, [sp, #12]
 800c294:	428b      	cmp	r3, r1
 800c296:	d80c      	bhi.n	800c2b2 <__multiply+0x9a>
 800c298:	2e00      	cmp	r6, #0
 800c29a:	dd03      	ble.n	800c2a4 <__multiply+0x8c>
 800c29c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d055      	beq.n	800c350 <__multiply+0x138>
 800c2a4:	6106      	str	r6, [r0, #16]
 800c2a6:	b005      	add	sp, #20
 800c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ac:	f843 2b04 	str.w	r2, [r3], #4
 800c2b0:	e7d9      	b.n	800c266 <__multiply+0x4e>
 800c2b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2b6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ba:	d01f      	beq.n	800c2fc <__multiply+0xe4>
 800c2bc:	46c4      	mov	ip, r8
 800c2be:	46a1      	mov	r9, r4
 800c2c0:	2700      	movs	r7, #0
 800c2c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c6:	f8d9 3000 	ldr.w	r3, [r9]
 800c2ca:	fa1f fb82 	uxth.w	fp, r2
 800c2ce:	b29b      	uxth	r3, r3
 800c2d0:	fb0a 330b 	mla	r3, sl, fp, r3
 800c2d4:	443b      	add	r3, r7
 800c2d6:	f8d9 7000 	ldr.w	r7, [r9]
 800c2da:	0c12      	lsrs	r2, r2, #16
 800c2dc:	0c3f      	lsrs	r7, r7, #16
 800c2de:	fb0a 7202 	mla	r2, sl, r2, r7
 800c2e2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ec:	4565      	cmp	r5, ip
 800c2ee:	f849 3b04 	str.w	r3, [r9], #4
 800c2f2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c2f6:	d8e4      	bhi.n	800c2c2 <__multiply+0xaa>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	50e7      	str	r7, [r4, r3]
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c302:	3104      	adds	r1, #4
 800c304:	f1b9 0f00 	cmp.w	r9, #0
 800c308:	d020      	beq.n	800c34c <__multiply+0x134>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	4647      	mov	r7, r8
 800c30e:	46a4      	mov	ip, r4
 800c310:	f04f 0a00 	mov.w	sl, #0
 800c314:	f8b7 b000 	ldrh.w	fp, [r7]
 800c318:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c31c:	fb09 220b 	mla	r2, r9, fp, r2
 800c320:	4452      	add	r2, sl
 800c322:	b29b      	uxth	r3, r3
 800c324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c328:	f84c 3b04 	str.w	r3, [ip], #4
 800c32c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c334:	f8bc 3000 	ldrh.w	r3, [ip]
 800c338:	fb09 330a 	mla	r3, r9, sl, r3
 800c33c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c340:	42bd      	cmp	r5, r7
 800c342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c346:	d8e5      	bhi.n	800c314 <__multiply+0xfc>
 800c348:	9a01      	ldr	r2, [sp, #4]
 800c34a:	50a3      	str	r3, [r4, r2]
 800c34c:	3404      	adds	r4, #4
 800c34e:	e79f      	b.n	800c290 <__multiply+0x78>
 800c350:	3e01      	subs	r6, #1
 800c352:	e7a1      	b.n	800c298 <__multiply+0x80>
 800c354:	0800ebc1 	.word	0x0800ebc1
 800c358:	0800ebd2 	.word	0x0800ebd2

0800c35c <__pow5mult>:
 800c35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c360:	4615      	mov	r5, r2
 800c362:	f012 0203 	ands.w	r2, r2, #3
 800c366:	4607      	mov	r7, r0
 800c368:	460e      	mov	r6, r1
 800c36a:	d007      	beq.n	800c37c <__pow5mult+0x20>
 800c36c:	4c25      	ldr	r4, [pc, #148]	@ (800c404 <__pow5mult+0xa8>)
 800c36e:	3a01      	subs	r2, #1
 800c370:	2300      	movs	r3, #0
 800c372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c376:	f7ff fe5d 	bl	800c034 <__multadd>
 800c37a:	4606      	mov	r6, r0
 800c37c:	10ad      	asrs	r5, r5, #2
 800c37e:	d03d      	beq.n	800c3fc <__pow5mult+0xa0>
 800c380:	69fc      	ldr	r4, [r7, #28]
 800c382:	b97c      	cbnz	r4, 800c3a4 <__pow5mult+0x48>
 800c384:	2010      	movs	r0, #16
 800c386:	f7ff fd3d 	bl	800be04 <malloc>
 800c38a:	4602      	mov	r2, r0
 800c38c:	61f8      	str	r0, [r7, #28]
 800c38e:	b928      	cbnz	r0, 800c39c <__pow5mult+0x40>
 800c390:	4b1d      	ldr	r3, [pc, #116]	@ (800c408 <__pow5mult+0xac>)
 800c392:	481e      	ldr	r0, [pc, #120]	@ (800c40c <__pow5mult+0xb0>)
 800c394:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c398:	f001 fd36 	bl	800de08 <__assert_func>
 800c39c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3a0:	6004      	str	r4, [r0, #0]
 800c3a2:	60c4      	str	r4, [r0, #12]
 800c3a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3ac:	b94c      	cbnz	r4, 800c3c2 <__pow5mult+0x66>
 800c3ae:	f240 2171 	movw	r1, #625	@ 0x271
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f7ff ff1a 	bl	800c1ec <__i2b>
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3be:	4604      	mov	r4, r0
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	f04f 0900 	mov.w	r9, #0
 800c3c6:	07eb      	lsls	r3, r5, #31
 800c3c8:	d50a      	bpl.n	800c3e0 <__pow5mult+0x84>
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4622      	mov	r2, r4
 800c3ce:	4638      	mov	r0, r7
 800c3d0:	f7ff ff22 	bl	800c218 <__multiply>
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4680      	mov	r8, r0
 800c3d8:	4638      	mov	r0, r7
 800c3da:	f7ff fe09 	bl	800bff0 <_Bfree>
 800c3de:	4646      	mov	r6, r8
 800c3e0:	106d      	asrs	r5, r5, #1
 800c3e2:	d00b      	beq.n	800c3fc <__pow5mult+0xa0>
 800c3e4:	6820      	ldr	r0, [r4, #0]
 800c3e6:	b938      	cbnz	r0, 800c3f8 <__pow5mult+0x9c>
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	4621      	mov	r1, r4
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7ff ff13 	bl	800c218 <__multiply>
 800c3f2:	6020      	str	r0, [r4, #0]
 800c3f4:	f8c0 9000 	str.w	r9, [r0]
 800c3f8:	4604      	mov	r4, r0
 800c3fa:	e7e4      	b.n	800c3c6 <__pow5mult+0x6a>
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c402:	bf00      	nop
 800c404:	0800ece4 	.word	0x0800ece4
 800c408:	0800eb52 	.word	0x0800eb52
 800c40c:	0800ebd2 	.word	0x0800ebd2

0800c410 <__lshift>:
 800c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c414:	460c      	mov	r4, r1
 800c416:	6849      	ldr	r1, [r1, #4]
 800c418:	6923      	ldr	r3, [r4, #16]
 800c41a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	4607      	mov	r7, r0
 800c422:	4691      	mov	r9, r2
 800c424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c428:	f108 0601 	add.w	r6, r8, #1
 800c42c:	42b3      	cmp	r3, r6
 800c42e:	db0b      	blt.n	800c448 <__lshift+0x38>
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff fd9d 	bl	800bf70 <_Balloc>
 800c436:	4605      	mov	r5, r0
 800c438:	b948      	cbnz	r0, 800c44e <__lshift+0x3e>
 800c43a:	4602      	mov	r2, r0
 800c43c:	4b28      	ldr	r3, [pc, #160]	@ (800c4e0 <__lshift+0xd0>)
 800c43e:	4829      	ldr	r0, [pc, #164]	@ (800c4e4 <__lshift+0xd4>)
 800c440:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c444:	f001 fce0 	bl	800de08 <__assert_func>
 800c448:	3101      	adds	r1, #1
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	e7ee      	b.n	800c42c <__lshift+0x1c>
 800c44e:	2300      	movs	r3, #0
 800c450:	f100 0114 	add.w	r1, r0, #20
 800c454:	f100 0210 	add.w	r2, r0, #16
 800c458:	4618      	mov	r0, r3
 800c45a:	4553      	cmp	r3, sl
 800c45c:	db33      	blt.n	800c4c6 <__lshift+0xb6>
 800c45e:	6920      	ldr	r0, [r4, #16]
 800c460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c464:	f104 0314 	add.w	r3, r4, #20
 800c468:	f019 091f 	ands.w	r9, r9, #31
 800c46c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c474:	d02b      	beq.n	800c4ce <__lshift+0xbe>
 800c476:	f1c9 0e20 	rsb	lr, r9, #32
 800c47a:	468a      	mov	sl, r1
 800c47c:	2200      	movs	r2, #0
 800c47e:	6818      	ldr	r0, [r3, #0]
 800c480:	fa00 f009 	lsl.w	r0, r0, r9
 800c484:	4310      	orrs	r0, r2
 800c486:	f84a 0b04 	str.w	r0, [sl], #4
 800c48a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c48e:	459c      	cmp	ip, r3
 800c490:	fa22 f20e 	lsr.w	r2, r2, lr
 800c494:	d8f3      	bhi.n	800c47e <__lshift+0x6e>
 800c496:	ebac 0304 	sub.w	r3, ip, r4
 800c49a:	3b15      	subs	r3, #21
 800c49c:	f023 0303 	bic.w	r3, r3, #3
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	f104 0015 	add.w	r0, r4, #21
 800c4a6:	4560      	cmp	r0, ip
 800c4a8:	bf88      	it	hi
 800c4aa:	2304      	movhi	r3, #4
 800c4ac:	50ca      	str	r2, [r1, r3]
 800c4ae:	b10a      	cbz	r2, 800c4b4 <__lshift+0xa4>
 800c4b0:	f108 0602 	add.w	r6, r8, #2
 800c4b4:	3e01      	subs	r6, #1
 800c4b6:	4638      	mov	r0, r7
 800c4b8:	612e      	str	r6, [r5, #16]
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	f7ff fd98 	bl	800bff0 <_Bfree>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	e7c5      	b.n	800c45a <__lshift+0x4a>
 800c4ce:	3904      	subs	r1, #4
 800c4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4d8:	459c      	cmp	ip, r3
 800c4da:	d8f9      	bhi.n	800c4d0 <__lshift+0xc0>
 800c4dc:	e7ea      	b.n	800c4b4 <__lshift+0xa4>
 800c4de:	bf00      	nop
 800c4e0:	0800ebc1 	.word	0x0800ebc1
 800c4e4:	0800ebd2 	.word	0x0800ebd2

0800c4e8 <__mcmp>:
 800c4e8:	690a      	ldr	r2, [r1, #16]
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	6900      	ldr	r0, [r0, #16]
 800c4ee:	1a80      	subs	r0, r0, r2
 800c4f0:	b530      	push	{r4, r5, lr}
 800c4f2:	d10e      	bne.n	800c512 <__mcmp+0x2a>
 800c4f4:	3314      	adds	r3, #20
 800c4f6:	3114      	adds	r1, #20
 800c4f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c508:	4295      	cmp	r5, r2
 800c50a:	d003      	beq.n	800c514 <__mcmp+0x2c>
 800c50c:	d205      	bcs.n	800c51a <__mcmp+0x32>
 800c50e:	f04f 30ff 	mov.w	r0, #4294967295
 800c512:	bd30      	pop	{r4, r5, pc}
 800c514:	42a3      	cmp	r3, r4
 800c516:	d3f3      	bcc.n	800c500 <__mcmp+0x18>
 800c518:	e7fb      	b.n	800c512 <__mcmp+0x2a>
 800c51a:	2001      	movs	r0, #1
 800c51c:	e7f9      	b.n	800c512 <__mcmp+0x2a>
	...

0800c520 <__mdiff>:
 800c520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c524:	4689      	mov	r9, r1
 800c526:	4606      	mov	r6, r0
 800c528:	4611      	mov	r1, r2
 800c52a:	4648      	mov	r0, r9
 800c52c:	4614      	mov	r4, r2
 800c52e:	f7ff ffdb 	bl	800c4e8 <__mcmp>
 800c532:	1e05      	subs	r5, r0, #0
 800c534:	d112      	bne.n	800c55c <__mdiff+0x3c>
 800c536:	4629      	mov	r1, r5
 800c538:	4630      	mov	r0, r6
 800c53a:	f7ff fd19 	bl	800bf70 <_Balloc>
 800c53e:	4602      	mov	r2, r0
 800c540:	b928      	cbnz	r0, 800c54e <__mdiff+0x2e>
 800c542:	4b3f      	ldr	r3, [pc, #252]	@ (800c640 <__mdiff+0x120>)
 800c544:	f240 2137 	movw	r1, #567	@ 0x237
 800c548:	483e      	ldr	r0, [pc, #248]	@ (800c644 <__mdiff+0x124>)
 800c54a:	f001 fc5d 	bl	800de08 <__assert_func>
 800c54e:	2301      	movs	r3, #1
 800c550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c554:	4610      	mov	r0, r2
 800c556:	b003      	add	sp, #12
 800c558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c55c:	bfbc      	itt	lt
 800c55e:	464b      	movlt	r3, r9
 800c560:	46a1      	movlt	r9, r4
 800c562:	4630      	mov	r0, r6
 800c564:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c568:	bfba      	itte	lt
 800c56a:	461c      	movlt	r4, r3
 800c56c:	2501      	movlt	r5, #1
 800c56e:	2500      	movge	r5, #0
 800c570:	f7ff fcfe 	bl	800bf70 <_Balloc>
 800c574:	4602      	mov	r2, r0
 800c576:	b918      	cbnz	r0, 800c580 <__mdiff+0x60>
 800c578:	4b31      	ldr	r3, [pc, #196]	@ (800c640 <__mdiff+0x120>)
 800c57a:	f240 2145 	movw	r1, #581	@ 0x245
 800c57e:	e7e3      	b.n	800c548 <__mdiff+0x28>
 800c580:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c584:	6926      	ldr	r6, [r4, #16]
 800c586:	60c5      	str	r5, [r0, #12]
 800c588:	f109 0310 	add.w	r3, r9, #16
 800c58c:	f109 0514 	add.w	r5, r9, #20
 800c590:	f104 0e14 	add.w	lr, r4, #20
 800c594:	f100 0b14 	add.w	fp, r0, #20
 800c598:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c59c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5a0:	9301      	str	r3, [sp, #4]
 800c5a2:	46d9      	mov	r9, fp
 800c5a4:	f04f 0c00 	mov.w	ip, #0
 800c5a8:	9b01      	ldr	r3, [sp, #4]
 800c5aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5b2:	9301      	str	r3, [sp, #4]
 800c5b4:	fa1f f38a 	uxth.w	r3, sl
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	b283      	uxth	r3, r0
 800c5bc:	1acb      	subs	r3, r1, r3
 800c5be:	0c00      	lsrs	r0, r0, #16
 800c5c0:	4463      	add	r3, ip
 800c5c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5d0:	4576      	cmp	r6, lr
 800c5d2:	f849 3b04 	str.w	r3, [r9], #4
 800c5d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5da:	d8e5      	bhi.n	800c5a8 <__mdiff+0x88>
 800c5dc:	1b33      	subs	r3, r6, r4
 800c5de:	3b15      	subs	r3, #21
 800c5e0:	f023 0303 	bic.w	r3, r3, #3
 800c5e4:	3415      	adds	r4, #21
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	42a6      	cmp	r6, r4
 800c5ea:	bf38      	it	cc
 800c5ec:	2304      	movcc	r3, #4
 800c5ee:	441d      	add	r5, r3
 800c5f0:	445b      	add	r3, fp
 800c5f2:	461e      	mov	r6, r3
 800c5f4:	462c      	mov	r4, r5
 800c5f6:	4544      	cmp	r4, r8
 800c5f8:	d30e      	bcc.n	800c618 <__mdiff+0xf8>
 800c5fa:	f108 0103 	add.w	r1, r8, #3
 800c5fe:	1b49      	subs	r1, r1, r5
 800c600:	f021 0103 	bic.w	r1, r1, #3
 800c604:	3d03      	subs	r5, #3
 800c606:	45a8      	cmp	r8, r5
 800c608:	bf38      	it	cc
 800c60a:	2100      	movcc	r1, #0
 800c60c:	440b      	add	r3, r1
 800c60e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c612:	b191      	cbz	r1, 800c63a <__mdiff+0x11a>
 800c614:	6117      	str	r7, [r2, #16]
 800c616:	e79d      	b.n	800c554 <__mdiff+0x34>
 800c618:	f854 1b04 	ldr.w	r1, [r4], #4
 800c61c:	46e6      	mov	lr, ip
 800c61e:	0c08      	lsrs	r0, r1, #16
 800c620:	fa1c fc81 	uxtah	ip, ip, r1
 800c624:	4471      	add	r1, lr
 800c626:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c62a:	b289      	uxth	r1, r1
 800c62c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c630:	f846 1b04 	str.w	r1, [r6], #4
 800c634:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c638:	e7dd      	b.n	800c5f6 <__mdiff+0xd6>
 800c63a:	3f01      	subs	r7, #1
 800c63c:	e7e7      	b.n	800c60e <__mdiff+0xee>
 800c63e:	bf00      	nop
 800c640:	0800ebc1 	.word	0x0800ebc1
 800c644:	0800ebd2 	.word	0x0800ebd2

0800c648 <__ulp>:
 800c648:	b082      	sub	sp, #8
 800c64a:	ed8d 0b00 	vstr	d0, [sp]
 800c64e:	9a01      	ldr	r2, [sp, #4]
 800c650:	4b0f      	ldr	r3, [pc, #60]	@ (800c690 <__ulp+0x48>)
 800c652:	4013      	ands	r3, r2
 800c654:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	dc08      	bgt.n	800c66e <__ulp+0x26>
 800c65c:	425b      	negs	r3, r3
 800c65e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c662:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c666:	da04      	bge.n	800c672 <__ulp+0x2a>
 800c668:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c66c:	4113      	asrs	r3, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	e008      	b.n	800c684 <__ulp+0x3c>
 800c672:	f1a2 0314 	sub.w	r3, r2, #20
 800c676:	2b1e      	cmp	r3, #30
 800c678:	bfda      	itte	le
 800c67a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c67e:	40da      	lsrle	r2, r3
 800c680:	2201      	movgt	r2, #1
 800c682:	2300      	movs	r3, #0
 800c684:	4619      	mov	r1, r3
 800c686:	4610      	mov	r0, r2
 800c688:	ec41 0b10 	vmov	d0, r0, r1
 800c68c:	b002      	add	sp, #8
 800c68e:	4770      	bx	lr
 800c690:	7ff00000 	.word	0x7ff00000

0800c694 <__b2d>:
 800c694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c698:	6906      	ldr	r6, [r0, #16]
 800c69a:	f100 0814 	add.w	r8, r0, #20
 800c69e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c6a2:	1f37      	subs	r7, r6, #4
 800c6a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	f7ff fd53 	bl	800c154 <__hi0bits>
 800c6ae:	f1c0 0320 	rsb	r3, r0, #32
 800c6b2:	280a      	cmp	r0, #10
 800c6b4:	600b      	str	r3, [r1, #0]
 800c6b6:	491b      	ldr	r1, [pc, #108]	@ (800c724 <__b2d+0x90>)
 800c6b8:	dc15      	bgt.n	800c6e6 <__b2d+0x52>
 800c6ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800c6be:	fa22 f30c 	lsr.w	r3, r2, ip
 800c6c2:	45b8      	cmp	r8, r7
 800c6c4:	ea43 0501 	orr.w	r5, r3, r1
 800c6c8:	bf34      	ite	cc
 800c6ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6ce:	2300      	movcs	r3, #0
 800c6d0:	3015      	adds	r0, #21
 800c6d2:	fa02 f000 	lsl.w	r0, r2, r0
 800c6d6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c6da:	4303      	orrs	r3, r0
 800c6dc:	461c      	mov	r4, r3
 800c6de:	ec45 4b10 	vmov	d0, r4, r5
 800c6e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6e6:	45b8      	cmp	r8, r7
 800c6e8:	bf3a      	itte	cc
 800c6ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c6ee:	f1a6 0708 	subcc.w	r7, r6, #8
 800c6f2:	2300      	movcs	r3, #0
 800c6f4:	380b      	subs	r0, #11
 800c6f6:	d012      	beq.n	800c71e <__b2d+0x8a>
 800c6f8:	f1c0 0120 	rsb	r1, r0, #32
 800c6fc:	fa23 f401 	lsr.w	r4, r3, r1
 800c700:	4082      	lsls	r2, r0
 800c702:	4322      	orrs	r2, r4
 800c704:	4547      	cmp	r7, r8
 800c706:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c70a:	bf8c      	ite	hi
 800c70c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c710:	2200      	movls	r2, #0
 800c712:	4083      	lsls	r3, r0
 800c714:	40ca      	lsrs	r2, r1
 800c716:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c71a:	4313      	orrs	r3, r2
 800c71c:	e7de      	b.n	800c6dc <__b2d+0x48>
 800c71e:	ea42 0501 	orr.w	r5, r2, r1
 800c722:	e7db      	b.n	800c6dc <__b2d+0x48>
 800c724:	3ff00000 	.word	0x3ff00000

0800c728 <__d2b>:
 800c728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c72c:	460f      	mov	r7, r1
 800c72e:	2101      	movs	r1, #1
 800c730:	ec59 8b10 	vmov	r8, r9, d0
 800c734:	4616      	mov	r6, r2
 800c736:	f7ff fc1b 	bl	800bf70 <_Balloc>
 800c73a:	4604      	mov	r4, r0
 800c73c:	b930      	cbnz	r0, 800c74c <__d2b+0x24>
 800c73e:	4602      	mov	r2, r0
 800c740:	4b23      	ldr	r3, [pc, #140]	@ (800c7d0 <__d2b+0xa8>)
 800c742:	4824      	ldr	r0, [pc, #144]	@ (800c7d4 <__d2b+0xac>)
 800c744:	f240 310f 	movw	r1, #783	@ 0x30f
 800c748:	f001 fb5e 	bl	800de08 <__assert_func>
 800c74c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c754:	b10d      	cbz	r5, 800c75a <__d2b+0x32>
 800c756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c75a:	9301      	str	r3, [sp, #4]
 800c75c:	f1b8 0300 	subs.w	r3, r8, #0
 800c760:	d023      	beq.n	800c7aa <__d2b+0x82>
 800c762:	4668      	mov	r0, sp
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	f7ff fd14 	bl	800c192 <__lo0bits>
 800c76a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c76e:	b1d0      	cbz	r0, 800c7a6 <__d2b+0x7e>
 800c770:	f1c0 0320 	rsb	r3, r0, #32
 800c774:	fa02 f303 	lsl.w	r3, r2, r3
 800c778:	430b      	orrs	r3, r1
 800c77a:	40c2      	lsrs	r2, r0
 800c77c:	6163      	str	r3, [r4, #20]
 800c77e:	9201      	str	r2, [sp, #4]
 800c780:	9b01      	ldr	r3, [sp, #4]
 800c782:	61a3      	str	r3, [r4, #24]
 800c784:	2b00      	cmp	r3, #0
 800c786:	bf0c      	ite	eq
 800c788:	2201      	moveq	r2, #1
 800c78a:	2202      	movne	r2, #2
 800c78c:	6122      	str	r2, [r4, #16]
 800c78e:	b1a5      	cbz	r5, 800c7ba <__d2b+0x92>
 800c790:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c794:	4405      	add	r5, r0
 800c796:	603d      	str	r5, [r7, #0]
 800c798:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c79c:	6030      	str	r0, [r6, #0]
 800c79e:	4620      	mov	r0, r4
 800c7a0:	b003      	add	sp, #12
 800c7a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7a6:	6161      	str	r1, [r4, #20]
 800c7a8:	e7ea      	b.n	800c780 <__d2b+0x58>
 800c7aa:	a801      	add	r0, sp, #4
 800c7ac:	f7ff fcf1 	bl	800c192 <__lo0bits>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	6163      	str	r3, [r4, #20]
 800c7b4:	3020      	adds	r0, #32
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	e7e8      	b.n	800c78c <__d2b+0x64>
 800c7ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c7c2:	6038      	str	r0, [r7, #0]
 800c7c4:	6918      	ldr	r0, [r3, #16]
 800c7c6:	f7ff fcc5 	bl	800c154 <__hi0bits>
 800c7ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7ce:	e7e5      	b.n	800c79c <__d2b+0x74>
 800c7d0:	0800ebc1 	.word	0x0800ebc1
 800c7d4:	0800ebd2 	.word	0x0800ebd2

0800c7d8 <__ratio>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	e9cd 1000 	strd	r1, r0, [sp]
 800c7e2:	a902      	add	r1, sp, #8
 800c7e4:	f7ff ff56 	bl	800c694 <__b2d>
 800c7e8:	9800      	ldr	r0, [sp, #0]
 800c7ea:	a903      	add	r1, sp, #12
 800c7ec:	ec55 4b10 	vmov	r4, r5, d0
 800c7f0:	f7ff ff50 	bl	800c694 <__b2d>
 800c7f4:	9b01      	ldr	r3, [sp, #4]
 800c7f6:	6919      	ldr	r1, [r3, #16]
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	1ac9      	subs	r1, r1, r3
 800c7fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	ec5b ab10 	vmov	sl, fp, d0
 800c808:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bfce      	itee	gt
 800c810:	462a      	movgt	r2, r5
 800c812:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c816:	465a      	movle	r2, fp
 800c818:	462f      	mov	r7, r5
 800c81a:	46d9      	mov	r9, fp
 800c81c:	bfcc      	ite	gt
 800c81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c822:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c826:	464b      	mov	r3, r9
 800c828:	4652      	mov	r2, sl
 800c82a:	4620      	mov	r0, r4
 800c82c:	4639      	mov	r1, r7
 800c82e:	f7f4 f80d 	bl	800084c <__aeabi_ddiv>
 800c832:	ec41 0b10 	vmov	d0, r0, r1
 800c836:	b005      	add	sp, #20
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c83c <__copybits>:
 800c83c:	3901      	subs	r1, #1
 800c83e:	b570      	push	{r4, r5, r6, lr}
 800c840:	1149      	asrs	r1, r1, #5
 800c842:	6914      	ldr	r4, [r2, #16]
 800c844:	3101      	adds	r1, #1
 800c846:	f102 0314 	add.w	r3, r2, #20
 800c84a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c84e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c852:	1f05      	subs	r5, r0, #4
 800c854:	42a3      	cmp	r3, r4
 800c856:	d30c      	bcc.n	800c872 <__copybits+0x36>
 800c858:	1aa3      	subs	r3, r4, r2
 800c85a:	3b11      	subs	r3, #17
 800c85c:	f023 0303 	bic.w	r3, r3, #3
 800c860:	3211      	adds	r2, #17
 800c862:	42a2      	cmp	r2, r4
 800c864:	bf88      	it	hi
 800c866:	2300      	movhi	r3, #0
 800c868:	4418      	add	r0, r3
 800c86a:	2300      	movs	r3, #0
 800c86c:	4288      	cmp	r0, r1
 800c86e:	d305      	bcc.n	800c87c <__copybits+0x40>
 800c870:	bd70      	pop	{r4, r5, r6, pc}
 800c872:	f853 6b04 	ldr.w	r6, [r3], #4
 800c876:	f845 6f04 	str.w	r6, [r5, #4]!
 800c87a:	e7eb      	b.n	800c854 <__copybits+0x18>
 800c87c:	f840 3b04 	str.w	r3, [r0], #4
 800c880:	e7f4      	b.n	800c86c <__copybits+0x30>

0800c882 <__any_on>:
 800c882:	f100 0214 	add.w	r2, r0, #20
 800c886:	6900      	ldr	r0, [r0, #16]
 800c888:	114b      	asrs	r3, r1, #5
 800c88a:	4298      	cmp	r0, r3
 800c88c:	b510      	push	{r4, lr}
 800c88e:	db11      	blt.n	800c8b4 <__any_on+0x32>
 800c890:	dd0a      	ble.n	800c8a8 <__any_on+0x26>
 800c892:	f011 011f 	ands.w	r1, r1, #31
 800c896:	d007      	beq.n	800c8a8 <__any_on+0x26>
 800c898:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c89c:	fa24 f001 	lsr.w	r0, r4, r1
 800c8a0:	fa00 f101 	lsl.w	r1, r0, r1
 800c8a4:	428c      	cmp	r4, r1
 800c8a6:	d10b      	bne.n	800c8c0 <__any_on+0x3e>
 800c8a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d803      	bhi.n	800c8b8 <__any_on+0x36>
 800c8b0:	2000      	movs	r0, #0
 800c8b2:	bd10      	pop	{r4, pc}
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	e7f7      	b.n	800c8a8 <__any_on+0x26>
 800c8b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	d0f5      	beq.n	800c8ac <__any_on+0x2a>
 800c8c0:	2001      	movs	r0, #1
 800c8c2:	e7f6      	b.n	800c8b2 <__any_on+0x30>

0800c8c4 <sulp>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	4604      	mov	r4, r0
 800c8c8:	460d      	mov	r5, r1
 800c8ca:	ec45 4b10 	vmov	d0, r4, r5
 800c8ce:	4616      	mov	r6, r2
 800c8d0:	f7ff feba 	bl	800c648 <__ulp>
 800c8d4:	ec51 0b10 	vmov	r0, r1, d0
 800c8d8:	b17e      	cbz	r6, 800c8fa <sulp+0x36>
 800c8da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c8de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	dd09      	ble.n	800c8fa <sulp+0x36>
 800c8e6:	051b      	lsls	r3, r3, #20
 800c8e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c8ec:	2400      	movs	r4, #0
 800c8ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c8f2:	4622      	mov	r2, r4
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	f7f3 fe7f 	bl	80005f8 <__aeabi_dmul>
 800c8fa:	ec41 0b10 	vmov	d0, r0, r1
 800c8fe:	bd70      	pop	{r4, r5, r6, pc}

0800c900 <_strtod_l>:
 800c900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c904:	b09f      	sub	sp, #124	@ 0x7c
 800c906:	460c      	mov	r4, r1
 800c908:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c90a:	2200      	movs	r2, #0
 800c90c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c90e:	9005      	str	r0, [sp, #20]
 800c910:	f04f 0a00 	mov.w	sl, #0
 800c914:	f04f 0b00 	mov.w	fp, #0
 800c918:	460a      	mov	r2, r1
 800c91a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c91c:	7811      	ldrb	r1, [r2, #0]
 800c91e:	292b      	cmp	r1, #43	@ 0x2b
 800c920:	d04a      	beq.n	800c9b8 <_strtod_l+0xb8>
 800c922:	d838      	bhi.n	800c996 <_strtod_l+0x96>
 800c924:	290d      	cmp	r1, #13
 800c926:	d832      	bhi.n	800c98e <_strtod_l+0x8e>
 800c928:	2908      	cmp	r1, #8
 800c92a:	d832      	bhi.n	800c992 <_strtod_l+0x92>
 800c92c:	2900      	cmp	r1, #0
 800c92e:	d03b      	beq.n	800c9a8 <_strtod_l+0xa8>
 800c930:	2200      	movs	r2, #0
 800c932:	920e      	str	r2, [sp, #56]	@ 0x38
 800c934:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c936:	782a      	ldrb	r2, [r5, #0]
 800c938:	2a30      	cmp	r2, #48	@ 0x30
 800c93a:	f040 80b2 	bne.w	800caa2 <_strtod_l+0x1a2>
 800c93e:	786a      	ldrb	r2, [r5, #1]
 800c940:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c944:	2a58      	cmp	r2, #88	@ 0x58
 800c946:	d16e      	bne.n	800ca26 <_strtod_l+0x126>
 800c948:	9302      	str	r3, [sp, #8]
 800c94a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c94c:	9301      	str	r3, [sp, #4]
 800c94e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c950:	9300      	str	r3, [sp, #0]
 800c952:	4a8f      	ldr	r2, [pc, #572]	@ (800cb90 <_strtod_l+0x290>)
 800c954:	9805      	ldr	r0, [sp, #20]
 800c956:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c958:	a919      	add	r1, sp, #100	@ 0x64
 800c95a:	f001 faef 	bl	800df3c <__gethex>
 800c95e:	f010 060f 	ands.w	r6, r0, #15
 800c962:	4604      	mov	r4, r0
 800c964:	d005      	beq.n	800c972 <_strtod_l+0x72>
 800c966:	2e06      	cmp	r6, #6
 800c968:	d128      	bne.n	800c9bc <_strtod_l+0xbc>
 800c96a:	3501      	adds	r5, #1
 800c96c:	2300      	movs	r3, #0
 800c96e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c970:	930e      	str	r3, [sp, #56]	@ 0x38
 800c972:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c974:	2b00      	cmp	r3, #0
 800c976:	f040 858e 	bne.w	800d496 <_strtod_l+0xb96>
 800c97a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c97c:	b1cb      	cbz	r3, 800c9b2 <_strtod_l+0xb2>
 800c97e:	4652      	mov	r2, sl
 800c980:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c984:	ec43 2b10 	vmov	d0, r2, r3
 800c988:	b01f      	add	sp, #124	@ 0x7c
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98e:	2920      	cmp	r1, #32
 800c990:	d1ce      	bne.n	800c930 <_strtod_l+0x30>
 800c992:	3201      	adds	r2, #1
 800c994:	e7c1      	b.n	800c91a <_strtod_l+0x1a>
 800c996:	292d      	cmp	r1, #45	@ 0x2d
 800c998:	d1ca      	bne.n	800c930 <_strtod_l+0x30>
 800c99a:	2101      	movs	r1, #1
 800c99c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c99e:	1c51      	adds	r1, r2, #1
 800c9a0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c9a2:	7852      	ldrb	r2, [r2, #1]
 800c9a4:	2a00      	cmp	r2, #0
 800c9a6:	d1c5      	bne.n	800c934 <_strtod_l+0x34>
 800c9a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9aa:	9419      	str	r4, [sp, #100]	@ 0x64
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f040 8570 	bne.w	800d492 <_strtod_l+0xb92>
 800c9b2:	4652      	mov	r2, sl
 800c9b4:	465b      	mov	r3, fp
 800c9b6:	e7e5      	b.n	800c984 <_strtod_l+0x84>
 800c9b8:	2100      	movs	r1, #0
 800c9ba:	e7ef      	b.n	800c99c <_strtod_l+0x9c>
 800c9bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c9be:	b13a      	cbz	r2, 800c9d0 <_strtod_l+0xd0>
 800c9c0:	2135      	movs	r1, #53	@ 0x35
 800c9c2:	a81c      	add	r0, sp, #112	@ 0x70
 800c9c4:	f7ff ff3a 	bl	800c83c <__copybits>
 800c9c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c9ca:	9805      	ldr	r0, [sp, #20]
 800c9cc:	f7ff fb10 	bl	800bff0 <_Bfree>
 800c9d0:	3e01      	subs	r6, #1
 800c9d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c9d4:	2e04      	cmp	r6, #4
 800c9d6:	d806      	bhi.n	800c9e6 <_strtod_l+0xe6>
 800c9d8:	e8df f006 	tbb	[pc, r6]
 800c9dc:	201d0314 	.word	0x201d0314
 800c9e0:	14          	.byte	0x14
 800c9e1:	00          	.byte	0x00
 800c9e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c9e6:	05e1      	lsls	r1, r4, #23
 800c9e8:	bf48      	it	mi
 800c9ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c9ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c9f2:	0d1b      	lsrs	r3, r3, #20
 800c9f4:	051b      	lsls	r3, r3, #20
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1bb      	bne.n	800c972 <_strtod_l+0x72>
 800c9fa:	f7fe fb1f 	bl	800b03c <__errno>
 800c9fe:	2322      	movs	r3, #34	@ 0x22
 800ca00:	6003      	str	r3, [r0, #0]
 800ca02:	e7b6      	b.n	800c972 <_strtod_l+0x72>
 800ca04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ca08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ca0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ca10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca14:	e7e7      	b.n	800c9e6 <_strtod_l+0xe6>
 800ca16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cb98 <_strtod_l+0x298>
 800ca1a:	e7e4      	b.n	800c9e6 <_strtod_l+0xe6>
 800ca1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ca20:	f04f 3aff 	mov.w	sl, #4294967295
 800ca24:	e7df      	b.n	800c9e6 <_strtod_l+0xe6>
 800ca26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca2c:	785b      	ldrb	r3, [r3, #1]
 800ca2e:	2b30      	cmp	r3, #48	@ 0x30
 800ca30:	d0f9      	beq.n	800ca26 <_strtod_l+0x126>
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d09d      	beq.n	800c972 <_strtod_l+0x72>
 800ca36:	2301      	movs	r3, #1
 800ca38:	2700      	movs	r7, #0
 800ca3a:	9308      	str	r3, [sp, #32]
 800ca3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca3e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca40:	970b      	str	r7, [sp, #44]	@ 0x2c
 800ca42:	46b9      	mov	r9, r7
 800ca44:	220a      	movs	r2, #10
 800ca46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ca48:	7805      	ldrb	r5, [r0, #0]
 800ca4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ca4e:	b2d9      	uxtb	r1, r3
 800ca50:	2909      	cmp	r1, #9
 800ca52:	d928      	bls.n	800caa6 <_strtod_l+0x1a6>
 800ca54:	494f      	ldr	r1, [pc, #316]	@ (800cb94 <_strtod_l+0x294>)
 800ca56:	2201      	movs	r2, #1
 800ca58:	f001 f9ac 	bl	800ddb4 <strncmp>
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	d032      	beq.n	800cac6 <_strtod_l+0x1c6>
 800ca60:	2000      	movs	r0, #0
 800ca62:	462a      	mov	r2, r5
 800ca64:	900a      	str	r0, [sp, #40]	@ 0x28
 800ca66:	464d      	mov	r5, r9
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2a65      	cmp	r2, #101	@ 0x65
 800ca6c:	d001      	beq.n	800ca72 <_strtod_l+0x172>
 800ca6e:	2a45      	cmp	r2, #69	@ 0x45
 800ca70:	d114      	bne.n	800ca9c <_strtod_l+0x19c>
 800ca72:	b91d      	cbnz	r5, 800ca7c <_strtod_l+0x17c>
 800ca74:	9a08      	ldr	r2, [sp, #32]
 800ca76:	4302      	orrs	r2, r0
 800ca78:	d096      	beq.n	800c9a8 <_strtod_l+0xa8>
 800ca7a:	2500      	movs	r5, #0
 800ca7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca7e:	1c62      	adds	r2, r4, #1
 800ca80:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca82:	7862      	ldrb	r2, [r4, #1]
 800ca84:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca86:	d07a      	beq.n	800cb7e <_strtod_l+0x27e>
 800ca88:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca8a:	d07e      	beq.n	800cb8a <_strtod_l+0x28a>
 800ca8c:	f04f 0c00 	mov.w	ip, #0
 800ca90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca94:	2909      	cmp	r1, #9
 800ca96:	f240 8085 	bls.w	800cba4 <_strtod_l+0x2a4>
 800ca9a:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca9c:	f04f 0800 	mov.w	r8, #0
 800caa0:	e0a5      	b.n	800cbee <_strtod_l+0x2ee>
 800caa2:	2300      	movs	r3, #0
 800caa4:	e7c8      	b.n	800ca38 <_strtod_l+0x138>
 800caa6:	f1b9 0f08 	cmp.w	r9, #8
 800caaa:	bfd8      	it	le
 800caac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800caae:	f100 0001 	add.w	r0, r0, #1
 800cab2:	bfda      	itte	le
 800cab4:	fb02 3301 	mlale	r3, r2, r1, r3
 800cab8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800caba:	fb02 3707 	mlagt	r7, r2, r7, r3
 800cabe:	f109 0901 	add.w	r9, r9, #1
 800cac2:	9019      	str	r0, [sp, #100]	@ 0x64
 800cac4:	e7bf      	b.n	800ca46 <_strtod_l+0x146>
 800cac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cac8:	1c5a      	adds	r2, r3, #1
 800caca:	9219      	str	r2, [sp, #100]	@ 0x64
 800cacc:	785a      	ldrb	r2, [r3, #1]
 800cace:	f1b9 0f00 	cmp.w	r9, #0
 800cad2:	d03b      	beq.n	800cb4c <_strtod_l+0x24c>
 800cad4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cad6:	464d      	mov	r5, r9
 800cad8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cadc:	2b09      	cmp	r3, #9
 800cade:	d912      	bls.n	800cb06 <_strtod_l+0x206>
 800cae0:	2301      	movs	r3, #1
 800cae2:	e7c2      	b.n	800ca6a <_strtod_l+0x16a>
 800cae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cae6:	1c5a      	adds	r2, r3, #1
 800cae8:	9219      	str	r2, [sp, #100]	@ 0x64
 800caea:	785a      	ldrb	r2, [r3, #1]
 800caec:	3001      	adds	r0, #1
 800caee:	2a30      	cmp	r2, #48	@ 0x30
 800caf0:	d0f8      	beq.n	800cae4 <_strtod_l+0x1e4>
 800caf2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800caf6:	2b08      	cmp	r3, #8
 800caf8:	f200 84d2 	bhi.w	800d4a0 <_strtod_l+0xba0>
 800cafc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cafe:	900a      	str	r0, [sp, #40]	@ 0x28
 800cb00:	2000      	movs	r0, #0
 800cb02:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb04:	4605      	mov	r5, r0
 800cb06:	3a30      	subs	r2, #48	@ 0x30
 800cb08:	f100 0301 	add.w	r3, r0, #1
 800cb0c:	d018      	beq.n	800cb40 <_strtod_l+0x240>
 800cb0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cb10:	4419      	add	r1, r3
 800cb12:	910a      	str	r1, [sp, #40]	@ 0x28
 800cb14:	462e      	mov	r6, r5
 800cb16:	f04f 0e0a 	mov.w	lr, #10
 800cb1a:	1c71      	adds	r1, r6, #1
 800cb1c:	eba1 0c05 	sub.w	ip, r1, r5
 800cb20:	4563      	cmp	r3, ip
 800cb22:	dc15      	bgt.n	800cb50 <_strtod_l+0x250>
 800cb24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cb28:	182b      	adds	r3, r5, r0
 800cb2a:	2b08      	cmp	r3, #8
 800cb2c:	f105 0501 	add.w	r5, r5, #1
 800cb30:	4405      	add	r5, r0
 800cb32:	dc1a      	bgt.n	800cb6a <_strtod_l+0x26a>
 800cb34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb36:	230a      	movs	r3, #10
 800cb38:	fb03 2301 	mla	r3, r3, r1, r2
 800cb3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb42:	1c51      	adds	r1, r2, #1
 800cb44:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb46:	7852      	ldrb	r2, [r2, #1]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	e7c5      	b.n	800cad8 <_strtod_l+0x1d8>
 800cb4c:	4648      	mov	r0, r9
 800cb4e:	e7ce      	b.n	800caee <_strtod_l+0x1ee>
 800cb50:	2e08      	cmp	r6, #8
 800cb52:	dc05      	bgt.n	800cb60 <_strtod_l+0x260>
 800cb54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cb56:	fb0e f606 	mul.w	r6, lr, r6
 800cb5a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	e7dc      	b.n	800cb1a <_strtod_l+0x21a>
 800cb60:	2910      	cmp	r1, #16
 800cb62:	bfd8      	it	le
 800cb64:	fb0e f707 	mulle.w	r7, lr, r7
 800cb68:	e7f8      	b.n	800cb5c <_strtod_l+0x25c>
 800cb6a:	2b0f      	cmp	r3, #15
 800cb6c:	bfdc      	itt	le
 800cb6e:	230a      	movle	r3, #10
 800cb70:	fb03 2707 	mlale	r7, r3, r7, r2
 800cb74:	e7e3      	b.n	800cb3e <_strtod_l+0x23e>
 800cb76:	2300      	movs	r3, #0
 800cb78:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e77a      	b.n	800ca74 <_strtod_l+0x174>
 800cb7e:	f04f 0c00 	mov.w	ip, #0
 800cb82:	1ca2      	adds	r2, r4, #2
 800cb84:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb86:	78a2      	ldrb	r2, [r4, #2]
 800cb88:	e782      	b.n	800ca90 <_strtod_l+0x190>
 800cb8a:	f04f 0c01 	mov.w	ip, #1
 800cb8e:	e7f8      	b.n	800cb82 <_strtod_l+0x282>
 800cb90:	0800edf4 	.word	0x0800edf4
 800cb94:	0800ec2b 	.word	0x0800ec2b
 800cb98:	7ff00000 	.word	0x7ff00000
 800cb9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb9e:	1c51      	adds	r1, r2, #1
 800cba0:	9119      	str	r1, [sp, #100]	@ 0x64
 800cba2:	7852      	ldrb	r2, [r2, #1]
 800cba4:	2a30      	cmp	r2, #48	@ 0x30
 800cba6:	d0f9      	beq.n	800cb9c <_strtod_l+0x29c>
 800cba8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cbac:	2908      	cmp	r1, #8
 800cbae:	f63f af75 	bhi.w	800ca9c <_strtod_l+0x19c>
 800cbb2:	3a30      	subs	r2, #48	@ 0x30
 800cbb4:	9209      	str	r2, [sp, #36]	@ 0x24
 800cbb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbb8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cbba:	f04f 080a 	mov.w	r8, #10
 800cbbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cbc0:	1c56      	adds	r6, r2, #1
 800cbc2:	9619      	str	r6, [sp, #100]	@ 0x64
 800cbc4:	7852      	ldrb	r2, [r2, #1]
 800cbc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cbca:	f1be 0f09 	cmp.w	lr, #9
 800cbce:	d939      	bls.n	800cc44 <_strtod_l+0x344>
 800cbd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cbd2:	1a76      	subs	r6, r6, r1
 800cbd4:	2e08      	cmp	r6, #8
 800cbd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cbda:	dc03      	bgt.n	800cbe4 <_strtod_l+0x2e4>
 800cbdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbde:	4588      	cmp	r8, r1
 800cbe0:	bfa8      	it	ge
 800cbe2:	4688      	movge	r8, r1
 800cbe4:	f1bc 0f00 	cmp.w	ip, #0
 800cbe8:	d001      	beq.n	800cbee <_strtod_l+0x2ee>
 800cbea:	f1c8 0800 	rsb	r8, r8, #0
 800cbee:	2d00      	cmp	r5, #0
 800cbf0:	d14e      	bne.n	800cc90 <_strtod_l+0x390>
 800cbf2:	9908      	ldr	r1, [sp, #32]
 800cbf4:	4308      	orrs	r0, r1
 800cbf6:	f47f aebc 	bne.w	800c972 <_strtod_l+0x72>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	f47f aed4 	bne.w	800c9a8 <_strtod_l+0xa8>
 800cc00:	2a69      	cmp	r2, #105	@ 0x69
 800cc02:	d028      	beq.n	800cc56 <_strtod_l+0x356>
 800cc04:	dc25      	bgt.n	800cc52 <_strtod_l+0x352>
 800cc06:	2a49      	cmp	r2, #73	@ 0x49
 800cc08:	d025      	beq.n	800cc56 <_strtod_l+0x356>
 800cc0a:	2a4e      	cmp	r2, #78	@ 0x4e
 800cc0c:	f47f aecc 	bne.w	800c9a8 <_strtod_l+0xa8>
 800cc10:	499a      	ldr	r1, [pc, #616]	@ (800ce7c <_strtod_l+0x57c>)
 800cc12:	a819      	add	r0, sp, #100	@ 0x64
 800cc14:	f001 fbb4 	bl	800e380 <__match>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	f43f aec5 	beq.w	800c9a8 <_strtod_l+0xa8>
 800cc1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b28      	cmp	r3, #40	@ 0x28
 800cc24:	d12e      	bne.n	800cc84 <_strtod_l+0x384>
 800cc26:	4996      	ldr	r1, [pc, #600]	@ (800ce80 <_strtod_l+0x580>)
 800cc28:	aa1c      	add	r2, sp, #112	@ 0x70
 800cc2a:	a819      	add	r0, sp, #100	@ 0x64
 800cc2c:	f001 fbbc 	bl	800e3a8 <__hexnan>
 800cc30:	2805      	cmp	r0, #5
 800cc32:	d127      	bne.n	800cc84 <_strtod_l+0x384>
 800cc34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cc36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cc3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cc3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cc42:	e696      	b.n	800c972 <_strtod_l+0x72>
 800cc44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cc46:	fb08 2101 	mla	r1, r8, r1, r2
 800cc4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cc4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc50:	e7b5      	b.n	800cbbe <_strtod_l+0x2be>
 800cc52:	2a6e      	cmp	r2, #110	@ 0x6e
 800cc54:	e7da      	b.n	800cc0c <_strtod_l+0x30c>
 800cc56:	498b      	ldr	r1, [pc, #556]	@ (800ce84 <_strtod_l+0x584>)
 800cc58:	a819      	add	r0, sp, #100	@ 0x64
 800cc5a:	f001 fb91 	bl	800e380 <__match>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f43f aea2 	beq.w	800c9a8 <_strtod_l+0xa8>
 800cc64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc66:	4988      	ldr	r1, [pc, #544]	@ (800ce88 <_strtod_l+0x588>)
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	a819      	add	r0, sp, #100	@ 0x64
 800cc6c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc6e:	f001 fb87 	bl	800e380 <__match>
 800cc72:	b910      	cbnz	r0, 800cc7a <_strtod_l+0x37a>
 800cc74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc76:	3301      	adds	r3, #1
 800cc78:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc7a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ce98 <_strtod_l+0x598>
 800cc7e:	f04f 0a00 	mov.w	sl, #0
 800cc82:	e676      	b.n	800c972 <_strtod_l+0x72>
 800cc84:	4881      	ldr	r0, [pc, #516]	@ (800ce8c <_strtod_l+0x58c>)
 800cc86:	f001 f8b7 	bl	800ddf8 <nan>
 800cc8a:	ec5b ab10 	vmov	sl, fp, d0
 800cc8e:	e670      	b.n	800c972 <_strtod_l+0x72>
 800cc90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc92:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cc94:	eba8 0303 	sub.w	r3, r8, r3
 800cc98:	f1b9 0f00 	cmp.w	r9, #0
 800cc9c:	bf08      	it	eq
 800cc9e:	46a9      	moveq	r9, r5
 800cca0:	2d10      	cmp	r5, #16
 800cca2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cca4:	462c      	mov	r4, r5
 800cca6:	bfa8      	it	ge
 800cca8:	2410      	movge	r4, #16
 800ccaa:	f7f3 fc2b 	bl	8000504 <__aeabi_ui2d>
 800ccae:	2d09      	cmp	r5, #9
 800ccb0:	4682      	mov	sl, r0
 800ccb2:	468b      	mov	fp, r1
 800ccb4:	dc13      	bgt.n	800ccde <_strtod_l+0x3de>
 800ccb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f43f ae5a 	beq.w	800c972 <_strtod_l+0x72>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc0:	dd78      	ble.n	800cdb4 <_strtod_l+0x4b4>
 800ccc2:	2b16      	cmp	r3, #22
 800ccc4:	dc5f      	bgt.n	800cd86 <_strtod_l+0x486>
 800ccc6:	4972      	ldr	r1, [pc, #456]	@ (800ce90 <_strtod_l+0x590>)
 800ccc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccd0:	4652      	mov	r2, sl
 800ccd2:	465b      	mov	r3, fp
 800ccd4:	f7f3 fc90 	bl	80005f8 <__aeabi_dmul>
 800ccd8:	4682      	mov	sl, r0
 800ccda:	468b      	mov	fp, r1
 800ccdc:	e649      	b.n	800c972 <_strtod_l+0x72>
 800ccde:	4b6c      	ldr	r3, [pc, #432]	@ (800ce90 <_strtod_l+0x590>)
 800cce0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cce4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cce8:	f7f3 fc86 	bl	80005f8 <__aeabi_dmul>
 800ccec:	4682      	mov	sl, r0
 800ccee:	4638      	mov	r0, r7
 800ccf0:	468b      	mov	fp, r1
 800ccf2:	f7f3 fc07 	bl	8000504 <__aeabi_ui2d>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4650      	mov	r0, sl
 800ccfc:	4659      	mov	r1, fp
 800ccfe:	f7f3 fac5 	bl	800028c <__adddf3>
 800cd02:	2d0f      	cmp	r5, #15
 800cd04:	4682      	mov	sl, r0
 800cd06:	468b      	mov	fp, r1
 800cd08:	ddd5      	ble.n	800ccb6 <_strtod_l+0x3b6>
 800cd0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd0c:	1b2c      	subs	r4, r5, r4
 800cd0e:	441c      	add	r4, r3
 800cd10:	2c00      	cmp	r4, #0
 800cd12:	f340 8093 	ble.w	800ce3c <_strtod_l+0x53c>
 800cd16:	f014 030f 	ands.w	r3, r4, #15
 800cd1a:	d00a      	beq.n	800cd32 <_strtod_l+0x432>
 800cd1c:	495c      	ldr	r1, [pc, #368]	@ (800ce90 <_strtod_l+0x590>)
 800cd1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd22:	4652      	mov	r2, sl
 800cd24:	465b      	mov	r3, fp
 800cd26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd2a:	f7f3 fc65 	bl	80005f8 <__aeabi_dmul>
 800cd2e:	4682      	mov	sl, r0
 800cd30:	468b      	mov	fp, r1
 800cd32:	f034 040f 	bics.w	r4, r4, #15
 800cd36:	d073      	beq.n	800ce20 <_strtod_l+0x520>
 800cd38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cd3c:	dd49      	ble.n	800cdd2 <_strtod_l+0x4d2>
 800cd3e:	2400      	movs	r4, #0
 800cd40:	46a0      	mov	r8, r4
 800cd42:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd44:	46a1      	mov	r9, r4
 800cd46:	9a05      	ldr	r2, [sp, #20]
 800cd48:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ce98 <_strtod_l+0x598>
 800cd4c:	2322      	movs	r3, #34	@ 0x22
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	f04f 0a00 	mov.w	sl, #0
 800cd54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f43f ae0b 	beq.w	800c972 <_strtod_l+0x72>
 800cd5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd5e:	9805      	ldr	r0, [sp, #20]
 800cd60:	f7ff f946 	bl	800bff0 <_Bfree>
 800cd64:	9805      	ldr	r0, [sp, #20]
 800cd66:	4649      	mov	r1, r9
 800cd68:	f7ff f942 	bl	800bff0 <_Bfree>
 800cd6c:	9805      	ldr	r0, [sp, #20]
 800cd6e:	4641      	mov	r1, r8
 800cd70:	f7ff f93e 	bl	800bff0 <_Bfree>
 800cd74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd76:	9805      	ldr	r0, [sp, #20]
 800cd78:	f7ff f93a 	bl	800bff0 <_Bfree>
 800cd7c:	9805      	ldr	r0, [sp, #20]
 800cd7e:	4621      	mov	r1, r4
 800cd80:	f7ff f936 	bl	800bff0 <_Bfree>
 800cd84:	e5f5      	b.n	800c972 <_strtod_l+0x72>
 800cd86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	dbbc      	blt.n	800cd0a <_strtod_l+0x40a>
 800cd90:	4c3f      	ldr	r4, [pc, #252]	@ (800ce90 <_strtod_l+0x590>)
 800cd92:	f1c5 050f 	rsb	r5, r5, #15
 800cd96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cda2:	f7f3 fc29 	bl	80005f8 <__aeabi_dmul>
 800cda6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cda8:	1b5d      	subs	r5, r3, r5
 800cdaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cdae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdb2:	e78f      	b.n	800ccd4 <_strtod_l+0x3d4>
 800cdb4:	3316      	adds	r3, #22
 800cdb6:	dba8      	blt.n	800cd0a <_strtod_l+0x40a>
 800cdb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdba:	eba3 0808 	sub.w	r8, r3, r8
 800cdbe:	4b34      	ldr	r3, [pc, #208]	@ (800ce90 <_strtod_l+0x590>)
 800cdc0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cdc4:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cdc8:	4650      	mov	r0, sl
 800cdca:	4659      	mov	r1, fp
 800cdcc:	f7f3 fd3e 	bl	800084c <__aeabi_ddiv>
 800cdd0:	e782      	b.n	800ccd8 <_strtod_l+0x3d8>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	4f2f      	ldr	r7, [pc, #188]	@ (800ce94 <_strtod_l+0x594>)
 800cdd6:	1124      	asrs	r4, r4, #4
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4659      	mov	r1, fp
 800cddc:	461e      	mov	r6, r3
 800cdde:	2c01      	cmp	r4, #1
 800cde0:	dc21      	bgt.n	800ce26 <_strtod_l+0x526>
 800cde2:	b10b      	cbz	r3, 800cde8 <_strtod_l+0x4e8>
 800cde4:	4682      	mov	sl, r0
 800cde6:	468b      	mov	fp, r1
 800cde8:	492a      	ldr	r1, [pc, #168]	@ (800ce94 <_strtod_l+0x594>)
 800cdea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cdee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cdf2:	4652      	mov	r2, sl
 800cdf4:	465b      	mov	r3, fp
 800cdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdfa:	f7f3 fbfd 	bl	80005f8 <__aeabi_dmul>
 800cdfe:	4b26      	ldr	r3, [pc, #152]	@ (800ce98 <_strtod_l+0x598>)
 800ce00:	460a      	mov	r2, r1
 800ce02:	400b      	ands	r3, r1
 800ce04:	4925      	ldr	r1, [pc, #148]	@ (800ce9c <_strtod_l+0x59c>)
 800ce06:	428b      	cmp	r3, r1
 800ce08:	4682      	mov	sl, r0
 800ce0a:	d898      	bhi.n	800cd3e <_strtod_l+0x43e>
 800ce0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ce10:	428b      	cmp	r3, r1
 800ce12:	bf86      	itte	hi
 800ce14:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cea0 <_strtod_l+0x5a0>
 800ce18:	f04f 3aff 	movhi.w	sl, #4294967295
 800ce1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ce20:	2300      	movs	r3, #0
 800ce22:	9308      	str	r3, [sp, #32]
 800ce24:	e076      	b.n	800cf14 <_strtod_l+0x614>
 800ce26:	07e2      	lsls	r2, r4, #31
 800ce28:	d504      	bpl.n	800ce34 <_strtod_l+0x534>
 800ce2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce2e:	f7f3 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ce32:	2301      	movs	r3, #1
 800ce34:	3601      	adds	r6, #1
 800ce36:	1064      	asrs	r4, r4, #1
 800ce38:	3708      	adds	r7, #8
 800ce3a:	e7d0      	b.n	800cdde <_strtod_l+0x4de>
 800ce3c:	d0f0      	beq.n	800ce20 <_strtod_l+0x520>
 800ce3e:	4264      	negs	r4, r4
 800ce40:	f014 020f 	ands.w	r2, r4, #15
 800ce44:	d00a      	beq.n	800ce5c <_strtod_l+0x55c>
 800ce46:	4b12      	ldr	r3, [pc, #72]	@ (800ce90 <_strtod_l+0x590>)
 800ce48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce4c:	4650      	mov	r0, sl
 800ce4e:	4659      	mov	r1, fp
 800ce50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce54:	f7f3 fcfa 	bl	800084c <__aeabi_ddiv>
 800ce58:	4682      	mov	sl, r0
 800ce5a:	468b      	mov	fp, r1
 800ce5c:	1124      	asrs	r4, r4, #4
 800ce5e:	d0df      	beq.n	800ce20 <_strtod_l+0x520>
 800ce60:	2c1f      	cmp	r4, #31
 800ce62:	dd1f      	ble.n	800cea4 <_strtod_l+0x5a4>
 800ce64:	2400      	movs	r4, #0
 800ce66:	46a0      	mov	r8, r4
 800ce68:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce6a:	46a1      	mov	r9, r4
 800ce6c:	9a05      	ldr	r2, [sp, #20]
 800ce6e:	2322      	movs	r3, #34	@ 0x22
 800ce70:	f04f 0a00 	mov.w	sl, #0
 800ce74:	f04f 0b00 	mov.w	fp, #0
 800ce78:	6013      	str	r3, [r2, #0]
 800ce7a:	e76b      	b.n	800cd54 <_strtod_l+0x454>
 800ce7c:	0800eb19 	.word	0x0800eb19
 800ce80:	0800ede0 	.word	0x0800ede0
 800ce84:	0800eb11 	.word	0x0800eb11
 800ce88:	0800eb48 	.word	0x0800eb48
 800ce8c:	0800ec81 	.word	0x0800ec81
 800ce90:	0800ed18 	.word	0x0800ed18
 800ce94:	0800ecf0 	.word	0x0800ecf0
 800ce98:	7ff00000 	.word	0x7ff00000
 800ce9c:	7ca00000 	.word	0x7ca00000
 800cea0:	7fefffff 	.word	0x7fefffff
 800cea4:	f014 0310 	ands.w	r3, r4, #16
 800cea8:	bf18      	it	ne
 800ceaa:	236a      	movne	r3, #106	@ 0x6a
 800ceac:	4ea9      	ldr	r6, [pc, #676]	@ (800d154 <_strtod_l+0x854>)
 800ceae:	9308      	str	r3, [sp, #32]
 800ceb0:	4650      	mov	r0, sl
 800ceb2:	4659      	mov	r1, fp
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	07e7      	lsls	r7, r4, #31
 800ceb8:	d504      	bpl.n	800cec4 <_strtod_l+0x5c4>
 800ceba:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cebe:	f7f3 fb9b 	bl	80005f8 <__aeabi_dmul>
 800cec2:	2301      	movs	r3, #1
 800cec4:	1064      	asrs	r4, r4, #1
 800cec6:	f106 0608 	add.w	r6, r6, #8
 800ceca:	d1f4      	bne.n	800ceb6 <_strtod_l+0x5b6>
 800cecc:	b10b      	cbz	r3, 800ced2 <_strtod_l+0x5d2>
 800cece:	4682      	mov	sl, r0
 800ced0:	468b      	mov	fp, r1
 800ced2:	9b08      	ldr	r3, [sp, #32]
 800ced4:	b1b3      	cbz	r3, 800cf04 <_strtod_l+0x604>
 800ced6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ceda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cede:	2b00      	cmp	r3, #0
 800cee0:	4659      	mov	r1, fp
 800cee2:	dd0f      	ble.n	800cf04 <_strtod_l+0x604>
 800cee4:	2b1f      	cmp	r3, #31
 800cee6:	dd56      	ble.n	800cf96 <_strtod_l+0x696>
 800cee8:	2b34      	cmp	r3, #52	@ 0x34
 800ceea:	bfde      	ittt	le
 800ceec:	f04f 33ff 	movle.w	r3, #4294967295
 800cef0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cef4:	4093      	lslle	r3, r2
 800cef6:	f04f 0a00 	mov.w	sl, #0
 800cefa:	bfcc      	ite	gt
 800cefc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cf00:	ea03 0b01 	andle.w	fp, r3, r1
 800cf04:	2200      	movs	r2, #0
 800cf06:	2300      	movs	r3, #0
 800cf08:	4650      	mov	r0, sl
 800cf0a:	4659      	mov	r1, fp
 800cf0c:	f7f3 fddc 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d1a7      	bne.n	800ce64 <_strtod_l+0x564>
 800cf14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cf1a:	9805      	ldr	r0, [sp, #20]
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	464a      	mov	r2, r9
 800cf20:	f7ff f8ce 	bl	800c0c0 <__s2b>
 800cf24:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f43f af09 	beq.w	800cd3e <_strtod_l+0x43e>
 800cf2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf30:	2a00      	cmp	r2, #0
 800cf32:	eba3 0308 	sub.w	r3, r3, r8
 800cf36:	bfa8      	it	ge
 800cf38:	2300      	movge	r3, #0
 800cf3a:	9312      	str	r3, [sp, #72]	@ 0x48
 800cf3c:	2400      	movs	r4, #0
 800cf3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cf42:	9316      	str	r3, [sp, #88]	@ 0x58
 800cf44:	46a0      	mov	r8, r4
 800cf46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf48:	9805      	ldr	r0, [sp, #20]
 800cf4a:	6859      	ldr	r1, [r3, #4]
 800cf4c:	f7ff f810 	bl	800bf70 <_Balloc>
 800cf50:	4681      	mov	r9, r0
 800cf52:	2800      	cmp	r0, #0
 800cf54:	f43f aef7 	beq.w	800cd46 <_strtod_l+0x446>
 800cf58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf5a:	691a      	ldr	r2, [r3, #16]
 800cf5c:	3202      	adds	r2, #2
 800cf5e:	f103 010c 	add.w	r1, r3, #12
 800cf62:	0092      	lsls	r2, r2, #2
 800cf64:	300c      	adds	r0, #12
 800cf66:	f7fe f896 	bl	800b096 <memcpy>
 800cf6a:	ec4b ab10 	vmov	d0, sl, fp
 800cf6e:	9805      	ldr	r0, [sp, #20]
 800cf70:	aa1c      	add	r2, sp, #112	@ 0x70
 800cf72:	a91b      	add	r1, sp, #108	@ 0x6c
 800cf74:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf78:	f7ff fbd6 	bl	800c728 <__d2b>
 800cf7c:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	f43f aee1 	beq.w	800cd46 <_strtod_l+0x446>
 800cf84:	9805      	ldr	r0, [sp, #20]
 800cf86:	2101      	movs	r1, #1
 800cf88:	f7ff f930 	bl	800c1ec <__i2b>
 800cf8c:	4680      	mov	r8, r0
 800cf8e:	b948      	cbnz	r0, 800cfa4 <_strtod_l+0x6a4>
 800cf90:	f04f 0800 	mov.w	r8, #0
 800cf94:	e6d7      	b.n	800cd46 <_strtod_l+0x446>
 800cf96:	f04f 32ff 	mov.w	r2, #4294967295
 800cf9a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9e:	ea03 0a0a 	and.w	sl, r3, sl
 800cfa2:	e7af      	b.n	800cf04 <_strtod_l+0x604>
 800cfa4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cfa6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cfa8:	2d00      	cmp	r5, #0
 800cfaa:	bfab      	itete	ge
 800cfac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cfae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cfb0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cfb2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cfb4:	bfac      	ite	ge
 800cfb6:	18ef      	addge	r7, r5, r3
 800cfb8:	1b5e      	sublt	r6, r3, r5
 800cfba:	9b08      	ldr	r3, [sp, #32]
 800cfbc:	1aed      	subs	r5, r5, r3
 800cfbe:	4415      	add	r5, r2
 800cfc0:	4b65      	ldr	r3, [pc, #404]	@ (800d158 <_strtod_l+0x858>)
 800cfc2:	3d01      	subs	r5, #1
 800cfc4:	429d      	cmp	r5, r3
 800cfc6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cfca:	da50      	bge.n	800d06e <_strtod_l+0x76e>
 800cfcc:	1b5b      	subs	r3, r3, r5
 800cfce:	2b1f      	cmp	r3, #31
 800cfd0:	eba2 0203 	sub.w	r2, r2, r3
 800cfd4:	f04f 0101 	mov.w	r1, #1
 800cfd8:	dc3d      	bgt.n	800d056 <_strtod_l+0x756>
 800cfda:	fa01 f303 	lsl.w	r3, r1, r3
 800cfde:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	9310      	str	r3, [sp, #64]	@ 0x40
 800cfe4:	18bd      	adds	r5, r7, r2
 800cfe6:	9b08      	ldr	r3, [sp, #32]
 800cfe8:	42af      	cmp	r7, r5
 800cfea:	4416      	add	r6, r2
 800cfec:	441e      	add	r6, r3
 800cfee:	463b      	mov	r3, r7
 800cff0:	bfa8      	it	ge
 800cff2:	462b      	movge	r3, r5
 800cff4:	42b3      	cmp	r3, r6
 800cff6:	bfa8      	it	ge
 800cff8:	4633      	movge	r3, r6
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	bfc2      	ittt	gt
 800cffe:	1aed      	subgt	r5, r5, r3
 800d000:	1af6      	subgt	r6, r6, r3
 800d002:	1aff      	subgt	r7, r7, r3
 800d004:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d006:	2b00      	cmp	r3, #0
 800d008:	dd16      	ble.n	800d038 <_strtod_l+0x738>
 800d00a:	4641      	mov	r1, r8
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	461a      	mov	r2, r3
 800d010:	f7ff f9a4 	bl	800c35c <__pow5mult>
 800d014:	4680      	mov	r8, r0
 800d016:	2800      	cmp	r0, #0
 800d018:	d0ba      	beq.n	800cf90 <_strtod_l+0x690>
 800d01a:	4601      	mov	r1, r0
 800d01c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d01e:	9805      	ldr	r0, [sp, #20]
 800d020:	f7ff f8fa 	bl	800c218 <__multiply>
 800d024:	900a      	str	r0, [sp, #40]	@ 0x28
 800d026:	2800      	cmp	r0, #0
 800d028:	f43f ae8d 	beq.w	800cd46 <_strtod_l+0x446>
 800d02c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d02e:	9805      	ldr	r0, [sp, #20]
 800d030:	f7fe ffde 	bl	800bff0 <_Bfree>
 800d034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d036:	931a      	str	r3, [sp, #104]	@ 0x68
 800d038:	2d00      	cmp	r5, #0
 800d03a:	dc1d      	bgt.n	800d078 <_strtod_l+0x778>
 800d03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dd23      	ble.n	800d08a <_strtod_l+0x78a>
 800d042:	4649      	mov	r1, r9
 800d044:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d046:	9805      	ldr	r0, [sp, #20]
 800d048:	f7ff f988 	bl	800c35c <__pow5mult>
 800d04c:	4681      	mov	r9, r0
 800d04e:	b9e0      	cbnz	r0, 800d08a <_strtod_l+0x78a>
 800d050:	f04f 0900 	mov.w	r9, #0
 800d054:	e677      	b.n	800cd46 <_strtod_l+0x446>
 800d056:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d05a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d05e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d062:	35e2      	adds	r5, #226	@ 0xe2
 800d064:	fa01 f305 	lsl.w	r3, r1, r5
 800d068:	9310      	str	r3, [sp, #64]	@ 0x40
 800d06a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d06c:	e7ba      	b.n	800cfe4 <_strtod_l+0x6e4>
 800d06e:	2300      	movs	r3, #0
 800d070:	9310      	str	r3, [sp, #64]	@ 0x40
 800d072:	2301      	movs	r3, #1
 800d074:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d076:	e7b5      	b.n	800cfe4 <_strtod_l+0x6e4>
 800d078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d07a:	9805      	ldr	r0, [sp, #20]
 800d07c:	462a      	mov	r2, r5
 800d07e:	f7ff f9c7 	bl	800c410 <__lshift>
 800d082:	901a      	str	r0, [sp, #104]	@ 0x68
 800d084:	2800      	cmp	r0, #0
 800d086:	d1d9      	bne.n	800d03c <_strtod_l+0x73c>
 800d088:	e65d      	b.n	800cd46 <_strtod_l+0x446>
 800d08a:	2e00      	cmp	r6, #0
 800d08c:	dd07      	ble.n	800d09e <_strtod_l+0x79e>
 800d08e:	4649      	mov	r1, r9
 800d090:	9805      	ldr	r0, [sp, #20]
 800d092:	4632      	mov	r2, r6
 800d094:	f7ff f9bc 	bl	800c410 <__lshift>
 800d098:	4681      	mov	r9, r0
 800d09a:	2800      	cmp	r0, #0
 800d09c:	d0d8      	beq.n	800d050 <_strtod_l+0x750>
 800d09e:	2f00      	cmp	r7, #0
 800d0a0:	dd08      	ble.n	800d0b4 <_strtod_l+0x7b4>
 800d0a2:	4641      	mov	r1, r8
 800d0a4:	9805      	ldr	r0, [sp, #20]
 800d0a6:	463a      	mov	r2, r7
 800d0a8:	f7ff f9b2 	bl	800c410 <__lshift>
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	2800      	cmp	r0, #0
 800d0b0:	f43f ae49 	beq.w	800cd46 <_strtod_l+0x446>
 800d0b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d0b6:	9805      	ldr	r0, [sp, #20]
 800d0b8:	464a      	mov	r2, r9
 800d0ba:	f7ff fa31 	bl	800c520 <__mdiff>
 800d0be:	4604      	mov	r4, r0
 800d0c0:	2800      	cmp	r0, #0
 800d0c2:	f43f ae40 	beq.w	800cd46 <_strtod_l+0x446>
 800d0c6:	68c3      	ldr	r3, [r0, #12]
 800d0c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60c3      	str	r3, [r0, #12]
 800d0ce:	4641      	mov	r1, r8
 800d0d0:	f7ff fa0a 	bl	800c4e8 <__mcmp>
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	da45      	bge.n	800d164 <_strtod_l+0x864>
 800d0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0da:	ea53 030a 	orrs.w	r3, r3, sl
 800d0de:	d16b      	bne.n	800d1b8 <_strtod_l+0x8b8>
 800d0e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d167      	bne.n	800d1b8 <_strtod_l+0x8b8>
 800d0e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0ec:	0d1b      	lsrs	r3, r3, #20
 800d0ee:	051b      	lsls	r3, r3, #20
 800d0f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0f4:	d960      	bls.n	800d1b8 <_strtod_l+0x8b8>
 800d0f6:	6963      	ldr	r3, [r4, #20]
 800d0f8:	b913      	cbnz	r3, 800d100 <_strtod_l+0x800>
 800d0fa:	6923      	ldr	r3, [r4, #16]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	dd5b      	ble.n	800d1b8 <_strtod_l+0x8b8>
 800d100:	4621      	mov	r1, r4
 800d102:	2201      	movs	r2, #1
 800d104:	9805      	ldr	r0, [sp, #20]
 800d106:	f7ff f983 	bl	800c410 <__lshift>
 800d10a:	4641      	mov	r1, r8
 800d10c:	4604      	mov	r4, r0
 800d10e:	f7ff f9eb 	bl	800c4e8 <__mcmp>
 800d112:	2800      	cmp	r0, #0
 800d114:	dd50      	ble.n	800d1b8 <_strtod_l+0x8b8>
 800d116:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d11a:	9a08      	ldr	r2, [sp, #32]
 800d11c:	0d1b      	lsrs	r3, r3, #20
 800d11e:	051b      	lsls	r3, r3, #20
 800d120:	2a00      	cmp	r2, #0
 800d122:	d06a      	beq.n	800d1fa <_strtod_l+0x8fa>
 800d124:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d128:	d867      	bhi.n	800d1fa <_strtod_l+0x8fa>
 800d12a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d12e:	f67f ae9d 	bls.w	800ce6c <_strtod_l+0x56c>
 800d132:	4b0a      	ldr	r3, [pc, #40]	@ (800d15c <_strtod_l+0x85c>)
 800d134:	4650      	mov	r0, sl
 800d136:	4659      	mov	r1, fp
 800d138:	2200      	movs	r2, #0
 800d13a:	f7f3 fa5d 	bl	80005f8 <__aeabi_dmul>
 800d13e:	4b08      	ldr	r3, [pc, #32]	@ (800d160 <_strtod_l+0x860>)
 800d140:	400b      	ands	r3, r1
 800d142:	4682      	mov	sl, r0
 800d144:	468b      	mov	fp, r1
 800d146:	2b00      	cmp	r3, #0
 800d148:	f47f ae08 	bne.w	800cd5c <_strtod_l+0x45c>
 800d14c:	9a05      	ldr	r2, [sp, #20]
 800d14e:	2322      	movs	r3, #34	@ 0x22
 800d150:	6013      	str	r3, [r2, #0]
 800d152:	e603      	b.n	800cd5c <_strtod_l+0x45c>
 800d154:	0800ee08 	.word	0x0800ee08
 800d158:	fffffc02 	.word	0xfffffc02
 800d15c:	39500000 	.word	0x39500000
 800d160:	7ff00000 	.word	0x7ff00000
 800d164:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d168:	d165      	bne.n	800d236 <_strtod_l+0x936>
 800d16a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d16c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d170:	b35a      	cbz	r2, 800d1ca <_strtod_l+0x8ca>
 800d172:	4a9f      	ldr	r2, [pc, #636]	@ (800d3f0 <_strtod_l+0xaf0>)
 800d174:	4293      	cmp	r3, r2
 800d176:	d12b      	bne.n	800d1d0 <_strtod_l+0x8d0>
 800d178:	9b08      	ldr	r3, [sp, #32]
 800d17a:	4651      	mov	r1, sl
 800d17c:	b303      	cbz	r3, 800d1c0 <_strtod_l+0x8c0>
 800d17e:	4b9d      	ldr	r3, [pc, #628]	@ (800d3f4 <_strtod_l+0xaf4>)
 800d180:	465a      	mov	r2, fp
 800d182:	4013      	ands	r3, r2
 800d184:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	d81b      	bhi.n	800d1c6 <_strtod_l+0x8c6>
 800d18e:	0d1b      	lsrs	r3, r3, #20
 800d190:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d194:	fa02 f303 	lsl.w	r3, r2, r3
 800d198:	4299      	cmp	r1, r3
 800d19a:	d119      	bne.n	800d1d0 <_strtod_l+0x8d0>
 800d19c:	4b96      	ldr	r3, [pc, #600]	@ (800d3f8 <_strtod_l+0xaf8>)
 800d19e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d102      	bne.n	800d1aa <_strtod_l+0x8aa>
 800d1a4:	3101      	adds	r1, #1
 800d1a6:	f43f adce 	beq.w	800cd46 <_strtod_l+0x446>
 800d1aa:	4b92      	ldr	r3, [pc, #584]	@ (800d3f4 <_strtod_l+0xaf4>)
 800d1ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1ae:	401a      	ands	r2, r3
 800d1b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d1b4:	f04f 0a00 	mov.w	sl, #0
 800d1b8:	9b08      	ldr	r3, [sp, #32]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1b9      	bne.n	800d132 <_strtod_l+0x832>
 800d1be:	e5cd      	b.n	800cd5c <_strtod_l+0x45c>
 800d1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c4:	e7e8      	b.n	800d198 <_strtod_l+0x898>
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	e7e6      	b.n	800d198 <_strtod_l+0x898>
 800d1ca:	ea53 030a 	orrs.w	r3, r3, sl
 800d1ce:	d0a2      	beq.n	800d116 <_strtod_l+0x816>
 800d1d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d1d2:	b1db      	cbz	r3, 800d20c <_strtod_l+0x90c>
 800d1d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1d6:	4213      	tst	r3, r2
 800d1d8:	d0ee      	beq.n	800d1b8 <_strtod_l+0x8b8>
 800d1da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1dc:	9a08      	ldr	r2, [sp, #32]
 800d1de:	4650      	mov	r0, sl
 800d1e0:	4659      	mov	r1, fp
 800d1e2:	b1bb      	cbz	r3, 800d214 <_strtod_l+0x914>
 800d1e4:	f7ff fb6e 	bl	800c8c4 <sulp>
 800d1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1ec:	ec53 2b10 	vmov	r2, r3, d0
 800d1f0:	f7f3 f84c 	bl	800028c <__adddf3>
 800d1f4:	4682      	mov	sl, r0
 800d1f6:	468b      	mov	fp, r1
 800d1f8:	e7de      	b.n	800d1b8 <_strtod_l+0x8b8>
 800d1fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d1fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d202:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d206:	f04f 3aff 	mov.w	sl, #4294967295
 800d20a:	e7d5      	b.n	800d1b8 <_strtod_l+0x8b8>
 800d20c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d20e:	ea13 0f0a 	tst.w	r3, sl
 800d212:	e7e1      	b.n	800d1d8 <_strtod_l+0x8d8>
 800d214:	f7ff fb56 	bl	800c8c4 <sulp>
 800d218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d21c:	ec53 2b10 	vmov	r2, r3, d0
 800d220:	f7f3 f832 	bl	8000288 <__aeabi_dsub>
 800d224:	2200      	movs	r2, #0
 800d226:	2300      	movs	r3, #0
 800d228:	4682      	mov	sl, r0
 800d22a:	468b      	mov	fp, r1
 800d22c:	f7f3 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d230:	2800      	cmp	r0, #0
 800d232:	d0c1      	beq.n	800d1b8 <_strtod_l+0x8b8>
 800d234:	e61a      	b.n	800ce6c <_strtod_l+0x56c>
 800d236:	4641      	mov	r1, r8
 800d238:	4620      	mov	r0, r4
 800d23a:	f7ff facd 	bl	800c7d8 <__ratio>
 800d23e:	ec57 6b10 	vmov	r6, r7, d0
 800d242:	2200      	movs	r2, #0
 800d244:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d248:	4630      	mov	r0, r6
 800d24a:	4639      	mov	r1, r7
 800d24c:	f7f3 fc50 	bl	8000af0 <__aeabi_dcmple>
 800d250:	2800      	cmp	r0, #0
 800d252:	d06f      	beq.n	800d334 <_strtod_l+0xa34>
 800d254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d17a      	bne.n	800d350 <_strtod_l+0xa50>
 800d25a:	f1ba 0f00 	cmp.w	sl, #0
 800d25e:	d158      	bne.n	800d312 <_strtod_l+0xa12>
 800d260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d266:	2b00      	cmp	r3, #0
 800d268:	d15a      	bne.n	800d320 <_strtod_l+0xa20>
 800d26a:	4b64      	ldr	r3, [pc, #400]	@ (800d3fc <_strtod_l+0xafc>)
 800d26c:	2200      	movs	r2, #0
 800d26e:	4630      	mov	r0, r6
 800d270:	4639      	mov	r1, r7
 800d272:	f7f3 fc33 	bl	8000adc <__aeabi_dcmplt>
 800d276:	2800      	cmp	r0, #0
 800d278:	d159      	bne.n	800d32e <_strtod_l+0xa2e>
 800d27a:	4630      	mov	r0, r6
 800d27c:	4639      	mov	r1, r7
 800d27e:	4b60      	ldr	r3, [pc, #384]	@ (800d400 <_strtod_l+0xb00>)
 800d280:	2200      	movs	r2, #0
 800d282:	f7f3 f9b9 	bl	80005f8 <__aeabi_dmul>
 800d286:	4606      	mov	r6, r0
 800d288:	460f      	mov	r7, r1
 800d28a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d28e:	9606      	str	r6, [sp, #24]
 800d290:	9307      	str	r3, [sp, #28]
 800d292:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d296:	4d57      	ldr	r5, [pc, #348]	@ (800d3f4 <_strtod_l+0xaf4>)
 800d298:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29e:	401d      	ands	r5, r3
 800d2a0:	4b58      	ldr	r3, [pc, #352]	@ (800d404 <_strtod_l+0xb04>)
 800d2a2:	429d      	cmp	r5, r3
 800d2a4:	f040 80b2 	bne.w	800d40c <_strtod_l+0xb0c>
 800d2a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d2ae:	ec4b ab10 	vmov	d0, sl, fp
 800d2b2:	f7ff f9c9 	bl	800c648 <__ulp>
 800d2b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d2ba:	ec51 0b10 	vmov	r0, r1, d0
 800d2be:	f7f3 f99b 	bl	80005f8 <__aeabi_dmul>
 800d2c2:	4652      	mov	r2, sl
 800d2c4:	465b      	mov	r3, fp
 800d2c6:	f7f2 ffe1 	bl	800028c <__adddf3>
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4949      	ldr	r1, [pc, #292]	@ (800d3f4 <_strtod_l+0xaf4>)
 800d2ce:	4a4e      	ldr	r2, [pc, #312]	@ (800d408 <_strtod_l+0xb08>)
 800d2d0:	4019      	ands	r1, r3
 800d2d2:	4291      	cmp	r1, r2
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	d942      	bls.n	800d35e <_strtod_l+0xa5e>
 800d2d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d2da:	4b47      	ldr	r3, [pc, #284]	@ (800d3f8 <_strtod_l+0xaf8>)
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d103      	bne.n	800d2e8 <_strtod_l+0x9e8>
 800d2e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	f43f ad2f 	beq.w	800cd46 <_strtod_l+0x446>
 800d2e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d3f8 <_strtod_l+0xaf8>
 800d2ec:	f04f 3aff 	mov.w	sl, #4294967295
 800d2f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2f2:	9805      	ldr	r0, [sp, #20]
 800d2f4:	f7fe fe7c 	bl	800bff0 <_Bfree>
 800d2f8:	9805      	ldr	r0, [sp, #20]
 800d2fa:	4649      	mov	r1, r9
 800d2fc:	f7fe fe78 	bl	800bff0 <_Bfree>
 800d300:	9805      	ldr	r0, [sp, #20]
 800d302:	4641      	mov	r1, r8
 800d304:	f7fe fe74 	bl	800bff0 <_Bfree>
 800d308:	9805      	ldr	r0, [sp, #20]
 800d30a:	4621      	mov	r1, r4
 800d30c:	f7fe fe70 	bl	800bff0 <_Bfree>
 800d310:	e619      	b.n	800cf46 <_strtod_l+0x646>
 800d312:	f1ba 0f01 	cmp.w	sl, #1
 800d316:	d103      	bne.n	800d320 <_strtod_l+0xa20>
 800d318:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	f43f ada6 	beq.w	800ce6c <_strtod_l+0x56c>
 800d320:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d3d0 <_strtod_l+0xad0>
 800d324:	4f35      	ldr	r7, [pc, #212]	@ (800d3fc <_strtod_l+0xafc>)
 800d326:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d32a:	2600      	movs	r6, #0
 800d32c:	e7b1      	b.n	800d292 <_strtod_l+0x992>
 800d32e:	4f34      	ldr	r7, [pc, #208]	@ (800d400 <_strtod_l+0xb00>)
 800d330:	2600      	movs	r6, #0
 800d332:	e7aa      	b.n	800d28a <_strtod_l+0x98a>
 800d334:	4b32      	ldr	r3, [pc, #200]	@ (800d400 <_strtod_l+0xb00>)
 800d336:	4630      	mov	r0, r6
 800d338:	4639      	mov	r1, r7
 800d33a:	2200      	movs	r2, #0
 800d33c:	f7f3 f95c 	bl	80005f8 <__aeabi_dmul>
 800d340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d342:	4606      	mov	r6, r0
 800d344:	460f      	mov	r7, r1
 800d346:	2b00      	cmp	r3, #0
 800d348:	d09f      	beq.n	800d28a <_strtod_l+0x98a>
 800d34a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d34e:	e7a0      	b.n	800d292 <_strtod_l+0x992>
 800d350:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d3d8 <_strtod_l+0xad8>
 800d354:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d358:	ec57 6b17 	vmov	r6, r7, d7
 800d35c:	e799      	b.n	800d292 <_strtod_l+0x992>
 800d35e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d362:	9b08      	ldr	r3, [sp, #32]
 800d364:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1c1      	bne.n	800d2f0 <_strtod_l+0x9f0>
 800d36c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d370:	0d1b      	lsrs	r3, r3, #20
 800d372:	051b      	lsls	r3, r3, #20
 800d374:	429d      	cmp	r5, r3
 800d376:	d1bb      	bne.n	800d2f0 <_strtod_l+0x9f0>
 800d378:	4630      	mov	r0, r6
 800d37a:	4639      	mov	r1, r7
 800d37c:	f7f3 fc9c 	bl	8000cb8 <__aeabi_d2lz>
 800d380:	f7f3 f90c 	bl	800059c <__aeabi_l2d>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4630      	mov	r0, r6
 800d38a:	4639      	mov	r1, r7
 800d38c:	f7f2 ff7c 	bl	8000288 <__aeabi_dsub>
 800d390:	460b      	mov	r3, r1
 800d392:	4602      	mov	r2, r0
 800d394:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d398:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d39e:	ea46 060a 	orr.w	r6, r6, sl
 800d3a2:	431e      	orrs	r6, r3
 800d3a4:	d06f      	beq.n	800d486 <_strtod_l+0xb86>
 800d3a6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d3e0 <_strtod_l+0xae0>)
 800d3a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ac:	f7f3 fb96 	bl	8000adc <__aeabi_dcmplt>
 800d3b0:	2800      	cmp	r0, #0
 800d3b2:	f47f acd3 	bne.w	800cd5c <_strtod_l+0x45c>
 800d3b6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d3e8 <_strtod_l+0xae8>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3c0:	f7f3 fbaa 	bl	8000b18 <__aeabi_dcmpgt>
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	d093      	beq.n	800d2f0 <_strtod_l+0x9f0>
 800d3c8:	e4c8      	b.n	800cd5c <_strtod_l+0x45c>
 800d3ca:	bf00      	nop
 800d3cc:	f3af 8000 	nop.w
 800d3d0:	00000000 	.word	0x00000000
 800d3d4:	bff00000 	.word	0xbff00000
 800d3d8:	00000000 	.word	0x00000000
 800d3dc:	3ff00000 	.word	0x3ff00000
 800d3e0:	94a03595 	.word	0x94a03595
 800d3e4:	3fdfffff 	.word	0x3fdfffff
 800d3e8:	35afe535 	.word	0x35afe535
 800d3ec:	3fe00000 	.word	0x3fe00000
 800d3f0:	000fffff 	.word	0x000fffff
 800d3f4:	7ff00000 	.word	0x7ff00000
 800d3f8:	7fefffff 	.word	0x7fefffff
 800d3fc:	3ff00000 	.word	0x3ff00000
 800d400:	3fe00000 	.word	0x3fe00000
 800d404:	7fe00000 	.word	0x7fe00000
 800d408:	7c9fffff 	.word	0x7c9fffff
 800d40c:	9b08      	ldr	r3, [sp, #32]
 800d40e:	b323      	cbz	r3, 800d45a <_strtod_l+0xb5a>
 800d410:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d414:	d821      	bhi.n	800d45a <_strtod_l+0xb5a>
 800d416:	a328      	add	r3, pc, #160	@ (adr r3, 800d4b8 <_strtod_l+0xbb8>)
 800d418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41c:	4630      	mov	r0, r6
 800d41e:	4639      	mov	r1, r7
 800d420:	f7f3 fb66 	bl	8000af0 <__aeabi_dcmple>
 800d424:	b1a0      	cbz	r0, 800d450 <_strtod_l+0xb50>
 800d426:	4639      	mov	r1, r7
 800d428:	4630      	mov	r0, r6
 800d42a:	f7f3 fbbd 	bl	8000ba8 <__aeabi_d2uiz>
 800d42e:	2801      	cmp	r0, #1
 800d430:	bf38      	it	cc
 800d432:	2001      	movcc	r0, #1
 800d434:	f7f3 f866 	bl	8000504 <__aeabi_ui2d>
 800d438:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d43a:	4606      	mov	r6, r0
 800d43c:	460f      	mov	r7, r1
 800d43e:	b9fb      	cbnz	r3, 800d480 <_strtod_l+0xb80>
 800d440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d444:	9014      	str	r0, [sp, #80]	@ 0x50
 800d446:	9315      	str	r3, [sp, #84]	@ 0x54
 800d448:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d44c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d450:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d452:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d456:	1b5b      	subs	r3, r3, r5
 800d458:	9311      	str	r3, [sp, #68]	@ 0x44
 800d45a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d45e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d462:	f7ff f8f1 	bl	800c648 <__ulp>
 800d466:	4650      	mov	r0, sl
 800d468:	ec53 2b10 	vmov	r2, r3, d0
 800d46c:	4659      	mov	r1, fp
 800d46e:	f7f3 f8c3 	bl	80005f8 <__aeabi_dmul>
 800d472:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d476:	f7f2 ff09 	bl	800028c <__adddf3>
 800d47a:	4682      	mov	sl, r0
 800d47c:	468b      	mov	fp, r1
 800d47e:	e770      	b.n	800d362 <_strtod_l+0xa62>
 800d480:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d484:	e7e0      	b.n	800d448 <_strtod_l+0xb48>
 800d486:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4c0 <_strtod_l+0xbc0>)
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	f7f3 fb26 	bl	8000adc <__aeabi_dcmplt>
 800d490:	e798      	b.n	800d3c4 <_strtod_l+0xac4>
 800d492:	2300      	movs	r3, #0
 800d494:	930e      	str	r3, [sp, #56]	@ 0x38
 800d496:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d498:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d49a:	6013      	str	r3, [r2, #0]
 800d49c:	f7ff ba6d 	b.w	800c97a <_strtod_l+0x7a>
 800d4a0:	2a65      	cmp	r2, #101	@ 0x65
 800d4a2:	f43f ab68 	beq.w	800cb76 <_strtod_l+0x276>
 800d4a6:	2a45      	cmp	r2, #69	@ 0x45
 800d4a8:	f43f ab65 	beq.w	800cb76 <_strtod_l+0x276>
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f7ff bba0 	b.w	800cbf2 <_strtod_l+0x2f2>
 800d4b2:	bf00      	nop
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	ffc00000 	.word	0xffc00000
 800d4bc:	41dfffff 	.word	0x41dfffff
 800d4c0:	94a03595 	.word	0x94a03595
 800d4c4:	3fcfffff 	.word	0x3fcfffff

0800d4c8 <_strtod_r>:
 800d4c8:	4b01      	ldr	r3, [pc, #4]	@ (800d4d0 <_strtod_r+0x8>)
 800d4ca:	f7ff ba19 	b.w	800c900 <_strtod_l>
 800d4ce:	bf00      	nop
 800d4d0:	20000070 	.word	0x20000070

0800d4d4 <_strtol_l.isra.0>:
 800d4d4:	2b24      	cmp	r3, #36	@ 0x24
 800d4d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4da:	4686      	mov	lr, r0
 800d4dc:	4690      	mov	r8, r2
 800d4de:	d801      	bhi.n	800d4e4 <_strtol_l.isra.0+0x10>
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d106      	bne.n	800d4f2 <_strtol_l.isra.0+0x1e>
 800d4e4:	f7fd fdaa 	bl	800b03c <__errno>
 800d4e8:	2316      	movs	r3, #22
 800d4ea:	6003      	str	r3, [r0, #0]
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f2:	4834      	ldr	r0, [pc, #208]	@ (800d5c4 <_strtol_l.isra.0+0xf0>)
 800d4f4:	460d      	mov	r5, r1
 800d4f6:	462a      	mov	r2, r5
 800d4f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4fc:	5d06      	ldrb	r6, [r0, r4]
 800d4fe:	f016 0608 	ands.w	r6, r6, #8
 800d502:	d1f8      	bne.n	800d4f6 <_strtol_l.isra.0+0x22>
 800d504:	2c2d      	cmp	r4, #45	@ 0x2d
 800d506:	d110      	bne.n	800d52a <_strtol_l.isra.0+0x56>
 800d508:	782c      	ldrb	r4, [r5, #0]
 800d50a:	2601      	movs	r6, #1
 800d50c:	1c95      	adds	r5, r2, #2
 800d50e:	f033 0210 	bics.w	r2, r3, #16
 800d512:	d115      	bne.n	800d540 <_strtol_l.isra.0+0x6c>
 800d514:	2c30      	cmp	r4, #48	@ 0x30
 800d516:	d10d      	bne.n	800d534 <_strtol_l.isra.0+0x60>
 800d518:	782a      	ldrb	r2, [r5, #0]
 800d51a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d51e:	2a58      	cmp	r2, #88	@ 0x58
 800d520:	d108      	bne.n	800d534 <_strtol_l.isra.0+0x60>
 800d522:	786c      	ldrb	r4, [r5, #1]
 800d524:	3502      	adds	r5, #2
 800d526:	2310      	movs	r3, #16
 800d528:	e00a      	b.n	800d540 <_strtol_l.isra.0+0x6c>
 800d52a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d52c:	bf04      	itt	eq
 800d52e:	782c      	ldrbeq	r4, [r5, #0]
 800d530:	1c95      	addeq	r5, r2, #2
 800d532:	e7ec      	b.n	800d50e <_strtol_l.isra.0+0x3a>
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1f6      	bne.n	800d526 <_strtol_l.isra.0+0x52>
 800d538:	2c30      	cmp	r4, #48	@ 0x30
 800d53a:	bf14      	ite	ne
 800d53c:	230a      	movne	r3, #10
 800d53e:	2308      	moveq	r3, #8
 800d540:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d544:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d548:	2200      	movs	r2, #0
 800d54a:	fbbc f9f3 	udiv	r9, ip, r3
 800d54e:	4610      	mov	r0, r2
 800d550:	fb03 ca19 	mls	sl, r3, r9, ip
 800d554:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d558:	2f09      	cmp	r7, #9
 800d55a:	d80f      	bhi.n	800d57c <_strtol_l.isra.0+0xa8>
 800d55c:	463c      	mov	r4, r7
 800d55e:	42a3      	cmp	r3, r4
 800d560:	dd1b      	ble.n	800d59a <_strtol_l.isra.0+0xc6>
 800d562:	1c57      	adds	r7, r2, #1
 800d564:	d007      	beq.n	800d576 <_strtol_l.isra.0+0xa2>
 800d566:	4581      	cmp	r9, r0
 800d568:	d314      	bcc.n	800d594 <_strtol_l.isra.0+0xc0>
 800d56a:	d101      	bne.n	800d570 <_strtol_l.isra.0+0x9c>
 800d56c:	45a2      	cmp	sl, r4
 800d56e:	db11      	blt.n	800d594 <_strtol_l.isra.0+0xc0>
 800d570:	fb00 4003 	mla	r0, r0, r3, r4
 800d574:	2201      	movs	r2, #1
 800d576:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d57a:	e7eb      	b.n	800d554 <_strtol_l.isra.0+0x80>
 800d57c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d580:	2f19      	cmp	r7, #25
 800d582:	d801      	bhi.n	800d588 <_strtol_l.isra.0+0xb4>
 800d584:	3c37      	subs	r4, #55	@ 0x37
 800d586:	e7ea      	b.n	800d55e <_strtol_l.isra.0+0x8a>
 800d588:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d58c:	2f19      	cmp	r7, #25
 800d58e:	d804      	bhi.n	800d59a <_strtol_l.isra.0+0xc6>
 800d590:	3c57      	subs	r4, #87	@ 0x57
 800d592:	e7e4      	b.n	800d55e <_strtol_l.isra.0+0x8a>
 800d594:	f04f 32ff 	mov.w	r2, #4294967295
 800d598:	e7ed      	b.n	800d576 <_strtol_l.isra.0+0xa2>
 800d59a:	1c53      	adds	r3, r2, #1
 800d59c:	d108      	bne.n	800d5b0 <_strtol_l.isra.0+0xdc>
 800d59e:	2322      	movs	r3, #34	@ 0x22
 800d5a0:	f8ce 3000 	str.w	r3, [lr]
 800d5a4:	4660      	mov	r0, ip
 800d5a6:	f1b8 0f00 	cmp.w	r8, #0
 800d5aa:	d0a0      	beq.n	800d4ee <_strtol_l.isra.0+0x1a>
 800d5ac:	1e69      	subs	r1, r5, #1
 800d5ae:	e006      	b.n	800d5be <_strtol_l.isra.0+0xea>
 800d5b0:	b106      	cbz	r6, 800d5b4 <_strtol_l.isra.0+0xe0>
 800d5b2:	4240      	negs	r0, r0
 800d5b4:	f1b8 0f00 	cmp.w	r8, #0
 800d5b8:	d099      	beq.n	800d4ee <_strtol_l.isra.0+0x1a>
 800d5ba:	2a00      	cmp	r2, #0
 800d5bc:	d1f6      	bne.n	800d5ac <_strtol_l.isra.0+0xd8>
 800d5be:	f8c8 1000 	str.w	r1, [r8]
 800d5c2:	e794      	b.n	800d4ee <_strtol_l.isra.0+0x1a>
 800d5c4:	0800ee31 	.word	0x0800ee31

0800d5c8 <_strtol_r>:
 800d5c8:	f7ff bf84 	b.w	800d4d4 <_strtol_l.isra.0>

0800d5cc <__ssputs_r>:
 800d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d0:	688e      	ldr	r6, [r1, #8]
 800d5d2:	461f      	mov	r7, r3
 800d5d4:	42be      	cmp	r6, r7
 800d5d6:	680b      	ldr	r3, [r1, #0]
 800d5d8:	4682      	mov	sl, r0
 800d5da:	460c      	mov	r4, r1
 800d5dc:	4690      	mov	r8, r2
 800d5de:	d82d      	bhi.n	800d63c <__ssputs_r+0x70>
 800d5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5e8:	d026      	beq.n	800d638 <__ssputs_r+0x6c>
 800d5ea:	6965      	ldr	r5, [r4, #20]
 800d5ec:	6909      	ldr	r1, [r1, #16]
 800d5ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5f2:	eba3 0901 	sub.w	r9, r3, r1
 800d5f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5fa:	1c7b      	adds	r3, r7, #1
 800d5fc:	444b      	add	r3, r9
 800d5fe:	106d      	asrs	r5, r5, #1
 800d600:	429d      	cmp	r5, r3
 800d602:	bf38      	it	cc
 800d604:	461d      	movcc	r5, r3
 800d606:	0553      	lsls	r3, r2, #21
 800d608:	d527      	bpl.n	800d65a <__ssputs_r+0x8e>
 800d60a:	4629      	mov	r1, r5
 800d60c:	f7fe fc24 	bl	800be58 <_malloc_r>
 800d610:	4606      	mov	r6, r0
 800d612:	b360      	cbz	r0, 800d66e <__ssputs_r+0xa2>
 800d614:	6921      	ldr	r1, [r4, #16]
 800d616:	464a      	mov	r2, r9
 800d618:	f7fd fd3d 	bl	800b096 <memcpy>
 800d61c:	89a3      	ldrh	r3, [r4, #12]
 800d61e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d626:	81a3      	strh	r3, [r4, #12]
 800d628:	6126      	str	r6, [r4, #16]
 800d62a:	6165      	str	r5, [r4, #20]
 800d62c:	444e      	add	r6, r9
 800d62e:	eba5 0509 	sub.w	r5, r5, r9
 800d632:	6026      	str	r6, [r4, #0]
 800d634:	60a5      	str	r5, [r4, #8]
 800d636:	463e      	mov	r6, r7
 800d638:	42be      	cmp	r6, r7
 800d63a:	d900      	bls.n	800d63e <__ssputs_r+0x72>
 800d63c:	463e      	mov	r6, r7
 800d63e:	6820      	ldr	r0, [r4, #0]
 800d640:	4632      	mov	r2, r6
 800d642:	4641      	mov	r1, r8
 800d644:	f000 fb9c 	bl	800dd80 <memmove>
 800d648:	68a3      	ldr	r3, [r4, #8]
 800d64a:	1b9b      	subs	r3, r3, r6
 800d64c:	60a3      	str	r3, [r4, #8]
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	4433      	add	r3, r6
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	2000      	movs	r0, #0
 800d656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d65a:	462a      	mov	r2, r5
 800d65c:	f000 ff51 	bl	800e502 <_realloc_r>
 800d660:	4606      	mov	r6, r0
 800d662:	2800      	cmp	r0, #0
 800d664:	d1e0      	bne.n	800d628 <__ssputs_r+0x5c>
 800d666:	6921      	ldr	r1, [r4, #16]
 800d668:	4650      	mov	r0, sl
 800d66a:	f7fe fb81 	bl	800bd70 <_free_r>
 800d66e:	230c      	movs	r3, #12
 800d670:	f8ca 3000 	str.w	r3, [sl]
 800d674:	89a3      	ldrh	r3, [r4, #12]
 800d676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	f04f 30ff 	mov.w	r0, #4294967295
 800d680:	e7e9      	b.n	800d656 <__ssputs_r+0x8a>
	...

0800d684 <_svfiprintf_r>:
 800d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d688:	4698      	mov	r8, r3
 800d68a:	898b      	ldrh	r3, [r1, #12]
 800d68c:	061b      	lsls	r3, r3, #24
 800d68e:	b09d      	sub	sp, #116	@ 0x74
 800d690:	4607      	mov	r7, r0
 800d692:	460d      	mov	r5, r1
 800d694:	4614      	mov	r4, r2
 800d696:	d510      	bpl.n	800d6ba <_svfiprintf_r+0x36>
 800d698:	690b      	ldr	r3, [r1, #16]
 800d69a:	b973      	cbnz	r3, 800d6ba <_svfiprintf_r+0x36>
 800d69c:	2140      	movs	r1, #64	@ 0x40
 800d69e:	f7fe fbdb 	bl	800be58 <_malloc_r>
 800d6a2:	6028      	str	r0, [r5, #0]
 800d6a4:	6128      	str	r0, [r5, #16]
 800d6a6:	b930      	cbnz	r0, 800d6b6 <_svfiprintf_r+0x32>
 800d6a8:	230c      	movs	r3, #12
 800d6aa:	603b      	str	r3, [r7, #0]
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	b01d      	add	sp, #116	@ 0x74
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	2340      	movs	r3, #64	@ 0x40
 800d6b8:	616b      	str	r3, [r5, #20]
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6be:	2320      	movs	r3, #32
 800d6c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6c8:	2330      	movs	r3, #48	@ 0x30
 800d6ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d868 <_svfiprintf_r+0x1e4>
 800d6ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6d2:	f04f 0901 	mov.w	r9, #1
 800d6d6:	4623      	mov	r3, r4
 800d6d8:	469a      	mov	sl, r3
 800d6da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6de:	b10a      	cbz	r2, 800d6e4 <_svfiprintf_r+0x60>
 800d6e0:	2a25      	cmp	r2, #37	@ 0x25
 800d6e2:	d1f9      	bne.n	800d6d8 <_svfiprintf_r+0x54>
 800d6e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6e8:	d00b      	beq.n	800d702 <_svfiprintf_r+0x7e>
 800d6ea:	465b      	mov	r3, fp
 800d6ec:	4622      	mov	r2, r4
 800d6ee:	4629      	mov	r1, r5
 800d6f0:	4638      	mov	r0, r7
 800d6f2:	f7ff ff6b 	bl	800d5cc <__ssputs_r>
 800d6f6:	3001      	adds	r0, #1
 800d6f8:	f000 80a7 	beq.w	800d84a <_svfiprintf_r+0x1c6>
 800d6fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6fe:	445a      	add	r2, fp
 800d700:	9209      	str	r2, [sp, #36]	@ 0x24
 800d702:	f89a 3000 	ldrb.w	r3, [sl]
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 809f 	beq.w	800d84a <_svfiprintf_r+0x1c6>
 800d70c:	2300      	movs	r3, #0
 800d70e:	f04f 32ff 	mov.w	r2, #4294967295
 800d712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d716:	f10a 0a01 	add.w	sl, sl, #1
 800d71a:	9304      	str	r3, [sp, #16]
 800d71c:	9307      	str	r3, [sp, #28]
 800d71e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d722:	931a      	str	r3, [sp, #104]	@ 0x68
 800d724:	4654      	mov	r4, sl
 800d726:	2205      	movs	r2, #5
 800d728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d72c:	484e      	ldr	r0, [pc, #312]	@ (800d868 <_svfiprintf_r+0x1e4>)
 800d72e:	f7f2 fd4f 	bl	80001d0 <memchr>
 800d732:	9a04      	ldr	r2, [sp, #16]
 800d734:	b9d8      	cbnz	r0, 800d76e <_svfiprintf_r+0xea>
 800d736:	06d0      	lsls	r0, r2, #27
 800d738:	bf44      	itt	mi
 800d73a:	2320      	movmi	r3, #32
 800d73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d740:	0711      	lsls	r1, r2, #28
 800d742:	bf44      	itt	mi
 800d744:	232b      	movmi	r3, #43	@ 0x2b
 800d746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d74a:	f89a 3000 	ldrb.w	r3, [sl]
 800d74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d750:	d015      	beq.n	800d77e <_svfiprintf_r+0xfa>
 800d752:	9a07      	ldr	r2, [sp, #28]
 800d754:	4654      	mov	r4, sl
 800d756:	2000      	movs	r0, #0
 800d758:	f04f 0c0a 	mov.w	ip, #10
 800d75c:	4621      	mov	r1, r4
 800d75e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d762:	3b30      	subs	r3, #48	@ 0x30
 800d764:	2b09      	cmp	r3, #9
 800d766:	d94b      	bls.n	800d800 <_svfiprintf_r+0x17c>
 800d768:	b1b0      	cbz	r0, 800d798 <_svfiprintf_r+0x114>
 800d76a:	9207      	str	r2, [sp, #28]
 800d76c:	e014      	b.n	800d798 <_svfiprintf_r+0x114>
 800d76e:	eba0 0308 	sub.w	r3, r0, r8
 800d772:	fa09 f303 	lsl.w	r3, r9, r3
 800d776:	4313      	orrs	r3, r2
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	46a2      	mov	sl, r4
 800d77c:	e7d2      	b.n	800d724 <_svfiprintf_r+0xa0>
 800d77e:	9b03      	ldr	r3, [sp, #12]
 800d780:	1d19      	adds	r1, r3, #4
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	9103      	str	r1, [sp, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	bfbb      	ittet	lt
 800d78a:	425b      	neglt	r3, r3
 800d78c:	f042 0202 	orrlt.w	r2, r2, #2
 800d790:	9307      	strge	r3, [sp, #28]
 800d792:	9307      	strlt	r3, [sp, #28]
 800d794:	bfb8      	it	lt
 800d796:	9204      	strlt	r2, [sp, #16]
 800d798:	7823      	ldrb	r3, [r4, #0]
 800d79a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d79c:	d10a      	bne.n	800d7b4 <_svfiprintf_r+0x130>
 800d79e:	7863      	ldrb	r3, [r4, #1]
 800d7a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7a2:	d132      	bne.n	800d80a <_svfiprintf_r+0x186>
 800d7a4:	9b03      	ldr	r3, [sp, #12]
 800d7a6:	1d1a      	adds	r2, r3, #4
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	9203      	str	r2, [sp, #12]
 800d7ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7b0:	3402      	adds	r4, #2
 800d7b2:	9305      	str	r3, [sp, #20]
 800d7b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d878 <_svfiprintf_r+0x1f4>
 800d7b8:	7821      	ldrb	r1, [r4, #0]
 800d7ba:	2203      	movs	r2, #3
 800d7bc:	4650      	mov	r0, sl
 800d7be:	f7f2 fd07 	bl	80001d0 <memchr>
 800d7c2:	b138      	cbz	r0, 800d7d4 <_svfiprintf_r+0x150>
 800d7c4:	9b04      	ldr	r3, [sp, #16]
 800d7c6:	eba0 000a 	sub.w	r0, r0, sl
 800d7ca:	2240      	movs	r2, #64	@ 0x40
 800d7cc:	4082      	lsls	r2, r0
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	3401      	adds	r4, #1
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7d8:	4824      	ldr	r0, [pc, #144]	@ (800d86c <_svfiprintf_r+0x1e8>)
 800d7da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7de:	2206      	movs	r2, #6
 800d7e0:	f7f2 fcf6 	bl	80001d0 <memchr>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	d036      	beq.n	800d856 <_svfiprintf_r+0x1d2>
 800d7e8:	4b21      	ldr	r3, [pc, #132]	@ (800d870 <_svfiprintf_r+0x1ec>)
 800d7ea:	bb1b      	cbnz	r3, 800d834 <_svfiprintf_r+0x1b0>
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	3307      	adds	r3, #7
 800d7f0:	f023 0307 	bic.w	r3, r3, #7
 800d7f4:	3308      	adds	r3, #8
 800d7f6:	9303      	str	r3, [sp, #12]
 800d7f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7fa:	4433      	add	r3, r6
 800d7fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7fe:	e76a      	b.n	800d6d6 <_svfiprintf_r+0x52>
 800d800:	fb0c 3202 	mla	r2, ip, r2, r3
 800d804:	460c      	mov	r4, r1
 800d806:	2001      	movs	r0, #1
 800d808:	e7a8      	b.n	800d75c <_svfiprintf_r+0xd8>
 800d80a:	2300      	movs	r3, #0
 800d80c:	3401      	adds	r4, #1
 800d80e:	9305      	str	r3, [sp, #20]
 800d810:	4619      	mov	r1, r3
 800d812:	f04f 0c0a 	mov.w	ip, #10
 800d816:	4620      	mov	r0, r4
 800d818:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d81c:	3a30      	subs	r2, #48	@ 0x30
 800d81e:	2a09      	cmp	r2, #9
 800d820:	d903      	bls.n	800d82a <_svfiprintf_r+0x1a6>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0c6      	beq.n	800d7b4 <_svfiprintf_r+0x130>
 800d826:	9105      	str	r1, [sp, #20]
 800d828:	e7c4      	b.n	800d7b4 <_svfiprintf_r+0x130>
 800d82a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d82e:	4604      	mov	r4, r0
 800d830:	2301      	movs	r3, #1
 800d832:	e7f0      	b.n	800d816 <_svfiprintf_r+0x192>
 800d834:	ab03      	add	r3, sp, #12
 800d836:	9300      	str	r3, [sp, #0]
 800d838:	462a      	mov	r2, r5
 800d83a:	4b0e      	ldr	r3, [pc, #56]	@ (800d874 <_svfiprintf_r+0x1f0>)
 800d83c:	a904      	add	r1, sp, #16
 800d83e:	4638      	mov	r0, r7
 800d840:	f7fc fc2a 	bl	800a098 <_printf_float>
 800d844:	1c42      	adds	r2, r0, #1
 800d846:	4606      	mov	r6, r0
 800d848:	d1d6      	bne.n	800d7f8 <_svfiprintf_r+0x174>
 800d84a:	89ab      	ldrh	r3, [r5, #12]
 800d84c:	065b      	lsls	r3, r3, #25
 800d84e:	f53f af2d 	bmi.w	800d6ac <_svfiprintf_r+0x28>
 800d852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d854:	e72c      	b.n	800d6b0 <_svfiprintf_r+0x2c>
 800d856:	ab03      	add	r3, sp, #12
 800d858:	9300      	str	r3, [sp, #0]
 800d85a:	462a      	mov	r2, r5
 800d85c:	4b05      	ldr	r3, [pc, #20]	@ (800d874 <_svfiprintf_r+0x1f0>)
 800d85e:	a904      	add	r1, sp, #16
 800d860:	4638      	mov	r0, r7
 800d862:	f7fc feb1 	bl	800a5c8 <_printf_i>
 800d866:	e7ed      	b.n	800d844 <_svfiprintf_r+0x1c0>
 800d868:	0800ec2d 	.word	0x0800ec2d
 800d86c:	0800ec37 	.word	0x0800ec37
 800d870:	0800a099 	.word	0x0800a099
 800d874:	0800d5cd 	.word	0x0800d5cd
 800d878:	0800ec33 	.word	0x0800ec33

0800d87c <__sfputc_r>:
 800d87c:	6893      	ldr	r3, [r2, #8]
 800d87e:	3b01      	subs	r3, #1
 800d880:	2b00      	cmp	r3, #0
 800d882:	b410      	push	{r4}
 800d884:	6093      	str	r3, [r2, #8]
 800d886:	da08      	bge.n	800d89a <__sfputc_r+0x1e>
 800d888:	6994      	ldr	r4, [r2, #24]
 800d88a:	42a3      	cmp	r3, r4
 800d88c:	db01      	blt.n	800d892 <__sfputc_r+0x16>
 800d88e:	290a      	cmp	r1, #10
 800d890:	d103      	bne.n	800d89a <__sfputc_r+0x1e>
 800d892:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d896:	f000 b9df 	b.w	800dc58 <__swbuf_r>
 800d89a:	6813      	ldr	r3, [r2, #0]
 800d89c:	1c58      	adds	r0, r3, #1
 800d89e:	6010      	str	r0, [r2, #0]
 800d8a0:	7019      	strb	r1, [r3, #0]
 800d8a2:	4608      	mov	r0, r1
 800d8a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <__sfputs_r>:
 800d8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	460f      	mov	r7, r1
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	18d5      	adds	r5, r2, r3
 800d8b4:	42ac      	cmp	r4, r5
 800d8b6:	d101      	bne.n	800d8bc <__sfputs_r+0x12>
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	e007      	b.n	800d8cc <__sfputs_r+0x22>
 800d8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8c0:	463a      	mov	r2, r7
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f7ff ffda 	bl	800d87c <__sfputc_r>
 800d8c8:	1c43      	adds	r3, r0, #1
 800d8ca:	d1f3      	bne.n	800d8b4 <__sfputs_r+0xa>
 800d8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8d0 <_vfiprintf_r>:
 800d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	460d      	mov	r5, r1
 800d8d6:	b09d      	sub	sp, #116	@ 0x74
 800d8d8:	4614      	mov	r4, r2
 800d8da:	4698      	mov	r8, r3
 800d8dc:	4606      	mov	r6, r0
 800d8de:	b118      	cbz	r0, 800d8e8 <_vfiprintf_r+0x18>
 800d8e0:	6a03      	ldr	r3, [r0, #32]
 800d8e2:	b90b      	cbnz	r3, 800d8e8 <_vfiprintf_r+0x18>
 800d8e4:	f7fd fa28 	bl	800ad38 <__sinit>
 800d8e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d8ea:	07d9      	lsls	r1, r3, #31
 800d8ec:	d405      	bmi.n	800d8fa <_vfiprintf_r+0x2a>
 800d8ee:	89ab      	ldrh	r3, [r5, #12]
 800d8f0:	059a      	lsls	r2, r3, #22
 800d8f2:	d402      	bmi.n	800d8fa <_vfiprintf_r+0x2a>
 800d8f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8f6:	f7fd fbcc 	bl	800b092 <__retarget_lock_acquire_recursive>
 800d8fa:	89ab      	ldrh	r3, [r5, #12]
 800d8fc:	071b      	lsls	r3, r3, #28
 800d8fe:	d501      	bpl.n	800d904 <_vfiprintf_r+0x34>
 800d900:	692b      	ldr	r3, [r5, #16]
 800d902:	b99b      	cbnz	r3, 800d92c <_vfiprintf_r+0x5c>
 800d904:	4629      	mov	r1, r5
 800d906:	4630      	mov	r0, r6
 800d908:	f000 f9e4 	bl	800dcd4 <__swsetup_r>
 800d90c:	b170      	cbz	r0, 800d92c <_vfiprintf_r+0x5c>
 800d90e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d910:	07dc      	lsls	r4, r3, #31
 800d912:	d504      	bpl.n	800d91e <_vfiprintf_r+0x4e>
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	b01d      	add	sp, #116	@ 0x74
 800d91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91e:	89ab      	ldrh	r3, [r5, #12]
 800d920:	0598      	lsls	r0, r3, #22
 800d922:	d4f7      	bmi.n	800d914 <_vfiprintf_r+0x44>
 800d924:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d926:	f7fd fbb5 	bl	800b094 <__retarget_lock_release_recursive>
 800d92a:	e7f3      	b.n	800d914 <_vfiprintf_r+0x44>
 800d92c:	2300      	movs	r3, #0
 800d92e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d930:	2320      	movs	r3, #32
 800d932:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d936:	f8cd 800c 	str.w	r8, [sp, #12]
 800d93a:	2330      	movs	r3, #48	@ 0x30
 800d93c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800daec <_vfiprintf_r+0x21c>
 800d940:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d944:	f04f 0901 	mov.w	r9, #1
 800d948:	4623      	mov	r3, r4
 800d94a:	469a      	mov	sl, r3
 800d94c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d950:	b10a      	cbz	r2, 800d956 <_vfiprintf_r+0x86>
 800d952:	2a25      	cmp	r2, #37	@ 0x25
 800d954:	d1f9      	bne.n	800d94a <_vfiprintf_r+0x7a>
 800d956:	ebba 0b04 	subs.w	fp, sl, r4
 800d95a:	d00b      	beq.n	800d974 <_vfiprintf_r+0xa4>
 800d95c:	465b      	mov	r3, fp
 800d95e:	4622      	mov	r2, r4
 800d960:	4629      	mov	r1, r5
 800d962:	4630      	mov	r0, r6
 800d964:	f7ff ffa1 	bl	800d8aa <__sfputs_r>
 800d968:	3001      	adds	r0, #1
 800d96a:	f000 80a7 	beq.w	800dabc <_vfiprintf_r+0x1ec>
 800d96e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d970:	445a      	add	r2, fp
 800d972:	9209      	str	r2, [sp, #36]	@ 0x24
 800d974:	f89a 3000 	ldrb.w	r3, [sl]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	f000 809f 	beq.w	800dabc <_vfiprintf_r+0x1ec>
 800d97e:	2300      	movs	r3, #0
 800d980:	f04f 32ff 	mov.w	r2, #4294967295
 800d984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d988:	f10a 0a01 	add.w	sl, sl, #1
 800d98c:	9304      	str	r3, [sp, #16]
 800d98e:	9307      	str	r3, [sp, #28]
 800d990:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d994:	931a      	str	r3, [sp, #104]	@ 0x68
 800d996:	4654      	mov	r4, sl
 800d998:	2205      	movs	r2, #5
 800d99a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d99e:	4853      	ldr	r0, [pc, #332]	@ (800daec <_vfiprintf_r+0x21c>)
 800d9a0:	f7f2 fc16 	bl	80001d0 <memchr>
 800d9a4:	9a04      	ldr	r2, [sp, #16]
 800d9a6:	b9d8      	cbnz	r0, 800d9e0 <_vfiprintf_r+0x110>
 800d9a8:	06d1      	lsls	r1, r2, #27
 800d9aa:	bf44      	itt	mi
 800d9ac:	2320      	movmi	r3, #32
 800d9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9b2:	0713      	lsls	r3, r2, #28
 800d9b4:	bf44      	itt	mi
 800d9b6:	232b      	movmi	r3, #43	@ 0x2b
 800d9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800d9c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d9c2:	d015      	beq.n	800d9f0 <_vfiprintf_r+0x120>
 800d9c4:	9a07      	ldr	r2, [sp, #28]
 800d9c6:	4654      	mov	r4, sl
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f04f 0c0a 	mov.w	ip, #10
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9d4:	3b30      	subs	r3, #48	@ 0x30
 800d9d6:	2b09      	cmp	r3, #9
 800d9d8:	d94b      	bls.n	800da72 <_vfiprintf_r+0x1a2>
 800d9da:	b1b0      	cbz	r0, 800da0a <_vfiprintf_r+0x13a>
 800d9dc:	9207      	str	r2, [sp, #28]
 800d9de:	e014      	b.n	800da0a <_vfiprintf_r+0x13a>
 800d9e0:	eba0 0308 	sub.w	r3, r0, r8
 800d9e4:	fa09 f303 	lsl.w	r3, r9, r3
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	9304      	str	r3, [sp, #16]
 800d9ec:	46a2      	mov	sl, r4
 800d9ee:	e7d2      	b.n	800d996 <_vfiprintf_r+0xc6>
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	1d19      	adds	r1, r3, #4
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	9103      	str	r1, [sp, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfbb      	ittet	lt
 800d9fc:	425b      	neglt	r3, r3
 800d9fe:	f042 0202 	orrlt.w	r2, r2, #2
 800da02:	9307      	strge	r3, [sp, #28]
 800da04:	9307      	strlt	r3, [sp, #28]
 800da06:	bfb8      	it	lt
 800da08:	9204      	strlt	r2, [sp, #16]
 800da0a:	7823      	ldrb	r3, [r4, #0]
 800da0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800da0e:	d10a      	bne.n	800da26 <_vfiprintf_r+0x156>
 800da10:	7863      	ldrb	r3, [r4, #1]
 800da12:	2b2a      	cmp	r3, #42	@ 0x2a
 800da14:	d132      	bne.n	800da7c <_vfiprintf_r+0x1ac>
 800da16:	9b03      	ldr	r3, [sp, #12]
 800da18:	1d1a      	adds	r2, r3, #4
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	9203      	str	r2, [sp, #12]
 800da1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800da22:	3402      	adds	r4, #2
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dafc <_vfiprintf_r+0x22c>
 800da2a:	7821      	ldrb	r1, [r4, #0]
 800da2c:	2203      	movs	r2, #3
 800da2e:	4650      	mov	r0, sl
 800da30:	f7f2 fbce 	bl	80001d0 <memchr>
 800da34:	b138      	cbz	r0, 800da46 <_vfiprintf_r+0x176>
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	eba0 000a 	sub.w	r0, r0, sl
 800da3c:	2240      	movs	r2, #64	@ 0x40
 800da3e:	4082      	lsls	r2, r0
 800da40:	4313      	orrs	r3, r2
 800da42:	3401      	adds	r4, #1
 800da44:	9304      	str	r3, [sp, #16]
 800da46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da4a:	4829      	ldr	r0, [pc, #164]	@ (800daf0 <_vfiprintf_r+0x220>)
 800da4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800da50:	2206      	movs	r2, #6
 800da52:	f7f2 fbbd 	bl	80001d0 <memchr>
 800da56:	2800      	cmp	r0, #0
 800da58:	d03f      	beq.n	800dada <_vfiprintf_r+0x20a>
 800da5a:	4b26      	ldr	r3, [pc, #152]	@ (800daf4 <_vfiprintf_r+0x224>)
 800da5c:	bb1b      	cbnz	r3, 800daa6 <_vfiprintf_r+0x1d6>
 800da5e:	9b03      	ldr	r3, [sp, #12]
 800da60:	3307      	adds	r3, #7
 800da62:	f023 0307 	bic.w	r3, r3, #7
 800da66:	3308      	adds	r3, #8
 800da68:	9303      	str	r3, [sp, #12]
 800da6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da6c:	443b      	add	r3, r7
 800da6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800da70:	e76a      	b.n	800d948 <_vfiprintf_r+0x78>
 800da72:	fb0c 3202 	mla	r2, ip, r2, r3
 800da76:	460c      	mov	r4, r1
 800da78:	2001      	movs	r0, #1
 800da7a:	e7a8      	b.n	800d9ce <_vfiprintf_r+0xfe>
 800da7c:	2300      	movs	r3, #0
 800da7e:	3401      	adds	r4, #1
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	4619      	mov	r1, r3
 800da84:	f04f 0c0a 	mov.w	ip, #10
 800da88:	4620      	mov	r0, r4
 800da8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da8e:	3a30      	subs	r2, #48	@ 0x30
 800da90:	2a09      	cmp	r2, #9
 800da92:	d903      	bls.n	800da9c <_vfiprintf_r+0x1cc>
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0c6      	beq.n	800da26 <_vfiprintf_r+0x156>
 800da98:	9105      	str	r1, [sp, #20]
 800da9a:	e7c4      	b.n	800da26 <_vfiprintf_r+0x156>
 800da9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800daa0:	4604      	mov	r4, r0
 800daa2:	2301      	movs	r3, #1
 800daa4:	e7f0      	b.n	800da88 <_vfiprintf_r+0x1b8>
 800daa6:	ab03      	add	r3, sp, #12
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	462a      	mov	r2, r5
 800daac:	4b12      	ldr	r3, [pc, #72]	@ (800daf8 <_vfiprintf_r+0x228>)
 800daae:	a904      	add	r1, sp, #16
 800dab0:	4630      	mov	r0, r6
 800dab2:	f7fc faf1 	bl	800a098 <_printf_float>
 800dab6:	4607      	mov	r7, r0
 800dab8:	1c78      	adds	r0, r7, #1
 800daba:	d1d6      	bne.n	800da6a <_vfiprintf_r+0x19a>
 800dabc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d405      	bmi.n	800dace <_vfiprintf_r+0x1fe>
 800dac2:	89ab      	ldrh	r3, [r5, #12]
 800dac4:	059a      	lsls	r2, r3, #22
 800dac6:	d402      	bmi.n	800dace <_vfiprintf_r+0x1fe>
 800dac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800daca:	f7fd fae3 	bl	800b094 <__retarget_lock_release_recursive>
 800dace:	89ab      	ldrh	r3, [r5, #12]
 800dad0:	065b      	lsls	r3, r3, #25
 800dad2:	f53f af1f 	bmi.w	800d914 <_vfiprintf_r+0x44>
 800dad6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dad8:	e71e      	b.n	800d918 <_vfiprintf_r+0x48>
 800dada:	ab03      	add	r3, sp, #12
 800dadc:	9300      	str	r3, [sp, #0]
 800dade:	462a      	mov	r2, r5
 800dae0:	4b05      	ldr	r3, [pc, #20]	@ (800daf8 <_vfiprintf_r+0x228>)
 800dae2:	a904      	add	r1, sp, #16
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7fc fd6f 	bl	800a5c8 <_printf_i>
 800daea:	e7e4      	b.n	800dab6 <_vfiprintf_r+0x1e6>
 800daec:	0800ec2d 	.word	0x0800ec2d
 800daf0:	0800ec37 	.word	0x0800ec37
 800daf4:	0800a099 	.word	0x0800a099
 800daf8:	0800d8ab 	.word	0x0800d8ab
 800dafc:	0800ec33 	.word	0x0800ec33

0800db00 <__sflush_r>:
 800db00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db08:	0716      	lsls	r6, r2, #28
 800db0a:	4605      	mov	r5, r0
 800db0c:	460c      	mov	r4, r1
 800db0e:	d454      	bmi.n	800dbba <__sflush_r+0xba>
 800db10:	684b      	ldr	r3, [r1, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	dc02      	bgt.n	800db1c <__sflush_r+0x1c>
 800db16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800db18:	2b00      	cmp	r3, #0
 800db1a:	dd48      	ble.n	800dbae <__sflush_r+0xae>
 800db1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db1e:	2e00      	cmp	r6, #0
 800db20:	d045      	beq.n	800dbae <__sflush_r+0xae>
 800db22:	2300      	movs	r3, #0
 800db24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800db28:	682f      	ldr	r7, [r5, #0]
 800db2a:	6a21      	ldr	r1, [r4, #32]
 800db2c:	602b      	str	r3, [r5, #0]
 800db2e:	d030      	beq.n	800db92 <__sflush_r+0x92>
 800db30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	0759      	lsls	r1, r3, #29
 800db36:	d505      	bpl.n	800db44 <__sflush_r+0x44>
 800db38:	6863      	ldr	r3, [r4, #4]
 800db3a:	1ad2      	subs	r2, r2, r3
 800db3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800db3e:	b10b      	cbz	r3, 800db44 <__sflush_r+0x44>
 800db40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800db42:	1ad2      	subs	r2, r2, r3
 800db44:	2300      	movs	r3, #0
 800db46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800db48:	6a21      	ldr	r1, [r4, #32]
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b0      	blx	r6
 800db4e:	1c43      	adds	r3, r0, #1
 800db50:	89a3      	ldrh	r3, [r4, #12]
 800db52:	d106      	bne.n	800db62 <__sflush_r+0x62>
 800db54:	6829      	ldr	r1, [r5, #0]
 800db56:	291d      	cmp	r1, #29
 800db58:	d82b      	bhi.n	800dbb2 <__sflush_r+0xb2>
 800db5a:	4a2a      	ldr	r2, [pc, #168]	@ (800dc04 <__sflush_r+0x104>)
 800db5c:	40ca      	lsrs	r2, r1
 800db5e:	07d6      	lsls	r6, r2, #31
 800db60:	d527      	bpl.n	800dbb2 <__sflush_r+0xb2>
 800db62:	2200      	movs	r2, #0
 800db64:	6062      	str	r2, [r4, #4]
 800db66:	04d9      	lsls	r1, r3, #19
 800db68:	6922      	ldr	r2, [r4, #16]
 800db6a:	6022      	str	r2, [r4, #0]
 800db6c:	d504      	bpl.n	800db78 <__sflush_r+0x78>
 800db6e:	1c42      	adds	r2, r0, #1
 800db70:	d101      	bne.n	800db76 <__sflush_r+0x76>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	b903      	cbnz	r3, 800db78 <__sflush_r+0x78>
 800db76:	6560      	str	r0, [r4, #84]	@ 0x54
 800db78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db7a:	602f      	str	r7, [r5, #0]
 800db7c:	b1b9      	cbz	r1, 800dbae <__sflush_r+0xae>
 800db7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db82:	4299      	cmp	r1, r3
 800db84:	d002      	beq.n	800db8c <__sflush_r+0x8c>
 800db86:	4628      	mov	r0, r5
 800db88:	f7fe f8f2 	bl	800bd70 <_free_r>
 800db8c:	2300      	movs	r3, #0
 800db8e:	6363      	str	r3, [r4, #52]	@ 0x34
 800db90:	e00d      	b.n	800dbae <__sflush_r+0xae>
 800db92:	2301      	movs	r3, #1
 800db94:	4628      	mov	r0, r5
 800db96:	47b0      	blx	r6
 800db98:	4602      	mov	r2, r0
 800db9a:	1c50      	adds	r0, r2, #1
 800db9c:	d1c9      	bne.n	800db32 <__sflush_r+0x32>
 800db9e:	682b      	ldr	r3, [r5, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d0c6      	beq.n	800db32 <__sflush_r+0x32>
 800dba4:	2b1d      	cmp	r3, #29
 800dba6:	d001      	beq.n	800dbac <__sflush_r+0xac>
 800dba8:	2b16      	cmp	r3, #22
 800dbaa:	d11e      	bne.n	800dbea <__sflush_r+0xea>
 800dbac:	602f      	str	r7, [r5, #0]
 800dbae:	2000      	movs	r0, #0
 800dbb0:	e022      	b.n	800dbf8 <__sflush_r+0xf8>
 800dbb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbb6:	b21b      	sxth	r3, r3
 800dbb8:	e01b      	b.n	800dbf2 <__sflush_r+0xf2>
 800dbba:	690f      	ldr	r7, [r1, #16]
 800dbbc:	2f00      	cmp	r7, #0
 800dbbe:	d0f6      	beq.n	800dbae <__sflush_r+0xae>
 800dbc0:	0793      	lsls	r3, r2, #30
 800dbc2:	680e      	ldr	r6, [r1, #0]
 800dbc4:	bf08      	it	eq
 800dbc6:	694b      	ldreq	r3, [r1, #20]
 800dbc8:	600f      	str	r7, [r1, #0]
 800dbca:	bf18      	it	ne
 800dbcc:	2300      	movne	r3, #0
 800dbce:	eba6 0807 	sub.w	r8, r6, r7
 800dbd2:	608b      	str	r3, [r1, #8]
 800dbd4:	f1b8 0f00 	cmp.w	r8, #0
 800dbd8:	dde9      	ble.n	800dbae <__sflush_r+0xae>
 800dbda:	6a21      	ldr	r1, [r4, #32]
 800dbdc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dbde:	4643      	mov	r3, r8
 800dbe0:	463a      	mov	r2, r7
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	47b0      	blx	r6
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	dc08      	bgt.n	800dbfc <__sflush_r+0xfc>
 800dbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbf2:	81a3      	strh	r3, [r4, #12]
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfc:	4407      	add	r7, r0
 800dbfe:	eba8 0800 	sub.w	r8, r8, r0
 800dc02:	e7e7      	b.n	800dbd4 <__sflush_r+0xd4>
 800dc04:	20400001 	.word	0x20400001

0800dc08 <_fflush_r>:
 800dc08:	b538      	push	{r3, r4, r5, lr}
 800dc0a:	690b      	ldr	r3, [r1, #16]
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	460c      	mov	r4, r1
 800dc10:	b913      	cbnz	r3, 800dc18 <_fflush_r+0x10>
 800dc12:	2500      	movs	r5, #0
 800dc14:	4628      	mov	r0, r5
 800dc16:	bd38      	pop	{r3, r4, r5, pc}
 800dc18:	b118      	cbz	r0, 800dc22 <_fflush_r+0x1a>
 800dc1a:	6a03      	ldr	r3, [r0, #32]
 800dc1c:	b90b      	cbnz	r3, 800dc22 <_fflush_r+0x1a>
 800dc1e:	f7fd f88b 	bl	800ad38 <__sinit>
 800dc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0f3      	beq.n	800dc12 <_fflush_r+0xa>
 800dc2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dc2c:	07d0      	lsls	r0, r2, #31
 800dc2e:	d404      	bmi.n	800dc3a <_fflush_r+0x32>
 800dc30:	0599      	lsls	r1, r3, #22
 800dc32:	d402      	bmi.n	800dc3a <_fflush_r+0x32>
 800dc34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc36:	f7fd fa2c 	bl	800b092 <__retarget_lock_acquire_recursive>
 800dc3a:	4628      	mov	r0, r5
 800dc3c:	4621      	mov	r1, r4
 800dc3e:	f7ff ff5f 	bl	800db00 <__sflush_r>
 800dc42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dc44:	07da      	lsls	r2, r3, #31
 800dc46:	4605      	mov	r5, r0
 800dc48:	d4e4      	bmi.n	800dc14 <_fflush_r+0xc>
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	059b      	lsls	r3, r3, #22
 800dc4e:	d4e1      	bmi.n	800dc14 <_fflush_r+0xc>
 800dc50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dc52:	f7fd fa1f 	bl	800b094 <__retarget_lock_release_recursive>
 800dc56:	e7dd      	b.n	800dc14 <_fflush_r+0xc>

0800dc58 <__swbuf_r>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	460e      	mov	r6, r1
 800dc5c:	4614      	mov	r4, r2
 800dc5e:	4605      	mov	r5, r0
 800dc60:	b118      	cbz	r0, 800dc6a <__swbuf_r+0x12>
 800dc62:	6a03      	ldr	r3, [r0, #32]
 800dc64:	b90b      	cbnz	r3, 800dc6a <__swbuf_r+0x12>
 800dc66:	f7fd f867 	bl	800ad38 <__sinit>
 800dc6a:	69a3      	ldr	r3, [r4, #24]
 800dc6c:	60a3      	str	r3, [r4, #8]
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	071a      	lsls	r2, r3, #28
 800dc72:	d501      	bpl.n	800dc78 <__swbuf_r+0x20>
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	b943      	cbnz	r3, 800dc8a <__swbuf_r+0x32>
 800dc78:	4621      	mov	r1, r4
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	f000 f82a 	bl	800dcd4 <__swsetup_r>
 800dc80:	b118      	cbz	r0, 800dc8a <__swbuf_r+0x32>
 800dc82:	f04f 37ff 	mov.w	r7, #4294967295
 800dc86:	4638      	mov	r0, r7
 800dc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	6922      	ldr	r2, [r4, #16]
 800dc8e:	1a98      	subs	r0, r3, r2
 800dc90:	6963      	ldr	r3, [r4, #20]
 800dc92:	b2f6      	uxtb	r6, r6
 800dc94:	4283      	cmp	r3, r0
 800dc96:	4637      	mov	r7, r6
 800dc98:	dc05      	bgt.n	800dca6 <__swbuf_r+0x4e>
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f7ff ffb3 	bl	800dc08 <_fflush_r>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d1ed      	bne.n	800dc82 <__swbuf_r+0x2a>
 800dca6:	68a3      	ldr	r3, [r4, #8]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	1c5a      	adds	r2, r3, #1
 800dcb0:	6022      	str	r2, [r4, #0]
 800dcb2:	701e      	strb	r6, [r3, #0]
 800dcb4:	6962      	ldr	r2, [r4, #20]
 800dcb6:	1c43      	adds	r3, r0, #1
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d004      	beq.n	800dcc6 <__swbuf_r+0x6e>
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	07db      	lsls	r3, r3, #31
 800dcc0:	d5e1      	bpl.n	800dc86 <__swbuf_r+0x2e>
 800dcc2:	2e0a      	cmp	r6, #10
 800dcc4:	d1df      	bne.n	800dc86 <__swbuf_r+0x2e>
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f7ff ff9d 	bl	800dc08 <_fflush_r>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	d0d9      	beq.n	800dc86 <__swbuf_r+0x2e>
 800dcd2:	e7d6      	b.n	800dc82 <__swbuf_r+0x2a>

0800dcd4 <__swsetup_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	4b29      	ldr	r3, [pc, #164]	@ (800dd7c <__swsetup_r+0xa8>)
 800dcd8:	4605      	mov	r5, r0
 800dcda:	6818      	ldr	r0, [r3, #0]
 800dcdc:	460c      	mov	r4, r1
 800dcde:	b118      	cbz	r0, 800dce8 <__swsetup_r+0x14>
 800dce0:	6a03      	ldr	r3, [r0, #32]
 800dce2:	b90b      	cbnz	r3, 800dce8 <__swsetup_r+0x14>
 800dce4:	f7fd f828 	bl	800ad38 <__sinit>
 800dce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcec:	0719      	lsls	r1, r3, #28
 800dcee:	d422      	bmi.n	800dd36 <__swsetup_r+0x62>
 800dcf0:	06da      	lsls	r2, r3, #27
 800dcf2:	d407      	bmi.n	800dd04 <__swsetup_r+0x30>
 800dcf4:	2209      	movs	r2, #9
 800dcf6:	602a      	str	r2, [r5, #0]
 800dcf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcfc:	81a3      	strh	r3, [r4, #12]
 800dcfe:	f04f 30ff 	mov.w	r0, #4294967295
 800dd02:	e033      	b.n	800dd6c <__swsetup_r+0x98>
 800dd04:	0758      	lsls	r0, r3, #29
 800dd06:	d512      	bpl.n	800dd2e <__swsetup_r+0x5a>
 800dd08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd0a:	b141      	cbz	r1, 800dd1e <__swsetup_r+0x4a>
 800dd0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd10:	4299      	cmp	r1, r3
 800dd12:	d002      	beq.n	800dd1a <__swsetup_r+0x46>
 800dd14:	4628      	mov	r0, r5
 800dd16:	f7fe f82b 	bl	800bd70 <_free_r>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dd24:	81a3      	strh	r3, [r4, #12]
 800dd26:	2300      	movs	r3, #0
 800dd28:	6063      	str	r3, [r4, #4]
 800dd2a:	6923      	ldr	r3, [r4, #16]
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	89a3      	ldrh	r3, [r4, #12]
 800dd30:	f043 0308 	orr.w	r3, r3, #8
 800dd34:	81a3      	strh	r3, [r4, #12]
 800dd36:	6923      	ldr	r3, [r4, #16]
 800dd38:	b94b      	cbnz	r3, 800dd4e <__swsetup_r+0x7a>
 800dd3a:	89a3      	ldrh	r3, [r4, #12]
 800dd3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dd40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd44:	d003      	beq.n	800dd4e <__swsetup_r+0x7a>
 800dd46:	4621      	mov	r1, r4
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f000 fc4d 	bl	800e5e8 <__smakebuf_r>
 800dd4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd52:	f013 0201 	ands.w	r2, r3, #1
 800dd56:	d00a      	beq.n	800dd6e <__swsetup_r+0x9a>
 800dd58:	2200      	movs	r2, #0
 800dd5a:	60a2      	str	r2, [r4, #8]
 800dd5c:	6962      	ldr	r2, [r4, #20]
 800dd5e:	4252      	negs	r2, r2
 800dd60:	61a2      	str	r2, [r4, #24]
 800dd62:	6922      	ldr	r2, [r4, #16]
 800dd64:	b942      	cbnz	r2, 800dd78 <__swsetup_r+0xa4>
 800dd66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dd6a:	d1c5      	bne.n	800dcf8 <__swsetup_r+0x24>
 800dd6c:	bd38      	pop	{r3, r4, r5, pc}
 800dd6e:	0799      	lsls	r1, r3, #30
 800dd70:	bf58      	it	pl
 800dd72:	6962      	ldrpl	r2, [r4, #20]
 800dd74:	60a2      	str	r2, [r4, #8]
 800dd76:	e7f4      	b.n	800dd62 <__swsetup_r+0x8e>
 800dd78:	2000      	movs	r0, #0
 800dd7a:	e7f7      	b.n	800dd6c <__swsetup_r+0x98>
 800dd7c:	20000020 	.word	0x20000020

0800dd80 <memmove>:
 800dd80:	4288      	cmp	r0, r1
 800dd82:	b510      	push	{r4, lr}
 800dd84:	eb01 0402 	add.w	r4, r1, r2
 800dd88:	d902      	bls.n	800dd90 <memmove+0x10>
 800dd8a:	4284      	cmp	r4, r0
 800dd8c:	4623      	mov	r3, r4
 800dd8e:	d807      	bhi.n	800dda0 <memmove+0x20>
 800dd90:	1e43      	subs	r3, r0, #1
 800dd92:	42a1      	cmp	r1, r4
 800dd94:	d008      	beq.n	800dda8 <memmove+0x28>
 800dd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd9e:	e7f8      	b.n	800dd92 <memmove+0x12>
 800dda0:	4402      	add	r2, r0
 800dda2:	4601      	mov	r1, r0
 800dda4:	428a      	cmp	r2, r1
 800dda6:	d100      	bne.n	800ddaa <memmove+0x2a>
 800dda8:	bd10      	pop	{r4, pc}
 800ddaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddb2:	e7f7      	b.n	800dda4 <memmove+0x24>

0800ddb4 <strncmp>:
 800ddb4:	b510      	push	{r4, lr}
 800ddb6:	b16a      	cbz	r2, 800ddd4 <strncmp+0x20>
 800ddb8:	3901      	subs	r1, #1
 800ddba:	1884      	adds	r4, r0, r2
 800ddbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ddc4:	429a      	cmp	r2, r3
 800ddc6:	d103      	bne.n	800ddd0 <strncmp+0x1c>
 800ddc8:	42a0      	cmp	r0, r4
 800ddca:	d001      	beq.n	800ddd0 <strncmp+0x1c>
 800ddcc:	2a00      	cmp	r2, #0
 800ddce:	d1f5      	bne.n	800ddbc <strncmp+0x8>
 800ddd0:	1ad0      	subs	r0, r2, r3
 800ddd2:	bd10      	pop	{r4, pc}
 800ddd4:	4610      	mov	r0, r2
 800ddd6:	e7fc      	b.n	800ddd2 <strncmp+0x1e>

0800ddd8 <_sbrk_r>:
 800ddd8:	b538      	push	{r3, r4, r5, lr}
 800ddda:	4d06      	ldr	r5, [pc, #24]	@ (800ddf4 <_sbrk_r+0x1c>)
 800dddc:	2300      	movs	r3, #0
 800ddde:	4604      	mov	r4, r0
 800dde0:	4608      	mov	r0, r1
 800dde2:	602b      	str	r3, [r5, #0]
 800dde4:	f7f4 ff2e 	bl	8002c44 <_sbrk>
 800dde8:	1c43      	adds	r3, r0, #1
 800ddea:	d102      	bne.n	800ddf2 <_sbrk_r+0x1a>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	b103      	cbz	r3, 800ddf2 <_sbrk_r+0x1a>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	20004f78 	.word	0x20004f78

0800ddf8 <nan>:
 800ddf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800de00 <nan+0x8>
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	00000000 	.word	0x00000000
 800de04:	7ff80000 	.word	0x7ff80000

0800de08 <__assert_func>:
 800de08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de0a:	4614      	mov	r4, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4b09      	ldr	r3, [pc, #36]	@ (800de34 <__assert_func+0x2c>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4605      	mov	r5, r0
 800de14:	68d8      	ldr	r0, [r3, #12]
 800de16:	b14c      	cbz	r4, 800de2c <__assert_func+0x24>
 800de18:	4b07      	ldr	r3, [pc, #28]	@ (800de38 <__assert_func+0x30>)
 800de1a:	9100      	str	r1, [sp, #0]
 800de1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de20:	4906      	ldr	r1, [pc, #24]	@ (800de3c <__assert_func+0x34>)
 800de22:	462b      	mov	r3, r5
 800de24:	f000 fba8 	bl	800e578 <fiprintf>
 800de28:	f000 fc3c 	bl	800e6a4 <abort>
 800de2c:	4b04      	ldr	r3, [pc, #16]	@ (800de40 <__assert_func+0x38>)
 800de2e:	461c      	mov	r4, r3
 800de30:	e7f3      	b.n	800de1a <__assert_func+0x12>
 800de32:	bf00      	nop
 800de34:	20000020 	.word	0x20000020
 800de38:	0800ec46 	.word	0x0800ec46
 800de3c:	0800ec53 	.word	0x0800ec53
 800de40:	0800ec81 	.word	0x0800ec81

0800de44 <_calloc_r>:
 800de44:	b570      	push	{r4, r5, r6, lr}
 800de46:	fba1 5402 	umull	r5, r4, r1, r2
 800de4a:	b934      	cbnz	r4, 800de5a <_calloc_r+0x16>
 800de4c:	4629      	mov	r1, r5
 800de4e:	f7fe f803 	bl	800be58 <_malloc_r>
 800de52:	4606      	mov	r6, r0
 800de54:	b928      	cbnz	r0, 800de62 <_calloc_r+0x1e>
 800de56:	4630      	mov	r0, r6
 800de58:	bd70      	pop	{r4, r5, r6, pc}
 800de5a:	220c      	movs	r2, #12
 800de5c:	6002      	str	r2, [r0, #0]
 800de5e:	2600      	movs	r6, #0
 800de60:	e7f9      	b.n	800de56 <_calloc_r+0x12>
 800de62:	462a      	mov	r2, r5
 800de64:	4621      	mov	r1, r4
 800de66:	f7fd f838 	bl	800aeda <memset>
 800de6a:	e7f4      	b.n	800de56 <_calloc_r+0x12>

0800de6c <rshift>:
 800de6c:	6903      	ldr	r3, [r0, #16]
 800de6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800de72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de76:	ea4f 1261 	mov.w	r2, r1, asr #5
 800de7a:	f100 0414 	add.w	r4, r0, #20
 800de7e:	dd45      	ble.n	800df0c <rshift+0xa0>
 800de80:	f011 011f 	ands.w	r1, r1, #31
 800de84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800de88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800de8c:	d10c      	bne.n	800dea8 <rshift+0x3c>
 800de8e:	f100 0710 	add.w	r7, r0, #16
 800de92:	4629      	mov	r1, r5
 800de94:	42b1      	cmp	r1, r6
 800de96:	d334      	bcc.n	800df02 <rshift+0x96>
 800de98:	1a9b      	subs	r3, r3, r2
 800de9a:	009b      	lsls	r3, r3, #2
 800de9c:	1eea      	subs	r2, r5, #3
 800de9e:	4296      	cmp	r6, r2
 800dea0:	bf38      	it	cc
 800dea2:	2300      	movcc	r3, #0
 800dea4:	4423      	add	r3, r4
 800dea6:	e015      	b.n	800ded4 <rshift+0x68>
 800dea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800deac:	f1c1 0820 	rsb	r8, r1, #32
 800deb0:	40cf      	lsrs	r7, r1
 800deb2:	f105 0e04 	add.w	lr, r5, #4
 800deb6:	46a1      	mov	r9, r4
 800deb8:	4576      	cmp	r6, lr
 800deba:	46f4      	mov	ip, lr
 800debc:	d815      	bhi.n	800deea <rshift+0x7e>
 800debe:	1a9a      	subs	r2, r3, r2
 800dec0:	0092      	lsls	r2, r2, #2
 800dec2:	3a04      	subs	r2, #4
 800dec4:	3501      	adds	r5, #1
 800dec6:	42ae      	cmp	r6, r5
 800dec8:	bf38      	it	cc
 800deca:	2200      	movcc	r2, #0
 800decc:	18a3      	adds	r3, r4, r2
 800dece:	50a7      	str	r7, [r4, r2]
 800ded0:	b107      	cbz	r7, 800ded4 <rshift+0x68>
 800ded2:	3304      	adds	r3, #4
 800ded4:	1b1a      	subs	r2, r3, r4
 800ded6:	42a3      	cmp	r3, r4
 800ded8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dedc:	bf08      	it	eq
 800dede:	2300      	moveq	r3, #0
 800dee0:	6102      	str	r2, [r0, #16]
 800dee2:	bf08      	it	eq
 800dee4:	6143      	streq	r3, [r0, #20]
 800dee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deea:	f8dc c000 	ldr.w	ip, [ip]
 800deee:	fa0c fc08 	lsl.w	ip, ip, r8
 800def2:	ea4c 0707 	orr.w	r7, ip, r7
 800def6:	f849 7b04 	str.w	r7, [r9], #4
 800defa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800defe:	40cf      	lsrs	r7, r1
 800df00:	e7da      	b.n	800deb8 <rshift+0x4c>
 800df02:	f851 cb04 	ldr.w	ip, [r1], #4
 800df06:	f847 cf04 	str.w	ip, [r7, #4]!
 800df0a:	e7c3      	b.n	800de94 <rshift+0x28>
 800df0c:	4623      	mov	r3, r4
 800df0e:	e7e1      	b.n	800ded4 <rshift+0x68>

0800df10 <__hexdig_fun>:
 800df10:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800df14:	2b09      	cmp	r3, #9
 800df16:	d802      	bhi.n	800df1e <__hexdig_fun+0xe>
 800df18:	3820      	subs	r0, #32
 800df1a:	b2c0      	uxtb	r0, r0
 800df1c:	4770      	bx	lr
 800df1e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800df22:	2b05      	cmp	r3, #5
 800df24:	d801      	bhi.n	800df2a <__hexdig_fun+0x1a>
 800df26:	3847      	subs	r0, #71	@ 0x47
 800df28:	e7f7      	b.n	800df1a <__hexdig_fun+0xa>
 800df2a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800df2e:	2b05      	cmp	r3, #5
 800df30:	d801      	bhi.n	800df36 <__hexdig_fun+0x26>
 800df32:	3827      	subs	r0, #39	@ 0x27
 800df34:	e7f1      	b.n	800df1a <__hexdig_fun+0xa>
 800df36:	2000      	movs	r0, #0
 800df38:	4770      	bx	lr
	...

0800df3c <__gethex>:
 800df3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df40:	b085      	sub	sp, #20
 800df42:	468a      	mov	sl, r1
 800df44:	9302      	str	r3, [sp, #8]
 800df46:	680b      	ldr	r3, [r1, #0]
 800df48:	9001      	str	r0, [sp, #4]
 800df4a:	4690      	mov	r8, r2
 800df4c:	1c9c      	adds	r4, r3, #2
 800df4e:	46a1      	mov	r9, r4
 800df50:	f814 0b01 	ldrb.w	r0, [r4], #1
 800df54:	2830      	cmp	r0, #48	@ 0x30
 800df56:	d0fa      	beq.n	800df4e <__gethex+0x12>
 800df58:	eba9 0303 	sub.w	r3, r9, r3
 800df5c:	f1a3 0b02 	sub.w	fp, r3, #2
 800df60:	f7ff ffd6 	bl	800df10 <__hexdig_fun>
 800df64:	4605      	mov	r5, r0
 800df66:	2800      	cmp	r0, #0
 800df68:	d168      	bne.n	800e03c <__gethex+0x100>
 800df6a:	49a0      	ldr	r1, [pc, #640]	@ (800e1ec <__gethex+0x2b0>)
 800df6c:	2201      	movs	r2, #1
 800df6e:	4648      	mov	r0, r9
 800df70:	f7ff ff20 	bl	800ddb4 <strncmp>
 800df74:	4607      	mov	r7, r0
 800df76:	2800      	cmp	r0, #0
 800df78:	d167      	bne.n	800e04a <__gethex+0x10e>
 800df7a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800df7e:	4626      	mov	r6, r4
 800df80:	f7ff ffc6 	bl	800df10 <__hexdig_fun>
 800df84:	2800      	cmp	r0, #0
 800df86:	d062      	beq.n	800e04e <__gethex+0x112>
 800df88:	4623      	mov	r3, r4
 800df8a:	7818      	ldrb	r0, [r3, #0]
 800df8c:	2830      	cmp	r0, #48	@ 0x30
 800df8e:	4699      	mov	r9, r3
 800df90:	f103 0301 	add.w	r3, r3, #1
 800df94:	d0f9      	beq.n	800df8a <__gethex+0x4e>
 800df96:	f7ff ffbb 	bl	800df10 <__hexdig_fun>
 800df9a:	fab0 f580 	clz	r5, r0
 800df9e:	096d      	lsrs	r5, r5, #5
 800dfa0:	f04f 0b01 	mov.w	fp, #1
 800dfa4:	464a      	mov	r2, r9
 800dfa6:	4616      	mov	r6, r2
 800dfa8:	3201      	adds	r2, #1
 800dfaa:	7830      	ldrb	r0, [r6, #0]
 800dfac:	f7ff ffb0 	bl	800df10 <__hexdig_fun>
 800dfb0:	2800      	cmp	r0, #0
 800dfb2:	d1f8      	bne.n	800dfa6 <__gethex+0x6a>
 800dfb4:	498d      	ldr	r1, [pc, #564]	@ (800e1ec <__gethex+0x2b0>)
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7ff fefb 	bl	800ddb4 <strncmp>
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d13f      	bne.n	800e042 <__gethex+0x106>
 800dfc2:	b944      	cbnz	r4, 800dfd6 <__gethex+0x9a>
 800dfc4:	1c74      	adds	r4, r6, #1
 800dfc6:	4622      	mov	r2, r4
 800dfc8:	4616      	mov	r6, r2
 800dfca:	3201      	adds	r2, #1
 800dfcc:	7830      	ldrb	r0, [r6, #0]
 800dfce:	f7ff ff9f 	bl	800df10 <__hexdig_fun>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1f8      	bne.n	800dfc8 <__gethex+0x8c>
 800dfd6:	1ba4      	subs	r4, r4, r6
 800dfd8:	00a7      	lsls	r7, r4, #2
 800dfda:	7833      	ldrb	r3, [r6, #0]
 800dfdc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800dfe0:	2b50      	cmp	r3, #80	@ 0x50
 800dfe2:	d13e      	bne.n	800e062 <__gethex+0x126>
 800dfe4:	7873      	ldrb	r3, [r6, #1]
 800dfe6:	2b2b      	cmp	r3, #43	@ 0x2b
 800dfe8:	d033      	beq.n	800e052 <__gethex+0x116>
 800dfea:	2b2d      	cmp	r3, #45	@ 0x2d
 800dfec:	d034      	beq.n	800e058 <__gethex+0x11c>
 800dfee:	1c71      	adds	r1, r6, #1
 800dff0:	2400      	movs	r4, #0
 800dff2:	7808      	ldrb	r0, [r1, #0]
 800dff4:	f7ff ff8c 	bl	800df10 <__hexdig_fun>
 800dff8:	1e43      	subs	r3, r0, #1
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	2b18      	cmp	r3, #24
 800dffe:	d830      	bhi.n	800e062 <__gethex+0x126>
 800e000:	f1a0 0210 	sub.w	r2, r0, #16
 800e004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e008:	f7ff ff82 	bl	800df10 <__hexdig_fun>
 800e00c:	f100 3cff 	add.w	ip, r0, #4294967295
 800e010:	fa5f fc8c 	uxtb.w	ip, ip
 800e014:	f1bc 0f18 	cmp.w	ip, #24
 800e018:	f04f 030a 	mov.w	r3, #10
 800e01c:	d91e      	bls.n	800e05c <__gethex+0x120>
 800e01e:	b104      	cbz	r4, 800e022 <__gethex+0xe6>
 800e020:	4252      	negs	r2, r2
 800e022:	4417      	add	r7, r2
 800e024:	f8ca 1000 	str.w	r1, [sl]
 800e028:	b1ed      	cbz	r5, 800e066 <__gethex+0x12a>
 800e02a:	f1bb 0f00 	cmp.w	fp, #0
 800e02e:	bf0c      	ite	eq
 800e030:	2506      	moveq	r5, #6
 800e032:	2500      	movne	r5, #0
 800e034:	4628      	mov	r0, r5
 800e036:	b005      	add	sp, #20
 800e038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03c:	2500      	movs	r5, #0
 800e03e:	462c      	mov	r4, r5
 800e040:	e7b0      	b.n	800dfa4 <__gethex+0x68>
 800e042:	2c00      	cmp	r4, #0
 800e044:	d1c7      	bne.n	800dfd6 <__gethex+0x9a>
 800e046:	4627      	mov	r7, r4
 800e048:	e7c7      	b.n	800dfda <__gethex+0x9e>
 800e04a:	464e      	mov	r6, r9
 800e04c:	462f      	mov	r7, r5
 800e04e:	2501      	movs	r5, #1
 800e050:	e7c3      	b.n	800dfda <__gethex+0x9e>
 800e052:	2400      	movs	r4, #0
 800e054:	1cb1      	adds	r1, r6, #2
 800e056:	e7cc      	b.n	800dff2 <__gethex+0xb6>
 800e058:	2401      	movs	r4, #1
 800e05a:	e7fb      	b.n	800e054 <__gethex+0x118>
 800e05c:	fb03 0002 	mla	r0, r3, r2, r0
 800e060:	e7ce      	b.n	800e000 <__gethex+0xc4>
 800e062:	4631      	mov	r1, r6
 800e064:	e7de      	b.n	800e024 <__gethex+0xe8>
 800e066:	eba6 0309 	sub.w	r3, r6, r9
 800e06a:	3b01      	subs	r3, #1
 800e06c:	4629      	mov	r1, r5
 800e06e:	2b07      	cmp	r3, #7
 800e070:	dc0a      	bgt.n	800e088 <__gethex+0x14c>
 800e072:	9801      	ldr	r0, [sp, #4]
 800e074:	f7fd ff7c 	bl	800bf70 <_Balloc>
 800e078:	4604      	mov	r4, r0
 800e07a:	b940      	cbnz	r0, 800e08e <__gethex+0x152>
 800e07c:	4b5c      	ldr	r3, [pc, #368]	@ (800e1f0 <__gethex+0x2b4>)
 800e07e:	4602      	mov	r2, r0
 800e080:	21e4      	movs	r1, #228	@ 0xe4
 800e082:	485c      	ldr	r0, [pc, #368]	@ (800e1f4 <__gethex+0x2b8>)
 800e084:	f7ff fec0 	bl	800de08 <__assert_func>
 800e088:	3101      	adds	r1, #1
 800e08a:	105b      	asrs	r3, r3, #1
 800e08c:	e7ef      	b.n	800e06e <__gethex+0x132>
 800e08e:	f100 0a14 	add.w	sl, r0, #20
 800e092:	2300      	movs	r3, #0
 800e094:	4655      	mov	r5, sl
 800e096:	469b      	mov	fp, r3
 800e098:	45b1      	cmp	r9, r6
 800e09a:	d337      	bcc.n	800e10c <__gethex+0x1d0>
 800e09c:	f845 bb04 	str.w	fp, [r5], #4
 800e0a0:	eba5 050a 	sub.w	r5, r5, sl
 800e0a4:	10ad      	asrs	r5, r5, #2
 800e0a6:	6125      	str	r5, [r4, #16]
 800e0a8:	4658      	mov	r0, fp
 800e0aa:	f7fe f853 	bl	800c154 <__hi0bits>
 800e0ae:	016d      	lsls	r5, r5, #5
 800e0b0:	f8d8 6000 	ldr.w	r6, [r8]
 800e0b4:	1a2d      	subs	r5, r5, r0
 800e0b6:	42b5      	cmp	r5, r6
 800e0b8:	dd54      	ble.n	800e164 <__gethex+0x228>
 800e0ba:	1bad      	subs	r5, r5, r6
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f7fe fbdf 	bl	800c882 <__any_on>
 800e0c4:	4681      	mov	r9, r0
 800e0c6:	b178      	cbz	r0, 800e0e8 <__gethex+0x1ac>
 800e0c8:	1e6b      	subs	r3, r5, #1
 800e0ca:	1159      	asrs	r1, r3, #5
 800e0cc:	f003 021f 	and.w	r2, r3, #31
 800e0d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e0d4:	f04f 0901 	mov.w	r9, #1
 800e0d8:	fa09 f202 	lsl.w	r2, r9, r2
 800e0dc:	420a      	tst	r2, r1
 800e0de:	d003      	beq.n	800e0e8 <__gethex+0x1ac>
 800e0e0:	454b      	cmp	r3, r9
 800e0e2:	dc36      	bgt.n	800e152 <__gethex+0x216>
 800e0e4:	f04f 0902 	mov.w	r9, #2
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	f7ff febe 	bl	800de6c <rshift>
 800e0f0:	442f      	add	r7, r5
 800e0f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e0f6:	42bb      	cmp	r3, r7
 800e0f8:	da42      	bge.n	800e180 <__gethex+0x244>
 800e0fa:	9801      	ldr	r0, [sp, #4]
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	f7fd ff77 	bl	800bff0 <_Bfree>
 800e102:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e104:	2300      	movs	r3, #0
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	25a3      	movs	r5, #163	@ 0xa3
 800e10a:	e793      	b.n	800e034 <__gethex+0xf8>
 800e10c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e110:	2a2e      	cmp	r2, #46	@ 0x2e
 800e112:	d012      	beq.n	800e13a <__gethex+0x1fe>
 800e114:	2b20      	cmp	r3, #32
 800e116:	d104      	bne.n	800e122 <__gethex+0x1e6>
 800e118:	f845 bb04 	str.w	fp, [r5], #4
 800e11c:	f04f 0b00 	mov.w	fp, #0
 800e120:	465b      	mov	r3, fp
 800e122:	7830      	ldrb	r0, [r6, #0]
 800e124:	9303      	str	r3, [sp, #12]
 800e126:	f7ff fef3 	bl	800df10 <__hexdig_fun>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	f000 000f 	and.w	r0, r0, #15
 800e130:	4098      	lsls	r0, r3
 800e132:	ea4b 0b00 	orr.w	fp, fp, r0
 800e136:	3304      	adds	r3, #4
 800e138:	e7ae      	b.n	800e098 <__gethex+0x15c>
 800e13a:	45b1      	cmp	r9, r6
 800e13c:	d8ea      	bhi.n	800e114 <__gethex+0x1d8>
 800e13e:	492b      	ldr	r1, [pc, #172]	@ (800e1ec <__gethex+0x2b0>)
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	2201      	movs	r2, #1
 800e144:	4630      	mov	r0, r6
 800e146:	f7ff fe35 	bl	800ddb4 <strncmp>
 800e14a:	9b03      	ldr	r3, [sp, #12]
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d1e1      	bne.n	800e114 <__gethex+0x1d8>
 800e150:	e7a2      	b.n	800e098 <__gethex+0x15c>
 800e152:	1ea9      	subs	r1, r5, #2
 800e154:	4620      	mov	r0, r4
 800e156:	f7fe fb94 	bl	800c882 <__any_on>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d0c2      	beq.n	800e0e4 <__gethex+0x1a8>
 800e15e:	f04f 0903 	mov.w	r9, #3
 800e162:	e7c1      	b.n	800e0e8 <__gethex+0x1ac>
 800e164:	da09      	bge.n	800e17a <__gethex+0x23e>
 800e166:	1b75      	subs	r5, r6, r5
 800e168:	4621      	mov	r1, r4
 800e16a:	9801      	ldr	r0, [sp, #4]
 800e16c:	462a      	mov	r2, r5
 800e16e:	f7fe f94f 	bl	800c410 <__lshift>
 800e172:	1b7f      	subs	r7, r7, r5
 800e174:	4604      	mov	r4, r0
 800e176:	f100 0a14 	add.w	sl, r0, #20
 800e17a:	f04f 0900 	mov.w	r9, #0
 800e17e:	e7b8      	b.n	800e0f2 <__gethex+0x1b6>
 800e180:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e184:	42bd      	cmp	r5, r7
 800e186:	dd6f      	ble.n	800e268 <__gethex+0x32c>
 800e188:	1bed      	subs	r5, r5, r7
 800e18a:	42ae      	cmp	r6, r5
 800e18c:	dc34      	bgt.n	800e1f8 <__gethex+0x2bc>
 800e18e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e192:	2b02      	cmp	r3, #2
 800e194:	d022      	beq.n	800e1dc <__gethex+0x2a0>
 800e196:	2b03      	cmp	r3, #3
 800e198:	d024      	beq.n	800e1e4 <__gethex+0x2a8>
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d115      	bne.n	800e1ca <__gethex+0x28e>
 800e19e:	42ae      	cmp	r6, r5
 800e1a0:	d113      	bne.n	800e1ca <__gethex+0x28e>
 800e1a2:	2e01      	cmp	r6, #1
 800e1a4:	d10b      	bne.n	800e1be <__gethex+0x282>
 800e1a6:	9a02      	ldr	r2, [sp, #8]
 800e1a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	6123      	str	r3, [r4, #16]
 800e1b2:	f8ca 3000 	str.w	r3, [sl]
 800e1b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1b8:	2562      	movs	r5, #98	@ 0x62
 800e1ba:	601c      	str	r4, [r3, #0]
 800e1bc:	e73a      	b.n	800e034 <__gethex+0xf8>
 800e1be:	1e71      	subs	r1, r6, #1
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f7fe fb5e 	bl	800c882 <__any_on>
 800e1c6:	2800      	cmp	r0, #0
 800e1c8:	d1ed      	bne.n	800e1a6 <__gethex+0x26a>
 800e1ca:	9801      	ldr	r0, [sp, #4]
 800e1cc:	4621      	mov	r1, r4
 800e1ce:	f7fd ff0f 	bl	800bff0 <_Bfree>
 800e1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	6013      	str	r3, [r2, #0]
 800e1d8:	2550      	movs	r5, #80	@ 0x50
 800e1da:	e72b      	b.n	800e034 <__gethex+0xf8>
 800e1dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1f3      	bne.n	800e1ca <__gethex+0x28e>
 800e1e2:	e7e0      	b.n	800e1a6 <__gethex+0x26a>
 800e1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1dd      	bne.n	800e1a6 <__gethex+0x26a>
 800e1ea:	e7ee      	b.n	800e1ca <__gethex+0x28e>
 800e1ec:	0800ec2b 	.word	0x0800ec2b
 800e1f0:	0800ebc1 	.word	0x0800ebc1
 800e1f4:	0800ec82 	.word	0x0800ec82
 800e1f8:	1e6f      	subs	r7, r5, #1
 800e1fa:	f1b9 0f00 	cmp.w	r9, #0
 800e1fe:	d130      	bne.n	800e262 <__gethex+0x326>
 800e200:	b127      	cbz	r7, 800e20c <__gethex+0x2d0>
 800e202:	4639      	mov	r1, r7
 800e204:	4620      	mov	r0, r4
 800e206:	f7fe fb3c 	bl	800c882 <__any_on>
 800e20a:	4681      	mov	r9, r0
 800e20c:	117a      	asrs	r2, r7, #5
 800e20e:	2301      	movs	r3, #1
 800e210:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e214:	f007 071f 	and.w	r7, r7, #31
 800e218:	40bb      	lsls	r3, r7
 800e21a:	4213      	tst	r3, r2
 800e21c:	4629      	mov	r1, r5
 800e21e:	4620      	mov	r0, r4
 800e220:	bf18      	it	ne
 800e222:	f049 0902 	orrne.w	r9, r9, #2
 800e226:	f7ff fe21 	bl	800de6c <rshift>
 800e22a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e22e:	1b76      	subs	r6, r6, r5
 800e230:	2502      	movs	r5, #2
 800e232:	f1b9 0f00 	cmp.w	r9, #0
 800e236:	d047      	beq.n	800e2c8 <__gethex+0x38c>
 800e238:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d015      	beq.n	800e26c <__gethex+0x330>
 800e240:	2b03      	cmp	r3, #3
 800e242:	d017      	beq.n	800e274 <__gethex+0x338>
 800e244:	2b01      	cmp	r3, #1
 800e246:	d109      	bne.n	800e25c <__gethex+0x320>
 800e248:	f019 0f02 	tst.w	r9, #2
 800e24c:	d006      	beq.n	800e25c <__gethex+0x320>
 800e24e:	f8da 3000 	ldr.w	r3, [sl]
 800e252:	ea49 0903 	orr.w	r9, r9, r3
 800e256:	f019 0f01 	tst.w	r9, #1
 800e25a:	d10e      	bne.n	800e27a <__gethex+0x33e>
 800e25c:	f045 0510 	orr.w	r5, r5, #16
 800e260:	e032      	b.n	800e2c8 <__gethex+0x38c>
 800e262:	f04f 0901 	mov.w	r9, #1
 800e266:	e7d1      	b.n	800e20c <__gethex+0x2d0>
 800e268:	2501      	movs	r5, #1
 800e26a:	e7e2      	b.n	800e232 <__gethex+0x2f6>
 800e26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e26e:	f1c3 0301 	rsb	r3, r3, #1
 800e272:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e276:	2b00      	cmp	r3, #0
 800e278:	d0f0      	beq.n	800e25c <__gethex+0x320>
 800e27a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e27e:	f104 0314 	add.w	r3, r4, #20
 800e282:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e286:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e28a:	f04f 0c00 	mov.w	ip, #0
 800e28e:	4618      	mov	r0, r3
 800e290:	f853 2b04 	ldr.w	r2, [r3], #4
 800e294:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e298:	d01b      	beq.n	800e2d2 <__gethex+0x396>
 800e29a:	3201      	adds	r2, #1
 800e29c:	6002      	str	r2, [r0, #0]
 800e29e:	2d02      	cmp	r5, #2
 800e2a0:	f104 0314 	add.w	r3, r4, #20
 800e2a4:	d13c      	bne.n	800e320 <__gethex+0x3e4>
 800e2a6:	f8d8 2000 	ldr.w	r2, [r8]
 800e2aa:	3a01      	subs	r2, #1
 800e2ac:	42b2      	cmp	r2, r6
 800e2ae:	d109      	bne.n	800e2c4 <__gethex+0x388>
 800e2b0:	1171      	asrs	r1, r6, #5
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2b8:	f006 061f 	and.w	r6, r6, #31
 800e2bc:	fa02 f606 	lsl.w	r6, r2, r6
 800e2c0:	421e      	tst	r6, r3
 800e2c2:	d13a      	bne.n	800e33a <__gethex+0x3fe>
 800e2c4:	f045 0520 	orr.w	r5, r5, #32
 800e2c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2ca:	601c      	str	r4, [r3, #0]
 800e2cc:	9b02      	ldr	r3, [sp, #8]
 800e2ce:	601f      	str	r7, [r3, #0]
 800e2d0:	e6b0      	b.n	800e034 <__gethex+0xf8>
 800e2d2:	4299      	cmp	r1, r3
 800e2d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e2d8:	d8d9      	bhi.n	800e28e <__gethex+0x352>
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	459b      	cmp	fp, r3
 800e2de:	db17      	blt.n	800e310 <__gethex+0x3d4>
 800e2e0:	6861      	ldr	r1, [r4, #4]
 800e2e2:	9801      	ldr	r0, [sp, #4]
 800e2e4:	3101      	adds	r1, #1
 800e2e6:	f7fd fe43 	bl	800bf70 <_Balloc>
 800e2ea:	4681      	mov	r9, r0
 800e2ec:	b918      	cbnz	r0, 800e2f6 <__gethex+0x3ba>
 800e2ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e358 <__gethex+0x41c>)
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	2184      	movs	r1, #132	@ 0x84
 800e2f4:	e6c5      	b.n	800e082 <__gethex+0x146>
 800e2f6:	6922      	ldr	r2, [r4, #16]
 800e2f8:	3202      	adds	r2, #2
 800e2fa:	f104 010c 	add.w	r1, r4, #12
 800e2fe:	0092      	lsls	r2, r2, #2
 800e300:	300c      	adds	r0, #12
 800e302:	f7fc fec8 	bl	800b096 <memcpy>
 800e306:	4621      	mov	r1, r4
 800e308:	9801      	ldr	r0, [sp, #4]
 800e30a:	f7fd fe71 	bl	800bff0 <_Bfree>
 800e30e:	464c      	mov	r4, r9
 800e310:	6923      	ldr	r3, [r4, #16]
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e318:	6122      	str	r2, [r4, #16]
 800e31a:	2201      	movs	r2, #1
 800e31c:	615a      	str	r2, [r3, #20]
 800e31e:	e7be      	b.n	800e29e <__gethex+0x362>
 800e320:	6922      	ldr	r2, [r4, #16]
 800e322:	455a      	cmp	r2, fp
 800e324:	dd0b      	ble.n	800e33e <__gethex+0x402>
 800e326:	2101      	movs	r1, #1
 800e328:	4620      	mov	r0, r4
 800e32a:	f7ff fd9f 	bl	800de6c <rshift>
 800e32e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e332:	3701      	adds	r7, #1
 800e334:	42bb      	cmp	r3, r7
 800e336:	f6ff aee0 	blt.w	800e0fa <__gethex+0x1be>
 800e33a:	2501      	movs	r5, #1
 800e33c:	e7c2      	b.n	800e2c4 <__gethex+0x388>
 800e33e:	f016 061f 	ands.w	r6, r6, #31
 800e342:	d0fa      	beq.n	800e33a <__gethex+0x3fe>
 800e344:	4453      	add	r3, sl
 800e346:	f1c6 0620 	rsb	r6, r6, #32
 800e34a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e34e:	f7fd ff01 	bl	800c154 <__hi0bits>
 800e352:	42b0      	cmp	r0, r6
 800e354:	dbe7      	blt.n	800e326 <__gethex+0x3ea>
 800e356:	e7f0      	b.n	800e33a <__gethex+0x3fe>
 800e358:	0800ebc1 	.word	0x0800ebc1

0800e35c <L_shift>:
 800e35c:	f1c2 0208 	rsb	r2, r2, #8
 800e360:	0092      	lsls	r2, r2, #2
 800e362:	b570      	push	{r4, r5, r6, lr}
 800e364:	f1c2 0620 	rsb	r6, r2, #32
 800e368:	6843      	ldr	r3, [r0, #4]
 800e36a:	6804      	ldr	r4, [r0, #0]
 800e36c:	fa03 f506 	lsl.w	r5, r3, r6
 800e370:	432c      	orrs	r4, r5
 800e372:	40d3      	lsrs	r3, r2
 800e374:	6004      	str	r4, [r0, #0]
 800e376:	f840 3f04 	str.w	r3, [r0, #4]!
 800e37a:	4288      	cmp	r0, r1
 800e37c:	d3f4      	bcc.n	800e368 <L_shift+0xc>
 800e37e:	bd70      	pop	{r4, r5, r6, pc}

0800e380 <__match>:
 800e380:	b530      	push	{r4, r5, lr}
 800e382:	6803      	ldr	r3, [r0, #0]
 800e384:	3301      	adds	r3, #1
 800e386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e38a:	b914      	cbnz	r4, 800e392 <__match+0x12>
 800e38c:	6003      	str	r3, [r0, #0]
 800e38e:	2001      	movs	r0, #1
 800e390:	bd30      	pop	{r4, r5, pc}
 800e392:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e396:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e39a:	2d19      	cmp	r5, #25
 800e39c:	bf98      	it	ls
 800e39e:	3220      	addls	r2, #32
 800e3a0:	42a2      	cmp	r2, r4
 800e3a2:	d0f0      	beq.n	800e386 <__match+0x6>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	e7f3      	b.n	800e390 <__match+0x10>

0800e3a8 <__hexnan>:
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	680b      	ldr	r3, [r1, #0]
 800e3ae:	6801      	ldr	r1, [r0, #0]
 800e3b0:	115e      	asrs	r6, r3, #5
 800e3b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e3b6:	f013 031f 	ands.w	r3, r3, #31
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	bf18      	it	ne
 800e3be:	3604      	addne	r6, #4
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	1f37      	subs	r7, r6, #4
 800e3c4:	4682      	mov	sl, r0
 800e3c6:	4690      	mov	r8, r2
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800e3ce:	46b9      	mov	r9, r7
 800e3d0:	463c      	mov	r4, r7
 800e3d2:	9502      	str	r5, [sp, #8]
 800e3d4:	46ab      	mov	fp, r5
 800e3d6:	784a      	ldrb	r2, [r1, #1]
 800e3d8:	1c4b      	adds	r3, r1, #1
 800e3da:	9303      	str	r3, [sp, #12]
 800e3dc:	b342      	cbz	r2, 800e430 <__hexnan+0x88>
 800e3de:	4610      	mov	r0, r2
 800e3e0:	9105      	str	r1, [sp, #20]
 800e3e2:	9204      	str	r2, [sp, #16]
 800e3e4:	f7ff fd94 	bl	800df10 <__hexdig_fun>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	d151      	bne.n	800e490 <__hexnan+0xe8>
 800e3ec:	9a04      	ldr	r2, [sp, #16]
 800e3ee:	9905      	ldr	r1, [sp, #20]
 800e3f0:	2a20      	cmp	r2, #32
 800e3f2:	d818      	bhi.n	800e426 <__hexnan+0x7e>
 800e3f4:	9b02      	ldr	r3, [sp, #8]
 800e3f6:	459b      	cmp	fp, r3
 800e3f8:	dd13      	ble.n	800e422 <__hexnan+0x7a>
 800e3fa:	454c      	cmp	r4, r9
 800e3fc:	d206      	bcs.n	800e40c <__hexnan+0x64>
 800e3fe:	2d07      	cmp	r5, #7
 800e400:	dc04      	bgt.n	800e40c <__hexnan+0x64>
 800e402:	462a      	mov	r2, r5
 800e404:	4649      	mov	r1, r9
 800e406:	4620      	mov	r0, r4
 800e408:	f7ff ffa8 	bl	800e35c <L_shift>
 800e40c:	4544      	cmp	r4, r8
 800e40e:	d952      	bls.n	800e4b6 <__hexnan+0x10e>
 800e410:	2300      	movs	r3, #0
 800e412:	f1a4 0904 	sub.w	r9, r4, #4
 800e416:	f844 3c04 	str.w	r3, [r4, #-4]
 800e41a:	f8cd b008 	str.w	fp, [sp, #8]
 800e41e:	464c      	mov	r4, r9
 800e420:	461d      	mov	r5, r3
 800e422:	9903      	ldr	r1, [sp, #12]
 800e424:	e7d7      	b.n	800e3d6 <__hexnan+0x2e>
 800e426:	2a29      	cmp	r2, #41	@ 0x29
 800e428:	d157      	bne.n	800e4da <__hexnan+0x132>
 800e42a:	3102      	adds	r1, #2
 800e42c:	f8ca 1000 	str.w	r1, [sl]
 800e430:	f1bb 0f00 	cmp.w	fp, #0
 800e434:	d051      	beq.n	800e4da <__hexnan+0x132>
 800e436:	454c      	cmp	r4, r9
 800e438:	d206      	bcs.n	800e448 <__hexnan+0xa0>
 800e43a:	2d07      	cmp	r5, #7
 800e43c:	dc04      	bgt.n	800e448 <__hexnan+0xa0>
 800e43e:	462a      	mov	r2, r5
 800e440:	4649      	mov	r1, r9
 800e442:	4620      	mov	r0, r4
 800e444:	f7ff ff8a 	bl	800e35c <L_shift>
 800e448:	4544      	cmp	r4, r8
 800e44a:	d936      	bls.n	800e4ba <__hexnan+0x112>
 800e44c:	f1a8 0204 	sub.w	r2, r8, #4
 800e450:	4623      	mov	r3, r4
 800e452:	f853 1b04 	ldr.w	r1, [r3], #4
 800e456:	f842 1f04 	str.w	r1, [r2, #4]!
 800e45a:	429f      	cmp	r7, r3
 800e45c:	d2f9      	bcs.n	800e452 <__hexnan+0xaa>
 800e45e:	1b3b      	subs	r3, r7, r4
 800e460:	f023 0303 	bic.w	r3, r3, #3
 800e464:	3304      	adds	r3, #4
 800e466:	3401      	adds	r4, #1
 800e468:	3e03      	subs	r6, #3
 800e46a:	42b4      	cmp	r4, r6
 800e46c:	bf88      	it	hi
 800e46e:	2304      	movhi	r3, #4
 800e470:	4443      	add	r3, r8
 800e472:	2200      	movs	r2, #0
 800e474:	f843 2b04 	str.w	r2, [r3], #4
 800e478:	429f      	cmp	r7, r3
 800e47a:	d2fb      	bcs.n	800e474 <__hexnan+0xcc>
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	b91b      	cbnz	r3, 800e488 <__hexnan+0xe0>
 800e480:	4547      	cmp	r7, r8
 800e482:	d128      	bne.n	800e4d6 <__hexnan+0x12e>
 800e484:	2301      	movs	r3, #1
 800e486:	603b      	str	r3, [r7, #0]
 800e488:	2005      	movs	r0, #5
 800e48a:	b007      	add	sp, #28
 800e48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e490:	3501      	adds	r5, #1
 800e492:	2d08      	cmp	r5, #8
 800e494:	f10b 0b01 	add.w	fp, fp, #1
 800e498:	dd06      	ble.n	800e4a8 <__hexnan+0x100>
 800e49a:	4544      	cmp	r4, r8
 800e49c:	d9c1      	bls.n	800e422 <__hexnan+0x7a>
 800e49e:	2300      	movs	r3, #0
 800e4a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4a4:	2501      	movs	r5, #1
 800e4a6:	3c04      	subs	r4, #4
 800e4a8:	6822      	ldr	r2, [r4, #0]
 800e4aa:	f000 000f 	and.w	r0, r0, #15
 800e4ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4b2:	6020      	str	r0, [r4, #0]
 800e4b4:	e7b5      	b.n	800e422 <__hexnan+0x7a>
 800e4b6:	2508      	movs	r5, #8
 800e4b8:	e7b3      	b.n	800e422 <__hexnan+0x7a>
 800e4ba:	9b01      	ldr	r3, [sp, #4]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d0dd      	beq.n	800e47c <__hexnan+0xd4>
 800e4c0:	f1c3 0320 	rsb	r3, r3, #32
 800e4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4c8:	40da      	lsrs	r2, r3
 800e4ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e4ce:	4013      	ands	r3, r2
 800e4d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e4d4:	e7d2      	b.n	800e47c <__hexnan+0xd4>
 800e4d6:	3f04      	subs	r7, #4
 800e4d8:	e7d0      	b.n	800e47c <__hexnan+0xd4>
 800e4da:	2004      	movs	r0, #4
 800e4dc:	e7d5      	b.n	800e48a <__hexnan+0xe2>

0800e4de <__ascii_mbtowc>:
 800e4de:	b082      	sub	sp, #8
 800e4e0:	b901      	cbnz	r1, 800e4e4 <__ascii_mbtowc+0x6>
 800e4e2:	a901      	add	r1, sp, #4
 800e4e4:	b142      	cbz	r2, 800e4f8 <__ascii_mbtowc+0x1a>
 800e4e6:	b14b      	cbz	r3, 800e4fc <__ascii_mbtowc+0x1e>
 800e4e8:	7813      	ldrb	r3, [r2, #0]
 800e4ea:	600b      	str	r3, [r1, #0]
 800e4ec:	7812      	ldrb	r2, [r2, #0]
 800e4ee:	1e10      	subs	r0, r2, #0
 800e4f0:	bf18      	it	ne
 800e4f2:	2001      	movne	r0, #1
 800e4f4:	b002      	add	sp, #8
 800e4f6:	4770      	bx	lr
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	e7fb      	b.n	800e4f4 <__ascii_mbtowc+0x16>
 800e4fc:	f06f 0001 	mvn.w	r0, #1
 800e500:	e7f8      	b.n	800e4f4 <__ascii_mbtowc+0x16>

0800e502 <_realloc_r>:
 800e502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e506:	4607      	mov	r7, r0
 800e508:	4614      	mov	r4, r2
 800e50a:	460d      	mov	r5, r1
 800e50c:	b921      	cbnz	r1, 800e518 <_realloc_r+0x16>
 800e50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e512:	4611      	mov	r1, r2
 800e514:	f7fd bca0 	b.w	800be58 <_malloc_r>
 800e518:	b92a      	cbnz	r2, 800e526 <_realloc_r+0x24>
 800e51a:	f7fd fc29 	bl	800bd70 <_free_r>
 800e51e:	4625      	mov	r5, r4
 800e520:	4628      	mov	r0, r5
 800e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e526:	f000 f8c4 	bl	800e6b2 <_malloc_usable_size_r>
 800e52a:	4284      	cmp	r4, r0
 800e52c:	4606      	mov	r6, r0
 800e52e:	d802      	bhi.n	800e536 <_realloc_r+0x34>
 800e530:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e534:	d8f4      	bhi.n	800e520 <_realloc_r+0x1e>
 800e536:	4621      	mov	r1, r4
 800e538:	4638      	mov	r0, r7
 800e53a:	f7fd fc8d 	bl	800be58 <_malloc_r>
 800e53e:	4680      	mov	r8, r0
 800e540:	b908      	cbnz	r0, 800e546 <_realloc_r+0x44>
 800e542:	4645      	mov	r5, r8
 800e544:	e7ec      	b.n	800e520 <_realloc_r+0x1e>
 800e546:	42b4      	cmp	r4, r6
 800e548:	4622      	mov	r2, r4
 800e54a:	4629      	mov	r1, r5
 800e54c:	bf28      	it	cs
 800e54e:	4632      	movcs	r2, r6
 800e550:	f7fc fda1 	bl	800b096 <memcpy>
 800e554:	4629      	mov	r1, r5
 800e556:	4638      	mov	r0, r7
 800e558:	f7fd fc0a 	bl	800bd70 <_free_r>
 800e55c:	e7f1      	b.n	800e542 <_realloc_r+0x40>

0800e55e <__ascii_wctomb>:
 800e55e:	4603      	mov	r3, r0
 800e560:	4608      	mov	r0, r1
 800e562:	b141      	cbz	r1, 800e576 <__ascii_wctomb+0x18>
 800e564:	2aff      	cmp	r2, #255	@ 0xff
 800e566:	d904      	bls.n	800e572 <__ascii_wctomb+0x14>
 800e568:	228a      	movs	r2, #138	@ 0x8a
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	4770      	bx	lr
 800e572:	700a      	strb	r2, [r1, #0]
 800e574:	2001      	movs	r0, #1
 800e576:	4770      	bx	lr

0800e578 <fiprintf>:
 800e578:	b40e      	push	{r1, r2, r3}
 800e57a:	b503      	push	{r0, r1, lr}
 800e57c:	4601      	mov	r1, r0
 800e57e:	ab03      	add	r3, sp, #12
 800e580:	4805      	ldr	r0, [pc, #20]	@ (800e598 <fiprintf+0x20>)
 800e582:	f853 2b04 	ldr.w	r2, [r3], #4
 800e586:	6800      	ldr	r0, [r0, #0]
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	f7ff f9a1 	bl	800d8d0 <_vfiprintf_r>
 800e58e:	b002      	add	sp, #8
 800e590:	f85d eb04 	ldr.w	lr, [sp], #4
 800e594:	b003      	add	sp, #12
 800e596:	4770      	bx	lr
 800e598:	20000020 	.word	0x20000020

0800e59c <__swhatbuf_r>:
 800e59c:	b570      	push	{r4, r5, r6, lr}
 800e59e:	460c      	mov	r4, r1
 800e5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	b096      	sub	sp, #88	@ 0x58
 800e5a8:	4615      	mov	r5, r2
 800e5aa:	461e      	mov	r6, r3
 800e5ac:	da0d      	bge.n	800e5ca <__swhatbuf_r+0x2e>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5b4:	f04f 0100 	mov.w	r1, #0
 800e5b8:	bf14      	ite	ne
 800e5ba:	2340      	movne	r3, #64	@ 0x40
 800e5bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	6031      	str	r1, [r6, #0]
 800e5c4:	602b      	str	r3, [r5, #0]
 800e5c6:	b016      	add	sp, #88	@ 0x58
 800e5c8:	bd70      	pop	{r4, r5, r6, pc}
 800e5ca:	466a      	mov	r2, sp
 800e5cc:	f000 f848 	bl	800e660 <_fstat_r>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	dbec      	blt.n	800e5ae <__swhatbuf_r+0x12>
 800e5d4:	9901      	ldr	r1, [sp, #4]
 800e5d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5de:	4259      	negs	r1, r3
 800e5e0:	4159      	adcs	r1, r3
 800e5e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5e6:	e7eb      	b.n	800e5c0 <__swhatbuf_r+0x24>

0800e5e8 <__smakebuf_r>:
 800e5e8:	898b      	ldrh	r3, [r1, #12]
 800e5ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5ec:	079d      	lsls	r5, r3, #30
 800e5ee:	4606      	mov	r6, r0
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	d507      	bpl.n	800e604 <__smakebuf_r+0x1c>
 800e5f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e5f8:	6023      	str	r3, [r4, #0]
 800e5fa:	6123      	str	r3, [r4, #16]
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	6163      	str	r3, [r4, #20]
 800e600:	b003      	add	sp, #12
 800e602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e604:	ab01      	add	r3, sp, #4
 800e606:	466a      	mov	r2, sp
 800e608:	f7ff ffc8 	bl	800e59c <__swhatbuf_r>
 800e60c:	9f00      	ldr	r7, [sp, #0]
 800e60e:	4605      	mov	r5, r0
 800e610:	4639      	mov	r1, r7
 800e612:	4630      	mov	r0, r6
 800e614:	f7fd fc20 	bl	800be58 <_malloc_r>
 800e618:	b948      	cbnz	r0, 800e62e <__smakebuf_r+0x46>
 800e61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e61e:	059a      	lsls	r2, r3, #22
 800e620:	d4ee      	bmi.n	800e600 <__smakebuf_r+0x18>
 800e622:	f023 0303 	bic.w	r3, r3, #3
 800e626:	f043 0302 	orr.w	r3, r3, #2
 800e62a:	81a3      	strh	r3, [r4, #12]
 800e62c:	e7e2      	b.n	800e5f4 <__smakebuf_r+0xc>
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	6020      	str	r0, [r4, #0]
 800e632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e636:	81a3      	strh	r3, [r4, #12]
 800e638:	9b01      	ldr	r3, [sp, #4]
 800e63a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e63e:	b15b      	cbz	r3, 800e658 <__smakebuf_r+0x70>
 800e640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e644:	4630      	mov	r0, r6
 800e646:	f000 f81d 	bl	800e684 <_isatty_r>
 800e64a:	b128      	cbz	r0, 800e658 <__smakebuf_r+0x70>
 800e64c:	89a3      	ldrh	r3, [r4, #12]
 800e64e:	f023 0303 	bic.w	r3, r3, #3
 800e652:	f043 0301 	orr.w	r3, r3, #1
 800e656:	81a3      	strh	r3, [r4, #12]
 800e658:	89a3      	ldrh	r3, [r4, #12]
 800e65a:	431d      	orrs	r5, r3
 800e65c:	81a5      	strh	r5, [r4, #12]
 800e65e:	e7cf      	b.n	800e600 <__smakebuf_r+0x18>

0800e660 <_fstat_r>:
 800e660:	b538      	push	{r3, r4, r5, lr}
 800e662:	4d07      	ldr	r5, [pc, #28]	@ (800e680 <_fstat_r+0x20>)
 800e664:	2300      	movs	r3, #0
 800e666:	4604      	mov	r4, r0
 800e668:	4608      	mov	r0, r1
 800e66a:	4611      	mov	r1, r2
 800e66c:	602b      	str	r3, [r5, #0]
 800e66e:	f7f4 fac1 	bl	8002bf4 <_fstat>
 800e672:	1c43      	adds	r3, r0, #1
 800e674:	d102      	bne.n	800e67c <_fstat_r+0x1c>
 800e676:	682b      	ldr	r3, [r5, #0]
 800e678:	b103      	cbz	r3, 800e67c <_fstat_r+0x1c>
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	bd38      	pop	{r3, r4, r5, pc}
 800e67e:	bf00      	nop
 800e680:	20004f78 	.word	0x20004f78

0800e684 <_isatty_r>:
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4d06      	ldr	r5, [pc, #24]	@ (800e6a0 <_isatty_r+0x1c>)
 800e688:	2300      	movs	r3, #0
 800e68a:	4604      	mov	r4, r0
 800e68c:	4608      	mov	r0, r1
 800e68e:	602b      	str	r3, [r5, #0]
 800e690:	f7f4 fac0 	bl	8002c14 <_isatty>
 800e694:	1c43      	adds	r3, r0, #1
 800e696:	d102      	bne.n	800e69e <_isatty_r+0x1a>
 800e698:	682b      	ldr	r3, [r5, #0]
 800e69a:	b103      	cbz	r3, 800e69e <_isatty_r+0x1a>
 800e69c:	6023      	str	r3, [r4, #0]
 800e69e:	bd38      	pop	{r3, r4, r5, pc}
 800e6a0:	20004f78 	.word	0x20004f78

0800e6a4 <abort>:
 800e6a4:	b508      	push	{r3, lr}
 800e6a6:	2006      	movs	r0, #6
 800e6a8:	f000 f834 	bl	800e714 <raise>
 800e6ac:	2001      	movs	r0, #1
 800e6ae:	f7f4 fa51 	bl	8002b54 <_exit>

0800e6b2 <_malloc_usable_size_r>:
 800e6b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6b6:	1f18      	subs	r0, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	bfbc      	itt	lt
 800e6bc:	580b      	ldrlt	r3, [r1, r0]
 800e6be:	18c0      	addlt	r0, r0, r3
 800e6c0:	4770      	bx	lr

0800e6c2 <_raise_r>:
 800e6c2:	291f      	cmp	r1, #31
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	4605      	mov	r5, r0
 800e6c8:	460c      	mov	r4, r1
 800e6ca:	d904      	bls.n	800e6d6 <_raise_r+0x14>
 800e6cc:	2316      	movs	r3, #22
 800e6ce:	6003      	str	r3, [r0, #0]
 800e6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6d4:	bd38      	pop	{r3, r4, r5, pc}
 800e6d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e6d8:	b112      	cbz	r2, 800e6e0 <_raise_r+0x1e>
 800e6da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6de:	b94b      	cbnz	r3, 800e6f4 <_raise_r+0x32>
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f000 f831 	bl	800e748 <_getpid_r>
 800e6e6:	4622      	mov	r2, r4
 800e6e8:	4601      	mov	r1, r0
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6f0:	f000 b818 	b.w	800e724 <_kill_r>
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d00a      	beq.n	800e70e <_raise_r+0x4c>
 800e6f8:	1c59      	adds	r1, r3, #1
 800e6fa:	d103      	bne.n	800e704 <_raise_r+0x42>
 800e6fc:	2316      	movs	r3, #22
 800e6fe:	6003      	str	r3, [r0, #0]
 800e700:	2001      	movs	r0, #1
 800e702:	e7e7      	b.n	800e6d4 <_raise_r+0x12>
 800e704:	2100      	movs	r1, #0
 800e706:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e70a:	4620      	mov	r0, r4
 800e70c:	4798      	blx	r3
 800e70e:	2000      	movs	r0, #0
 800e710:	e7e0      	b.n	800e6d4 <_raise_r+0x12>
	...

0800e714 <raise>:
 800e714:	4b02      	ldr	r3, [pc, #8]	@ (800e720 <raise+0xc>)
 800e716:	4601      	mov	r1, r0
 800e718:	6818      	ldr	r0, [r3, #0]
 800e71a:	f7ff bfd2 	b.w	800e6c2 <_raise_r>
 800e71e:	bf00      	nop
 800e720:	20000020 	.word	0x20000020

0800e724 <_kill_r>:
 800e724:	b538      	push	{r3, r4, r5, lr}
 800e726:	4d07      	ldr	r5, [pc, #28]	@ (800e744 <_kill_r+0x20>)
 800e728:	2300      	movs	r3, #0
 800e72a:	4604      	mov	r4, r0
 800e72c:	4608      	mov	r0, r1
 800e72e:	4611      	mov	r1, r2
 800e730:	602b      	str	r3, [r5, #0]
 800e732:	f7f4 f9ff 	bl	8002b34 <_kill>
 800e736:	1c43      	adds	r3, r0, #1
 800e738:	d102      	bne.n	800e740 <_kill_r+0x1c>
 800e73a:	682b      	ldr	r3, [r5, #0]
 800e73c:	b103      	cbz	r3, 800e740 <_kill_r+0x1c>
 800e73e:	6023      	str	r3, [r4, #0]
 800e740:	bd38      	pop	{r3, r4, r5, pc}
 800e742:	bf00      	nop
 800e744:	20004f78 	.word	0x20004f78

0800e748 <_getpid_r>:
 800e748:	f7f4 b9ec 	b.w	8002b24 <_getpid>

0800e74c <_init>:
 800e74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74e:	bf00      	nop
 800e750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e752:	bc08      	pop	{r3}
 800e754:	469e      	mov	lr, r3
 800e756:	4770      	bx	lr

0800e758 <_fini>:
 800e758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75a:	bf00      	nop
 800e75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e75e:	bc08      	pop	{r3}
 800e760:	469e      	mov	lr, r3
 800e762:	4770      	bx	lr
